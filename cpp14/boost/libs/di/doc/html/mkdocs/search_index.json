{
    "docs": [
        {
            "location": "/index.html", 
            "text": "Introduction\n\n\n\n\n\n\n\n\nExperimental Boost.DI\n\n\n\n\n\n\n\n\n\n\n\n\nYour C++14 header only dependency injection library with no dependencies (\nTry it online!\n)\n\n\nGitHub\n\n\n\n\n\n\n\n\n\n\n Latest Release: \nv1.0.0\n (February 28, 2016)\n\n\n \nDownload\n \n \n \nChangelog\n \n \n \nTutorial\n \n \n \nExamples\n\n\n\n\n\nWhat is Dependency Injection?\n\n\n\n\n\"Don't call us, we'll call you\", Hollywood principle\n\n\n\n\nDependency Injection\n (DI)\n involves passing (injecting) one or more dependencies (or services) to a dependent object (or client) which become part of the client\u2019s state.\nIt is like the Strategy Pattern, except the strategy is set once, at construction. DI enables loosely coupled designs, which are easier to maintain and test.\n\n\n\n\n\"Let's make some coffee!\"\n\n\n\n\n\n\nNo Dependency injection                 | Dependency Injection\n----------------------------------------|--------------------------------------------\nclass coffee_maker {                    | class coffee_maker {\npublic:                                 | public:\n    void brew() {                       |   coffee_maker(shared_ptr\niheater\n heater\n        heater-\non();                   |              , unique_ptr\nipump\n pump)\n        pump-\npump();                   |         : heater(heater), pump(move(pump))\n        clog \n \ncoffee\n! \n endl;      |     { }\n        heater-\noff();                  |\n    }                                   |     void brew() {\n                                        |         heater-\non();\nprivate:                                |         pump-\npump();\n    shared_ptr\niheater\n heater =        |         clog \n \ncoffee!\n \n endl;\n        make_shared\nelectric_heater\n(); |         heater-\noff();\n                                        |     }\n    unique_ptr\nipump\n pump =            |\n        make_unique\nheat_pump\n(heater); | private:\n};                                      |     shared_ptr\niheater\n heater;\n                                        |     unique_ptr\nipump\n pump;\n                                        | };\n                                        |\n\n\n\n\nDo I need Dependency Injection?\n\n\nReal Life examples?\n\n\nWhy Dependency Injection?\n\n\n\n\nDI provides loosely coupled code (separation of business logic and object creation)\n\n\nDI provides easier to maintain code (different objects might be easily injected)\n\n\nDI provides easier to test code (fakes objects might be injected)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhy Boost.DI?\n\n\n\n\nBoost.DI has none or minimal run-time overhead - \nRun-time performance\n\n\nBoost.DI compiles fast - \nCompile-time performance\n\n\nBoost.DI gives short diagnostic messages - \nDiagnostic messages\n\n\nBoost.DI is not intrusive\n\n\nBoost.DI reduces boilerplate code\n\n\nBoost.DI reduces testing effort\n\n\nBoost.DI gives better control of what and how is created\n\n\nBoost.DI gives better understanding about objects hierarchy\n\n\n\n\nAcknowledgements\n\n\n\n\nThanks to Bartosz Kalinczuk for code review and tips how to improve \nBoost.DI\n\n\nThanks to Sohail Somani for support and tips how to improve \nBoost.DI\n\n\nThanks to Rob Stewart and Robert Ramey for documentation feedback and tips how to improve it", 
            "title": "Introduction"
        }, 
        {
            "location": "/index.html#introduction", 
            "text": "Experimental Boost.DI       Your C++14 header only dependency injection library with no dependencies ( Try it online! )  GitHub", 
            "title": "Introduction"
        }, 
        {
            "location": "/index.html#what-is-dependency-injection", 
            "text": "\"Don't call us, we'll call you\", Hollywood principle   Dependency Injection  (DI)  involves passing (injecting) one or more dependencies (or services) to a dependent object (or client) which become part of the client\u2019s state.\nIt is like the Strategy Pattern, except the strategy is set once, at construction. DI enables loosely coupled designs, which are easier to maintain and test.   \"Let's make some coffee!\"    No Dependency injection                 | Dependency Injection\n----------------------------------------|--------------------------------------------\nclass coffee_maker {                    | class coffee_maker {\npublic:                                 | public:\n    void brew() {                       |   coffee_maker(shared_ptr iheater  heater\n        heater- on();                   |              , unique_ptr ipump  pump)\n        pump- pump();                   |         : heater(heater), pump(move(pump))\n        clog    coffee !   endl;      |     { }\n        heater- off();                  |\n    }                                   |     void brew() {\n                                        |         heater- on();\nprivate:                                |         pump- pump();\n    shared_ptr iheater  heater =        |         clog    coffee!    endl;\n        make_shared electric_heater (); |         heater- off();\n                                        |     }\n    unique_ptr ipump  pump =            |\n        make_unique heat_pump (heater); | private:\n};                                      |     shared_ptr iheater  heater;\n                                        |     unique_ptr ipump  pump;\n                                        | };\n                                        |", 
            "title": "What is Dependency Injection?"
        }, 
        {
            "location": "/index.html#do-i-need-dependency-injection", 
            "text": "", 
            "title": "Do I need Dependency Injection?"
        }, 
        {
            "location": "/index.html#real-life-examples", 
            "text": "", 
            "title": "Real Life examples?"
        }, 
        {
            "location": "/index.html#why-dependency-injection", 
            "text": "DI provides loosely coupled code (separation of business logic and object creation)  DI provides easier to maintain code (different objects might be easily injected)  DI provides easier to test code (fakes objects might be injected)", 
            "title": "Why Dependency Injection?"
        }, 
        {
            "location": "/index.html#why-boostdi", 
            "text": "Boost.DI has none or minimal run-time overhead -  Run-time performance  Boost.DI compiles fast -  Compile-time performance  Boost.DI gives short diagnostic messages -  Diagnostic messages  Boost.DI is not intrusive  Boost.DI reduces boilerplate code  Boost.DI reduces testing effort  Boost.DI gives better control of what and how is created  Boost.DI gives better understanding about objects hierarchy", 
            "title": "Why Boost.DI?"
        }, 
        {
            "location": "/index.html#acknowledgements", 
            "text": "Thanks to Bartosz Kalinczuk for code review and tips how to improve  Boost.DI  Thanks to Sohail Somani for support and tips how to improve  Boost.DI  Thanks to Rob Stewart and Robert Ramey for documentation feedback and tips how to improve it", 
            "title": "Acknowledgements"
        }, 
        {
            "location": "/overview/index.html", 
            "text": "Quick Start\n\n\n\n\nGet \nboost/di.hpp\n header\n\n\n\n\nwget https://raw.githubusercontent.com/boost-experimental/di/master/include/boost/di.hpp\n\n\n\n\n\n\nInclude the header and define \nmsm\n namespace alias\n\n\n\n\n#include \nboost/di.hpp\n\nnamespace di = boost::di;\n\n\n\n\n\n\nCompile with C++14 support\n\n\n\n\n$CXX -std=c++14 ...\n\n\n\n\n\n\nTo run tests\n\n\n\n\ngit clone https://github.com/boost-experimental/di \n cd di \n make test\n\n\n\n\nDependencies\n\n\n\n\nNo external dependencies are required (neither STL nor Boost)\n\n\n\n\nSupported/tested compilers\n\n\n\n\nClang-3.4+\n\n\nGCC-5.2+\n\n\n\n\nConfiguration\n\n\n\n\n\n\n\n\nMacro\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBOOST_DI_VERSION\n\n\nCurrent version of Boost.DI (ex. 1'0'0)\n\n\n\n\n\n\nBOOST_DI_CFG\n\n\nGlobal configuration allows to customize provider and policies\n\n\n\n\n\n\nBOOST_DI_CFG_DIAGNOSTICS_LEVEL\n\n\nGlobal configuration allows to customize provider and policies\n\n\n\n\n\n\nBOOST_DI_CFG_CTOR_LIMIT_SIZE\n\n\nLimits number of allowed consturctor parameters [0-10, default=10]\n\n\n\n\n\n\nBOOST_DI_NAMESPACE_BEGIN\n\n\nLimits number of allowed consturctor parameters [0-10, default=10]\n\n\n\n\n\n\nBOOST_DI_NAMESPACE_END\n\n\nLimits number of allowed consturctor parameters [0-10, default=10]\n\n\n\n\n\n\n\n\nOther Libraries\n\n\nPerformance\n\n\n\n\n\n\nRun-time performance (-O2)\n\n* Environment\n    * x86_64 Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz GenuineIntel GNU/Linux\n    * clang++3.4 -O2 / \ngdb -batch -ex 'file ./a.out' -ex 'disassemble main'\n\n\n\n\nCreate type wihtout bindings            | Asm x86-64 (same as `return 0`)\n----------------------------------------|-----------------------------------------\nint main() {                            | xor %eax,%eax\n    auto injector = di::make_injector();| retq\n    return injector.create\nint\n();      |\n}                                       |\n\n\n\n\nCreate type with bound instance         | Asm x86-64 (same as `return 42`)\n----------------------------------------|-----------------------------------------\nint main() {                            | mov $0x2a,%eax\n    auto injector = di::make_injector(  | retq\n        di::bind\nint\n.to(42)            |\n    );                                  |\n                                        |\n    return injector.create\nint\n();      |\n}                                       |\n\n\n\n\nCreate named type                       | Asm x86-64 (same as `return 42`)\n----------------------------------------|-----------------------------------------\nauto my_int = []{};                     | mov $0x2a,%eax\n                                        | retq\nstruct c {                              |\n    BOOST_DI_INJECT(c                   |\n        , (named = my_int) int i)       |\n        : i(i)                          |\n    { }                                 |\n                                        |\n    int i = 0;                          |\n};                                      |\n                                        |\nint main() {                            |\n  auto injector = di::make_injector(    |\n    di::bind\nint\n.named(my_int).to(42)  |\n  );                                    |\n                                        |\n  return injector.create\nc\n().i;        |\n}                                       |\n\n\n\n\nCreate bound interface                  | Asm x86-64 (same as `make_unique`)\n----------------------------------------|-----------------------------------------\nint main() {                            | push   %rax\n    auto injector = di::make_injector(  | mov    $0x8,%edi\n        di::bind\ni1\n.to\nimpl1\n()        | callq  0x4007b0 \n_Znwm@plt\n\n    );                                  | movq   $0x400a30,(%rax)\n                                        | mov    $0x8,%esi\n    auto ptr = injector.create\n         | mov    %rax,%rdi\n        unique_ptr\ni1\n                  | callq  0x400960 \n_ZdlPvm\n\n    \n();                                | mov    $0x1,%eax\n                                        | pop    %rdx\n    return ptr.get() != nullptr;        | retq\n}                                       |\n\n\n\n\nCreate bound interface via module       | Asm x86-64 (same as `make_unique`)\n----------------------------------------|-----------------------------------------\nstruct module {                         | push   %rax\n    auto configure() const noexcept {   | mov    $0x8,%edi\n        return di::make_injector(       | callq  0x4007b0 \n_Znwm@plt\n\n            di::bind\ni1\n.to\nimpl1\n()    | movq   $0x400a10,(%rax)\n        );                              | mov    $0x8,%esi\n    }                                   | mov    %rax,%rdi\n};                                      | callq  0x400960 \n_ZdlPvm\n\n                                        | mov    $0x1,%eax\nint main() {                            | pop    %rdx\n    auto injector = di::make_injector(  | retq\n        module{}                        |\n    );                                  |\n                                        |\n    auto ptr = injector.create\n         |\n        unique_ptr\ni1\n                  |\n    \n();                                |\n                                        |\n    return ptr != nullptr;              |\n}                                       |\n\n\n\n\nCreate bound interface via exposed      | Asm x86-64\nmodule                                  | cost = type erasure\n----------------------------------------|----------------------------------------------------------------------\nstruct module {                         | push   %r14\n    di::injector\ni1\n configure() const {| push   %rbx\n        return di::make_injector(       | push   %rax\n            di::bind\ni1\n.to\nimpl1\n()    | mov    %rdi,%r14\n        );                              | mov    $0x20,%edi\n    }                                   | callq  0x400aa0 \n_Znwm@plt\n\n};                                      | mov    %rax,%rbx\n                                        | mov    $0x400ea0,%eax\nint main() {                            | movq   %rax,%xmm0\n    auto injector = di::make_injector(  | movups %xmm0,(%rbx)\n        module{}                        | movq   $0x400ec0,0x10(%rbx)\n    );                                  | mov    $0x8,%edi\n                                        | callq  0x400aa0 \n_Znwm@plt\n\n    auto ptr = injector.create\n         | movq   $0x400fc8,(%rax)\n        unique_ptr\ni1\n                  | mov    %rax,(%r14)\n    \n();                                | mov    0x10(%rbx),%rax\n                                        | mov    %rbx,%rdi\n    return ptr != nullptr;              | callq  *%rax\n}                                       | mov    %rbx,%rdi\n                                        | callq  0x400a10 \n_ZdlPv@plt\n\n                                        | mov    %r14,%rax\n                                        | add    $0x8,%rsp\n                                        | pop    %rbx\n                                        | pop    %r14\n                                        | retq\n                                        | mov    %rax,%rdi\n                                        | callq  0x400e90 \n__clang_call_terminate\n\n                                        | mov    %rax,%rdi\n                                        | callq  0x400e90 \n__clang_call_terminate\n\n                                        | mov    %rax,%rdi\n                                        | callq  0x400e90 \n__clang_call_terminate\n\n\n\n\n\n*\n\n\n\n\n\n\nCompile-time performance\n | \nExample\n\n* Environment\n    * x86_64 Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz GenuineIntel GNU/Linux\n    * clang++3.4 -O2\n\n\n\n\nBoost.DI header                         | Time [s]\n----------------------------------------|-----------------------------------------\n#include \nboost/di.hpp\n                 | 0.050\nint main() { }                          |\n\n\n\n\nLegend:\n    ctor    = raw constructor: c(int i, double d);\n    inject  = inject constructor: BOOST_DI_INJECT(c, int i, double d);\n    all     = all types exposed from module: auto configure();\n    exposed = one type exposed from module: di::injector\nc\n configure();\n\n\n\n\n\n\n* 4248897537 instances created\n* 132 different types\n* 10 modules\n\n\n\n\n\n\n\n\n* 1862039751439806464 instances created\n* 200 different types\n* 10 modules\n\n\n\n\n\n\n\n\n* 5874638529236910091 instances created\n* 310 different types\n* 100 different interfaces\n* 10 modules\n\n\n\n\nError messages\n\n\n\n\n\n\nDiagnostic messages\n\n\n\n\nCreate interface without bound          | Error message\nimplementation                          |\n----------------------------------------|[clang]--------------------------------------\nauto injector = di::make_injector();    | warning: 'create' is deprecated: creatable constraint not satisfied\ninjector.create\ni*\n();                  |     injector.create\ni*\n();\n                                        |              ^\n                                        | note: 'create\ni *, 0\n' has been explicitly marked deprecated here\n                                        |     T create() const {\n                                        |       ^\n                                        | error: inline function 'boost::di::abstract_type\ni\n::is_not_bound::error' is not defined\n                                        |     error(_ = \ntype not bound, did you forget to add: 'di::bind\ninterface\n.to\nimplementation\n()'?\n)\n                                        |     ^\n                                        | note: used here\n                                        |     constraint_not_satisfied{}.error();\n                                        |\n                                        |[gcc]----------------------------------------\n                                        | error: inline function \u2018constexpr T* boost::di::abstract_type\nT\n::is_not_bound::error(boost::di::_) const [with T = i]\u2019 used but never defined\n                                        |      error(_ = \ntype not bound, did you forget to add: 'di::bind\ninterface\n.to\nimplementation\n()'?\n)\n                                        |      ^\n                                        | error: call to \u2018boost::di::core::injector\nboost::di::config\n::create\ni*, 0\n\u2019 declared with attribute error: creatable constraint not satisfied\n                                        |      injector.create\ni*\n();\n\n\n\n\nAmbiguous binding                       | Error message\n----------------------------------------|-----------------------------------------\nauto injector = di::make_injector(      | error: base class 'pair\nint, no_name\n'\n    di::bind\nint\n.to(42)                | specified more than once as a direct\n  , di::bind\nint\n.to(87)                | base class\n);                                      |\n                                        |\ninjector.create\nint\n();                 |\n\n\n\n\nCreate not bound object with all bound  | Error message\npolicy                                  |\n----------------------------------------|-----------------------------------------\nclass all_bound : public di::config {   | error: static_assert failed\npublic:                                 | \nType T is not allowed\n\n  auto policies() const noexcept {      |\n    return di::make_policies(           |\n      constructible(is_bound\n_\n{})      |\n    );                                  |\n  }                                     |\n};                                      |\n                                        |\nauto injector =                         |\n    di::make_injector\nall_bound\n();     |\n                                        |\ninjector.create\nint\n();                 |\n\n\n\n\nWrong annotation                        | Error message\n(NAMED instead of named)                |\n----------------------------------------|-----------------------------------------\nauto name = []{};                       | error: use of undeclared identifier\n                                        | 'named'\nstruct c {                              |\n    BOOST_DI_INJECT(c                   |\n        , (NAMED = name) int) { }       |\n};                                      |\n                                        |\ndi::make_injector().create\nc\n();        |\n\n\n\n\n*\n\n\nNot configurable", 
            "title": "Overview"
        }, 
        {
            "location": "/overview/index.html#quick-start", 
            "text": "Get  boost/di.hpp  header   wget https://raw.githubusercontent.com/boost-experimental/di/master/include/boost/di.hpp   Include the header and define  msm  namespace alias   #include  boost/di.hpp \nnamespace di = boost::di;   Compile with C++14 support   $CXX -std=c++14 ...   To run tests   git clone https://github.com/boost-experimental/di   cd di   make test", 
            "title": "Quick Start"
        }, 
        {
            "location": "/overview/index.html#dependencies", 
            "text": "No external dependencies are required (neither STL nor Boost)", 
            "title": "Dependencies"
        }, 
        {
            "location": "/overview/index.html#supportedtested-compilers", 
            "text": "Clang-3.4+  GCC-5.2+", 
            "title": "Supported/tested compilers"
        }, 
        {
            "location": "/overview/index.html#configuration", 
            "text": "Macro  Description      BOOST_DI_VERSION  Current version of Boost.DI (ex. 1'0'0)    BOOST_DI_CFG  Global configuration allows to customize provider and policies    BOOST_DI_CFG_DIAGNOSTICS_LEVEL  Global configuration allows to customize provider and policies    BOOST_DI_CFG_CTOR_LIMIT_SIZE  Limits number of allowed consturctor parameters [0-10, default=10]    BOOST_DI_NAMESPACE_BEGIN  Limits number of allowed consturctor parameters [0-10, default=10]    BOOST_DI_NAMESPACE_END  Limits number of allowed consturctor parameters [0-10, default=10]", 
            "title": "Configuration"
        }, 
        {
            "location": "/overview/index.html#other-libraries", 
            "text": "", 
            "title": "Other Libraries"
        }, 
        {
            "location": "/overview/index.html#performance", 
            "text": "Run-time performance (-O2) \n* Environment\n    * x86_64 Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz GenuineIntel GNU/Linux\n    * clang++3.4 -O2 /  gdb -batch -ex 'file ./a.out' -ex 'disassemble main'   Create type wihtout bindings            | Asm x86-64 (same as `return 0`)\n----------------------------------------|-----------------------------------------\nint main() {                            | xor %eax,%eax\n    auto injector = di::make_injector();| retq\n    return injector.create int ();      |\n}                                       |  Create type with bound instance         | Asm x86-64 (same as `return 42`)\n----------------------------------------|-----------------------------------------\nint main() {                            | mov $0x2a,%eax\n    auto injector = di::make_injector(  | retq\n        di::bind int .to(42)            |\n    );                                  |\n                                        |\n    return injector.create int ();      |\n}                                       |  Create named type                       | Asm x86-64 (same as `return 42`)\n----------------------------------------|-----------------------------------------\nauto my_int = []{};                     | mov $0x2a,%eax\n                                        | retq\nstruct c {                              |\n    BOOST_DI_INJECT(c                   |\n        , (named = my_int) int i)       |\n        : i(i)                          |\n    { }                                 |\n                                        |\n    int i = 0;                          |\n};                                      |\n                                        |\nint main() {                            |\n  auto injector = di::make_injector(    |\n    di::bind int .named(my_int).to(42)  |\n  );                                    |\n                                        |\n  return injector.create c ().i;        |\n}                                       |  Create bound interface                  | Asm x86-64 (same as `make_unique`)\n----------------------------------------|-----------------------------------------\nint main() {                            | push   %rax\n    auto injector = di::make_injector(  | mov    $0x8,%edi\n        di::bind i1 .to impl1 ()        | callq  0x4007b0  _Znwm@plt \n    );                                  | movq   $0x400a30,(%rax)\n                                        | mov    $0x8,%esi\n    auto ptr = injector.create          | mov    %rax,%rdi\n        unique_ptr i1                   | callq  0x400960  _ZdlPvm \n     ();                                | mov    $0x1,%eax\n                                        | pop    %rdx\n    return ptr.get() != nullptr;        | retq\n}                                       |  Create bound interface via module       | Asm x86-64 (same as `make_unique`)\n----------------------------------------|-----------------------------------------\nstruct module {                         | push   %rax\n    auto configure() const noexcept {   | mov    $0x8,%edi\n        return di::make_injector(       | callq  0x4007b0  _Znwm@plt \n            di::bind i1 .to impl1 ()    | movq   $0x400a10,(%rax)\n        );                              | mov    $0x8,%esi\n    }                                   | mov    %rax,%rdi\n};                                      | callq  0x400960  _ZdlPvm \n                                        | mov    $0x1,%eax\nint main() {                            | pop    %rdx\n    auto injector = di::make_injector(  | retq\n        module{}                        |\n    );                                  |\n                                        |\n    auto ptr = injector.create          |\n        unique_ptr i1                   |\n     ();                                |\n                                        |\n    return ptr != nullptr;              |\n}                                       |  Create bound interface via exposed      | Asm x86-64\nmodule                                  | cost = type erasure\n----------------------------------------|----------------------------------------------------------------------\nstruct module {                         | push   %r14\n    di::injector i1  configure() const {| push   %rbx\n        return di::make_injector(       | push   %rax\n            di::bind i1 .to impl1 ()    | mov    %rdi,%r14\n        );                              | mov    $0x20,%edi\n    }                                   | callq  0x400aa0  _Znwm@plt \n};                                      | mov    %rax,%rbx\n                                        | mov    $0x400ea0,%eax\nint main() {                            | movq   %rax,%xmm0\n    auto injector = di::make_injector(  | movups %xmm0,(%rbx)\n        module{}                        | movq   $0x400ec0,0x10(%rbx)\n    );                                  | mov    $0x8,%edi\n                                        | callq  0x400aa0  _Znwm@plt \n    auto ptr = injector.create          | movq   $0x400fc8,(%rax)\n        unique_ptr i1                   | mov    %rax,(%r14)\n     ();                                | mov    0x10(%rbx),%rax\n                                        | mov    %rbx,%rdi\n    return ptr != nullptr;              | callq  *%rax\n}                                       | mov    %rbx,%rdi\n                                        | callq  0x400a10  _ZdlPv@plt \n                                        | mov    %r14,%rax\n                                        | add    $0x8,%rsp\n                                        | pop    %rbx\n                                        | pop    %r14\n                                        | retq\n                                        | mov    %rax,%rdi\n                                        | callq  0x400e90  __clang_call_terminate \n                                        | mov    %rax,%rdi\n                                        | callq  0x400e90  __clang_call_terminate \n                                        | mov    %rax,%rdi\n                                        | callq  0x400e90  __clang_call_terminate   *    Compile-time performance  |  Example \n* Environment\n    * x86_64 Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz GenuineIntel GNU/Linux\n    * clang++3.4 -O2   Boost.DI header                         | Time [s]\n----------------------------------------|-----------------------------------------\n#include  boost/di.hpp                  | 0.050\nint main() { }                          |  Legend:\n    ctor    = raw constructor: c(int i, double d);\n    inject  = inject constructor: BOOST_DI_INJECT(c, int i, double d);\n    all     = all types exposed from module: auto configure();\n    exposed = one type exposed from module: di::injector c  configure();   * 4248897537 instances created\n* 132 different types\n* 10 modules    * 1862039751439806464 instances created\n* 200 different types\n* 10 modules    * 5874638529236910091 instances created\n* 310 different types\n* 100 different interfaces\n* 10 modules", 
            "title": "Performance"
        }, 
        {
            "location": "/overview/index.html#error-messages", 
            "text": "Diagnostic messages   Create interface without bound          | Error message\nimplementation                          |\n----------------------------------------|[clang]--------------------------------------\nauto injector = di::make_injector();    | warning: 'create' is deprecated: creatable constraint not satisfied\ninjector.create i* ();                  |     injector.create i* ();\n                                        |              ^\n                                        | note: 'create i *, 0 ' has been explicitly marked deprecated here\n                                        |     T create() const {\n                                        |       ^\n                                        | error: inline function 'boost::di::abstract_type i ::is_not_bound::error' is not defined\n                                        |     error(_ =  type not bound, did you forget to add: 'di::bind interface .to implementation ()'? )\n                                        |     ^\n                                        | note: used here\n                                        |     constraint_not_satisfied{}.error();\n                                        |\n                                        |[gcc]----------------------------------------\n                                        | error: inline function \u2018constexpr T* boost::di::abstract_type T ::is_not_bound::error(boost::di::_) const [with T = i]\u2019 used but never defined\n                                        |      error(_ =  type not bound, did you forget to add: 'di::bind interface .to implementation ()'? )\n                                        |      ^\n                                        | error: call to \u2018boost::di::core::injector boost::di::config ::create i*, 0 \u2019 declared with attribute error: creatable constraint not satisfied\n                                        |      injector.create i* ();  Ambiguous binding                       | Error message\n----------------------------------------|-----------------------------------------\nauto injector = di::make_injector(      | error: base class 'pair int, no_name '\n    di::bind int .to(42)                | specified more than once as a direct\n  , di::bind int .to(87)                | base class\n);                                      |\n                                        |\ninjector.create int ();                 |  Create not bound object with all bound  | Error message\npolicy                                  |\n----------------------------------------|-----------------------------------------\nclass all_bound : public di::config {   | error: static_assert failed\npublic:                                 |  Type T is not allowed \n  auto policies() const noexcept {      |\n    return di::make_policies(           |\n      constructible(is_bound _ {})      |\n    );                                  |\n  }                                     |\n};                                      |\n                                        |\nauto injector =                         |\n    di::make_injector all_bound ();     |\n                                        |\ninjector.create int ();                 |  Wrong annotation                        | Error message\n(NAMED instead of named)                |\n----------------------------------------|-----------------------------------------\nauto name = []{};                       | error: use of undeclared identifier\n                                        | 'named'\nstruct c {                              |\n    BOOST_DI_INJECT(c                   |\n        , (NAMED = name) int) { }       |\n};                                      |\n                                        |\ndi::make_injector().create c ();        |  *  Not configurable", 
            "title": "Error messages"
        }, 
        {
            "location": "/tutorial/index.html", 
            "text": "All code examples include \nboost/di.hpp\n as well as declare a convienent msm namespace alias.\n\n\n#include \nboost/di.hpp\n\nnamespace di = boost::di;\n\n\n\n\n1. [Basic] Create objects tree\n\n\n2. [Basic] First steps with bindings\n\n\n3. [Basic] Decide the life-times\n\n\n4. [Basic] Annotations to the rescue\n\n\n5. [Basic] Split your configuration\n\n\n6. [Advanced] Dump/Limit your types\n\n\n7. [Advanced] Customize it\n\n\n8. [Advanced] Extend it", 
            "title": "Tutorial"
        }, 
        {
            "location": "/tutorial/index.html#1-basic-create-objects-tree", 
            "text": "", 
            "title": "1. [Basic] Create objects tree"
        }, 
        {
            "location": "/tutorial/index.html#2-basic-first-steps-with-bindings", 
            "text": "", 
            "title": "2. [Basic] First steps with bindings"
        }, 
        {
            "location": "/tutorial/index.html#3-basic-decide-the-life-times", 
            "text": "", 
            "title": "3. [Basic] Decide the life-times"
        }, 
        {
            "location": "/tutorial/index.html#4-basic-annotations-to-the-rescue", 
            "text": "", 
            "title": "4. [Basic] Annotations to the rescue"
        }, 
        {
            "location": "/tutorial/index.html#5-basic-split-your-configuration", 
            "text": "", 
            "title": "5. [Basic] Split your configuration"
        }, 
        {
            "location": "/tutorial/index.html#6-advanced-dumplimit-your-types", 
            "text": "", 
            "title": "6. [Advanced] Dump/Limit your types"
        }, 
        {
            "location": "/tutorial/index.html#7-advanced-customize-it", 
            "text": "", 
            "title": "7. [Advanced] Customize it"
        }, 
        {
            "location": "/tutorial/index.html#8-advanced-extend-it", 
            "text": "", 
            "title": "8. [Advanced] Extend it"
        }, 
        {
            "location": "/cheatsheet/index.html", 
            "text": "Injector\n\n\nRequirements\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndi::make_injector\n(TDeps...)\n\n\ndi::concepts::boundable\n \nTDeps...>\n\n\nCreates \ndi::injector\n\n\n\n\n\n\ndi::make_injector\nTConfig> (TDeps...)\n\n\ndi::concepts::boundable\nTDeps...> \n \ndi::concepts::configurable\nTConfig>\n\n\nCreates \ndi::injector\n with \ndi::config\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBindings\n\n\nRequirements\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndi::bind\nInterface>.to\nImplementation>\n\n\ndi::concepts::boundable\nInterface, Implementation>\n\n\nCreates \ndi::bindings\n\n\n\n\n\n\ndi::bind\nT>.to(value)\n\n\ndi::concepts::boundable\nT, decltype(value)>\n\n\nCreates \ndi::bindings\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInjections\n\n\nRequirements\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstruct Ctor { Ctor(TArgs...); };\n\n\nNone\n\n\n[default] Injects Ctor(TArgs...)\n\n\n\n\n\n\nstruct Ctor { \nBOOST_DI_INJECT\n(Ctor, TArgs...); };\n\n\nNone\n\n\nInjects Ctor(TArgs...)\n\n\n\n\n\n\nstruct Ctor { Ctor(TArgs...); \nBOOST_DI_INJECT_TRAITS\n(Ctor, TArgs...); };\n\n\nNone\n\n\nInjects Ctor(TArgs...)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnnotations\n\n\nRequirements\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstruct Ctor { \nBOOST_DI_INJECT\n(Ctor, (named = name) Type) };\n\n\nis_object(name)\n\n\nInjects Ctor(Type) where \nType\n is named \nname\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nScopes\n\n\nRequirements\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nModules\n\n\nRequirements\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProviders\n\n\nRequirements\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPolicies\n\n\nRequirements\n\n\nDescription", 
            "title": "Cheatsheet"
        }, 
        {
            "location": "/quick_user_guide/index.html", 
            "text": "Injector\n\n\nBindings\n\n\nInjections\n\n\nAnnotations\n\n\nScopes\n\n\nModules\n\n\nProviders\n\n\nPolicies\n\n\n\n\n\n\n\n\nLet's assume all examples below include \nboost/di.hpp\n header and define \ndi\n namespace alias.\n\n\n\n\n#include \nboost/di.hpp\n\nnamespace di = boost::di;\n//\nstruct i1 { virtual ~i1() = default; virtual void dummy1() = 0; };\nstruct i2 { virtual ~i2() = default; virtual void dummy2() = 0; };\nstruct impl1 : i1 { void dummy1() override { } };\nstruct impl2 : i2 { void dummy2() override { } };\nstruct impl : i1, i2 { void dummy1() override { } void dummy2() override { } };\n\n\n\n\n\n\nInjector\n\n\n\n\n\n\n\n\nBindings\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInjections\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnnotations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nScopes\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDeduced scope\n\n\n\n\n\n\n\n\n\n\nT\n\n\nunique\n\n\n\n\n\n\nT\n\n\nsingleton\n\n\n\n\n\n\nconst T\n\n\nunique (temporary)/singleton\n\n\n\n\n\n\nT*\n\n\nunique (ownership transfer)\n\n\n\n\n\n\nconst T*\n\n\nunique (ownership transfer)\n\n\n\n\n\n\nT\n\n\nunique\n\n\n\n\n\n\nunique_ptr\n\n\nunique\n\n\n\n\n\n\nshared_ptr\n\n\nsingleton\n\n\n\n\n\n\nweak_ptr\n\n\nsingleton\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType/Scope\n\n\nunique\n\n\nsingleton\n\n\ninstance\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT\n\n\n\u2714\n\n\n-\n\n\n\u2714\n\n\n\n\n\n\n\n\n\n\nT\n\n\n-\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\n\n\n\n\nconst T\n\n\n\u2714 (temporary)\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\n\n\n\n\nT* (transfer ownership)\n\n\n\u2714\n\n\n-\n\n\n-\n\n\n-\n\n\n\u2714\n\n\n\n\n\n\nconst T*\n\n\n\u2714\n\n\n-\n\n\n\u2714\n\n\n\n\n\n\n\n\n\n\nT\n\n\n\u2714\n\n\n-\n\n\n-\n\n\n\n\n\n\n\n\n\n\nunique_ptr\n\n\n\u2714\n\n\n-\n\n\n\u2714\n\n\n\n\n\n\n\n\n\n\nshared_ptr\n\n\n\u2714\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\n\n\n\n\nweak_ptr\n\n\n-\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nModules\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProviders\n\n\n\n\n\n\n\n\nPolicies", 
            "title": "Quick User Guide"
        }, 
        {
            "location": "/user_guide/index.html", 
            "text": "Injector\n\n\ndi::injector\n\n\ndi::make_injector\n\n\n\n\n\n\nBindings\n\n\ndi::bind\n\n\n\n\n\n\nInjections\n\n\nautomatic (default)\n\n\nBOOST_DI_INJECT\n\n\ndi::ctor_traits\n\n\n\n\n\n\nAnnotations\n\n\n(named = name)\n\n\n\n\n\n\nScopes\n\n\ndi::deduce (default)\n\n\ndi::instance (di::bind\n.to(value))\n\n\ndi::singleton\n\n\ndi::unique\n\n\n\n\n\n\nModules\n\n\nProviders\n\n\ndi::providers::stack_over_heap (default)\n\n\ndi::providers::heap\n\n\n\n\n\n\nPolicies\n\n\ndi::policies::constructible\n\n\n\n\n\n\nConcepts\n\n\ndi::concepts::boundable\n\n\ndi::concepts::callable\n\n\ndi::concepts::configurable\n\n\ndi::concepts::creatable\n\n\ndi::concepts::providable\n\n\ndi::concepts::scopable\n\n\n\n\n\n\nConfiguration\n\n\n\n\n\n\nInjector\n\n\ndi::injector\n\n\n\n\nHeader\n\n\n#include \nboost/di.hpp\n\n\n\n\nDescription\n\n\nInjector is a component used for creating dependencies configuration using bindings and resolve requested types. Boost.DI injector might be composed by mixing bindings, modules and other injectors.\n\n\nSemantics\n\n\ntemplate\nclass... TDeps\n requires boundable\nTDeps...\n\nclass injector {\npublic:\n  using deps; // list of dependencies\n  using config; // configuration\n\n  injector(injector\n) = default;\n  template \nclass... Ts\n // no requirements\n  injector(core::injector\nTs...\n) noexcept;\n  explicit injector(const TDeps\n...) noexcept;\n\n  template\nclass T\n requires creatable\nT\n\n  T create() const;\n\n  template \nclass T\n requires creatable\nT\n\n  operator T() const;\n};\n\n\n\n\n\n\n\n\n\nExpression\n\n\nRequirement\n\n\nDescription\n\n\nReturns\n\n\n\n\n\n\n\n\n\n\nTDeps...\n\n\n[boundable]\nTDeps...>\n\n\n[Bindings] to be used as configuration\n\n\n-\n\n\n\n\n\n\ncreate\nT\n()\n\n\n[creatable]\nT>\n\n\nCreates type \nT\n\n\nT\n\n\n\n\n\n\noperator T()\n\n\n[creatable]\nT>\n\n\nCreates type \nT\n\n\nT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType \nT\n\n\nIs allowed?\n\n\nNote\n\n\n\n\n\n\n\n\n\n\nT\n\n\n\u2714\n\n\n-\n\n\n\n\n\n\nT*\n\n\n\u2714\n\n\nOwnerhsip transfer!\n\n\n\n\n\n\nconst T*\n\n\n\u2714\n\n\nOwnerhsip transfer!\n\n\n\n\n\n\nT\n\n\n\u2714\n\n\n-\n\n\n\n\n\n\nconst T\n\n\n\u2714\n\n\n-\n\n\n\n\n\n\nT\n\n\n\u2714\n\n\n-\n\n\n\n\n\n\nstd::unique_ptr\nT\n\n\n\u2714\n\n\n-\n\n\n\n\n\n\nstd::shared_ptr\nT\n\n\n\u2714\n\n\n-\n\n\n\n\n\n\nstd::weak_ptr\nT\n\n\n\u2714\n\n\n-\n\n\n\n\n\n\nboost_shared_ptr\nT\n\n\n\u2714\n\n\n-\n\n\n\n\n\n\n\n\nTest\n\n\n\n\nExample\n\n\n\n\n\n\n\n\ndi::make_injector\n\n\n\n\nHeader\n\n\n#include \nboost/di.hpp\n\n\n\n\nDescription\n\n\nCreates [injector] type.\n\n\nSemantics\n\n\ntemplate\n\n  class TConfig = di::config\n, class... TBindings\n\n requires boundable\nTBindings...\n \n configurable\nTConfig\n\nauto make_injector(const TBindings\n...) noexcept;\n\n\n\n\n\n\n\n\n\nExpression\n\n\nRequirement\n\n\nDescription\n\n\nReturns\n\n\n\n\n\n\n\n\n\n\nTConfig\n\n\n[configurable]\nTConfig>\n\n\n[Configuration]\n\n\n-\n\n\n\n\n\n\nmake_injector(const TBindings\n...)\n\n\n[boundable]\nTBindings...>\n\n\nCreates [injector] with given [Bindings]\n\n\n[injector]\n\n\n\n\n\n\n\n\nTest\n\n\n\n\nExample\n\n\n\n\n\n\n\n\nBindings\n\n\nBindings define dependencies configuration which basically means what types will be created\nand what values will be passed into them.\n\n\ndi::bind\n\n\n\n\nHeader\n\n\n#include \nboost/di.hpp\n\n\n\n\nDescription\n\n\nAllows to bind interface to implementation and associate value with it.\n\n\nSemantics\n\n\nstruct override; // overrides given configuration\n\nnamespace detail {\n  template\nclass... Ts\n requires boundable\nTs...\n\n  struct bind {\n    bind(bind\n) noexcept = default;\n\n    template\nclass T\n requires boundable\nT\n\n    auto to() noexcept;\n\n    template\nclass T\n requires boundable\nT\n\n    auto to(T\n) noexcept;\n\n    template\nclass TScope\n requires scopable\nTScope\n\n    auto in(const TScope\n = di::deduce) noexcept;\n\n    template\nclass TName\n // no requirements\n    auto named(const TName\n = {}) noexcept;\n\n    auto operator[](const override\n) noexcept;\n  };\n} // detail\n\ntemplate\nclass... Ts\n requires boundable\nTs...\n\ndetail::bind\nTs...\n bind{};\n\n\n\n\n\n\n\n\n\nExpression\n\n\nRequirement\n\n\nDescription\n\n\nReturns\n\n\n\n\n\n\n\n\n\n\nTs...\n\n\n[boundable]\nTs...>\n\n\n'Interface' types\n\n\n-\n\n\n\n\n\n\nto\nT\\\n\n\n[boundable]\nT>\n\n\nBinds \nTs...\n to \nT\n type\n\n\n[boundable]\n\n\n\n\n\n\nto(T\n)\n\n\n[boundable]\nT>\n\n\nBinds \nTs...\n to \nT\n object\n\n\n[boundable]\n\n\n\n\n\n\nin(const TScope\n)\n\n\n[scopable]\nTScope>\n\n\nBinds \nTs...\n into \nTScope\n\n\n[boundable]\n\n\n\n\n\n\nnamed(const TName\n)\n\n\n-\n\n\nBinds \nTs...\n using 'Named' annotation\n\n\n[boundable]\n\n\n\n\n\n\noperator[](const override\n)\n\n\n-\n\n\nOverrides given binding\n\n\n[boundable]\n\n\n\n\n\n\n\n\nTest\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n\n\nInjections\n\n\nConstructor Injection\n is the most powerful of available injections.\nIt guarantees initialized state of data members. Boost.DI constructor injection is achieved without any additional work from the user.\n\n\nautomatic (default)\n\n\n\n\nHeader\n\n\n#include \nboost/di.hpp\n\n\n\n\nDescription\n\n\nBoost.DI will deduce the best available constructor to be used for injection - unique constructor with the longest parameter list.\nIf the default behavior should be changed constructor has to be explicitly marked with [BOOST_DI_INJECT] or [BOOST_DI_INJECT_TRAITS].\n\n\n\n\n Note\n\nAutomatic constructor parameters deduction is limited to [BOOST_DI_CFG_CTOR_LIMIT_SIZE], which by default is set to 10.\n\n\n\n\nSemantics\n\n\nclass constructor {\npublic:\n  constructor(auto parameter1, auto parameter2, ..., auto parameterN);\n};\n\n\n\n\n\n\n\n\n\nExpression\n\n\nRequirement\n\n\nDescription\n\n\nReturns\n\n\n\n\n\n\n\n\n\n\nparameter1-parameterN\n\n\n-\n\n\nN\n constructor parameter\n\n\n-\n\n\n\n\n\n\n\n\n\n\n Note\n\nBoost.DI is not able to distinguish between ambiguous constructors with the same (longest) amount of parameters.\n\n\n\n\nTest\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n\n\n\n\n\n\nBOOST_DI_INJECT\n\n\n\n\nHeader\n\n\n#include \nboost/di.hpp\n\n\n\n\nDescription\n\n\nBOOST_DI_INJECT is a macro definition used to explicitly say Boost.DI which constructor should be used as well as in order to annotate types - see [annotations] for further reding.\nWhen class has more than one constructor Boost.DI will by default choose the one with the longest parameter list.\nIn case of constructors ambiguity Boost.DI is not able to choose the best one.\nThen BOOST_DI_INJECT become handy to point which constructor should be used.\n\n\nSemantics\n\n\nstruct T {\n    BOOST_DI_INJECT(T, ...) { }\n};\n\n\n\n\n\n\n\n\n\nExpression\n\n\nRequirement\n\n\nDescription\n\n\nReturns\n\n\n\n\n\n\n\n\n\n\nT\n\n\n-\n\n\nClass type\n\n\n-\n\n\n\n\n\n\n...\n\n\n-\n\n\nT\n constructor parameters\n\n\n-\n\n\n\n\n\n\n\n\n\n\n Note\n\nBOOST_DI_INJECT constructor parameters is limited to [BOOST_DI_CFG_CTOR_LIMIT_SIZE, which by defaults is set to 10.\n\n\n\n\nTest\n\n\n\n\nExample\n\n\n\n\n\n\n\n\nBOOST_DI_INJECT_TRAITS\n\n\n\n\nHeader\n\n\n#include \nboost/di.hpp\n\n\n\n\nDescription\n\n\nBOOST_DI_INJECT_TRAITS is a macro definition used to define constructor traits.\n\n\nSemantics\n\n\nstruct T {\n  BOOST_DI_INJECT_TRAITS(...) { }\n  T(...) { }\n};\n\n\n\n\n\n\n\n\n\nExpression\n\n\nRequirement\n\n\nDescription\n\n\nReturns\n\n\n\n\n\n\n\n\n\n\n...\n\n\n-\n\n\nT\n constructor parameters\n\n\n-\n\n\n\n\n\n\n\n\n\n\n Note\n\nBOOST_DI_INJECT_TRAITS constructor parameters is limited to [BOOST_DI_CFG_CTOR_LIMIT_SIZE, which by defaults is set to 10.\n\n\n\n\nTest\n\n\n\n\n\n\nExample\n\n\n\n\n\n\n\n\ndi::inject\n\n\n\n\nHeader\n\n\n#include \nboost/di.hpp\n\n\n\n\nDescription\n\n\ndi::inject informs Boost.DI about constructor parameters. Useful for generated/generic classes as it doesn't have constructor parameters size limitations.\n\n\nSemantics\n\n\nstruct T {\n  using boost_di_inject__ = di::inject\n...\n;\n  T(...) {}\n};\n\n\n\n\n\n\n\n\n\nExpression\n\n\nRequirement\n\n\nDescription\n\n\nReturns\n\n\n\n\n\n\n\n\n\n\n...\n\n\n-\n\n\nT\n constructor parameters\n\n\n-\n\n\n\n\n\n\n\n\n\n\n Note\n\ndi::inject has no limitations if it comes to constructor parameters, however, named parameters are not allowed.\n\n\n\n\nTest\n\n\n\n\n\n\nExample\n\n\n\n\n\n\n\n\ndi::ctor_traits\n\n\n\n\nHeader\n\n\n#include \nboost/di.hpp\n\n\n\n\nDescription\n\n\nSemantics\n\n\nTest\n\n\n\n\nExample\n\n\n\n\n\n\n\n\nAnnotations\n\n\nAnnotations are intrusive, additional informations specified along with the type in order to refer to given type by the\nannotation instead of type it self. Useful, when there are more than one type of the same parameters in constructor parameters.\n\n\n(named = name)\n\n\n\n\nHeader\n\n\n#include \nboost/di.hpp\n\n\n\n\nDescription\n\n\nNamed parameters are useful when constructor has more parameters of the same type.\n\n\n  T(int value1, int value2);\n\n\n\n\nIn order to inject proper values into \nvalue1\n and \nvalue2\n they have to be distinguished somehow.\nBoost.DI solution for that problem are annotations.\n\n\n\n\n Note\n\nAnnotations might be set only when constructor is selected using BOOST_DI_INJECT or BOOST_DI_INJECT_TRAITS.\n\n\n\n\nSemantics\n\n\nauto Name = []{}; // just an object\n\nstruct T {\n  BOOST_DI_INJECT(T, (named = Name) type type_name [= default_value], ...);\n};\n\n\n\n\n\n\n\n\n\nExpression\n\n\nRequirement\n\n\nDescription\n\n\nReturns\n\n\n\n\n\n\n\n\n\n\nName\n\n\n-\n\n\nObject representing named type\n\n\n-\n\n\n\n\n\n\n\n\nExample\n\n\nBOOST_DI_INJECT(T, (named = value_1) int value1, (named = value_2) int value2);\n\n\n\n\n\n Note\n\nImplementation of constructor doesn't require annotations, which means implementation won't be affected by annotations.\n\n\n\n\nTest\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n\n\n\n\n\n\nScopes\n\n\nHeader\n\n\n#include \nboost/di.hpp\n\n\n\n\nDescription\n\n\nScopes are responsible for creating and maintaining life time of dependencies.\nIf no scope will be given, deduce scope will be assumed.\n\n\nSemantics\n\n\ntemplate \nclass TExpected, class TGiven\n\nstruct scope {\n  template \nclass T\n\n  using is_referable;\n\n  template \nclass T, class TName, class TProvider\n\n  static auto try_create(const TProvider\n);\n\n  template \nclass T, class TName, class TProvider\n\n  auto create(const TProvider\n);\n};\n\n\n\n\n\n\n\n\n\nExpression\n\n\nRequirement\n\n\nDescription\n\n\nReturns\n\n\n\n\n\n\n\n\n\n\nTExpected\n\n\n-\n\n\n'Interface' type\n\n\n-\n\n\n\n\n\n\nTGiven\n\n\n-\n\n\n'Implementation' type\n\n\n-\n\n\n\n\n\n\nis_referable\nT\\\n\n\n-\n\n\nVerifies whether scope value might be converted to a reference\n\n\nstd::true_type/std::false_type\n\n\n\n\n\n\ntry_create\nT, TName, TProvider\\\n\n\nprovidable\nTProvider>\n\n\nVerifies whether type might be created\n\n\nstd::true_type/std::false_type\n\n\n\n\n\n\ncreate\nT, TName, TProvider\\\n\n\nprovidable\nTProvider>\n\n\nCreates type might be created\n\n\nT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType/Scope\n\n\nunique\n\n\nsingleton\n\n\ninstance\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT\n\n\n\u2714\n\n\n-\n\n\n\u2714\n\n\n\n\n\n\n\n\n\n\nT\n\n\n-\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\n\n\n\n\nconst T\n\n\n\u2714 (temporary)\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\n\n\n\n\nT* (transfer ownership)\n\n\n\u2714\n\n\n-\n\n\n-\n\n\n-\n\n\n\u2714\n\n\n\n\n\n\nconst T*\n\n\n\u2714\n\n\n-\n\n\n\u2714\n\n\n\n\n\n\n\n\n\n\nT\n\n\n\u2714\n\n\n-\n\n\n-\n\n\n\n\n\n\n\n\n\n\nunique_ptr\n\n\n\u2714\n\n\n-\n\n\n\u2714\n\n\n\n\n\n\n\n\n\n\nshared_ptr\n\n\n\u2714\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\n\n\n\n\nweak_ptr\n\n\n-\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\n\n\n\n\n\n\nTest\n\n\n\n\nExample\n\n\n\n\n\n\n\n\ndi::deduce (default)\n\n\n\n\nHeader\n\n\n#include \nboost/di.hpp\n\n\n\n\nDescription\n\n\nDefault scope which will be converted to one of the scopes depending on the type.\n\n\n\n\n\n\n\n\nType\n\n\nDeduced scope\n\n\n\n\n\n\n\n\n\n\nT\n\n\nunique\n\n\n\n\n\n\nT\n\n\nsingleton\n\n\n\n\n\n\nconst T\n\n\nunique (temporary)/singleton\n\n\n\n\n\n\nT*\n\n\nunique (ownership transfer)\n\n\n\n\n\n\nconst T*\n\n\nunique (ownership transfer)\n\n\n\n\n\n\nT\n\n\nunique\n\n\n\n\n\n\nunique_ptr\n\n\nunique\n\n\n\n\n\n\nshared_ptr\n\n\nsingleton\n\n\n\n\n\n\nweak_ptr\n\n\nsingleton\n\n\n\n\n\n\n\n\nSemantics\n\n\nnamespace scopes {\n  struct deduce {\n    template \nclass TExpected, class TGiven\n\n    struct scope {\n      template \nclass T\n\n      using is_referable;\n\n      template \nclass T, class TName, class TProvider\n\n      static auto try_create(const TProvider\n);\n\n      template \nclass T, class TName, class TProvider\n\n      auto create(const TProvider\n);\n    };\n  };\n}\n\nscopes::deduce deduce;\n\n\n\n\n\n\n\n\n\nExpression\n\n\nRequirement\n\n\nDescription\n\n\nReturns\n\n\n\n\n\n\n\n\n\n\nTExpected\n\n\n-\n\n\n'Interface' type\n\n\n-\n\n\n\n\n\n\nTGiven\n\n\n-\n\n\n'Implementation' type\n\n\n-\n\n\n\n\n\n\nis_referable\nT\\\n\n\n-\n\n\nVerifies whether scope value might be converted to a reference\n\n\nstd::true_type/std::false_type\n\n\n\n\n\n\ntry_create\nT, TName, TProvider\\\n\n\nprovidable\nTProvider>\n\n\nVerifies whether type might be created\n\n\nstd::true_type/std::false_type\n\n\n\n\n\n\ncreate\nT, TName, TProvider\\\n\n\nprovidable\nTProvider>\n\n\nCreates type might be created\n\n\nT\n\n\n\n\n\n\n\n\nTest\n\n\n\n\nExample\n\n\n\n\n\n\n\n\ndi::instance (di::bind\n.to(value))\n\n\n\n\nHeader\n\n\n#include \nboost/di.hpp\n\n\n\n\nDescription\n\n\nScope representing values - passed by user. The life time of the object depends on the user.\nBoost.DI is not managing life time of passed objects, however values and strings will be copied and managed by the library.\n\n\n\n\n\n\n\n\nType\n\n\n\n\n\n\n\n\n\n\nT\n\n\n\n\n\n\nT\n\n\n\n\n\n\nconst T\n\n\n\n\n\n\nT* (transfer ownership)\n\n\n\n\n\n\nconst T*\n\n\n\n\n\n\nT\n\n\n\n\n\n\nunique_ptr\n\n\n\n\n\n\nshared_ptr\n\n\n\n\n\n\nweak_ptr\n\n\n\n\n\n\n\n\nSemantics\n\n\nnamespace scopes {\n  struct instance {\n    template \nclass TExpected, class TGiven\n\n    struct scope {\n      template \nclass T\n\n      using is_referable;\n\n      template \nclass T, class TName, class TProvider\n\n      static auto try_create(const TProvider\n);\n\n      template \nclass T, class TName, class TProvider\n\n      auto create(const TProvider\n);\n    };\n  };\n}\n\n\n\n\n\n\n\n\n\nExpression\n\n\nRequirement\n\n\nDescription\n\n\nReturns\n\n\n\n\n\n\n\n\n\n\nTExpected\n\n\n-\n\n\n'Interface' type\n\n\n-\n\n\n\n\n\n\nTGiven\n\n\n-\n\n\n'Implementation' type\n\n\n-\n\n\n\n\n\n\nis_referable\nT\\\n\n\n-\n\n\nVerifies whether scope value might be converted to a reference\n\n\nstd::true_type/std::false_type\n\n\n\n\n\n\ntry_create\nT, TName, TProvider\\\n\n\nprovidable\nTProvider>\n\n\nVerifies whether type might be created\n\n\nstd::true_type/std::false_type\n\n\n\n\n\n\ncreate\nT, TName, TProvider\\\n\n\nprovidable\nTProvider>\n\n\nCreates type might be created\n\n\nT\n\n\n\n\n\n\n\n\nTest\n\n\n\n\nExample\n\n\n\n\n\n\n\n\ndi::singleton\n\n\n\n\nHeader\n\n\n#include \nboost/di.hpp\n\n\n\n\nDescription\n\n\nScope representing shared value between all instances and between threads.\nSingleton scope will be deduced in case of shared_ptr or weak_ptr.\n\n\n\n\n Note\n\nSingleton scope will convert between std::shared_ptr and boost::shared_ptr if required.\n\n\n\n\n\n\n\n\n\n\nType\n\n\n\n\n\n\n\n\n\n\nT\n\n\n\n\n\n\nT\n\n\n\n\n\n\nconst T\n\n\n\n\n\n\nT* (transfer ownership)\n\n\n\n\n\n\nconst T*\n\n\n\n\n\n\nT\n\n\n\n\n\n\nunique_ptr\n\n\n\n\n\n\nshared_ptr\n\n\n\n\n\n\nweak_ptr\n\n\n\n\n\n\n\n\nSemantics\n\n\nnamespace scopes {\n  struct singleton {\n    template \nclass TExpected, class TGiven\n\n    struct scope {\n      template \nclass T\n\n      using is_referable;\n\n      template \nclass T, class TName, class TProvider\n\n      static auto try_create(const TProvider\n);\n\n      template \nclass T, class TName, class TProvider\n\n      auto create(const TProvider\n);\n    };\n  };\n}\n\nscopes::singleton singleton;\n\n\n\n\n\n\n\n\n\nExpression\n\n\nRequirement\n\n\nDescription\n\n\nReturns\n\n\n\n\n\n\n\n\n\n\nTExpected\n\n\n-\n\n\n'Interface' type\n\n\n-\n\n\n\n\n\n\nTGiven\n\n\n-\n\n\n'Implementation' type\n\n\n-\n\n\n\n\n\n\nis_referable\nT\\\n\n\n-\n\n\nVerifies whether scope value might be converted to a reference\n\n\nstd::true_type/std::false_type\n\n\n\n\n\n\ntry_create\nT, TName, TProvider\\\n\n\nprovidable\nTProvider>\n\n\nVerifies whether type might be created\n\n\nstd::true_type/std::false_type\n\n\n\n\n\n\ncreate\nT, TName, TProvider\\\n\n\nprovidable\nTProvider>\n\n\nCreates type might be created\n\n\nT\n\n\n\n\n\n\n\n\nTest\n\n\n\n\nExample\n\n\n\n\n\n\n\n\ndi::unique\n\n\n\n\nHeader\n\n\n#include \nboost/di.hpp\n\n\n\n\nDescription\n\n\nScope representing unique/per request value.\n\n\n\n\n\n\n\n\nType\n\n\n\n\n\n\n\n\n\n\nT\n\n\n\n\n\n\nT\n\n\n\n\n\n\nconst T\n\n\n\n\n\n\nT* (transfer ownership)\n\n\n\n\n\n\nconst T*\n\n\n\n\n\n\nT\n\n\n\n\n\n\nunique_ptr\n\n\n\n\n\n\nshared_ptr\n\n\n\n\n\n\nweak_ptr\n\n\n\n\n\n\n\n\nSemantics\n\n\nnamespace scopes {\n  struct unique {\n    template \nclass TExpected, class TGiven\n\n    struct scope {\n      template \nclass T\n\n      using is_referable;\n\n      template \nclass T, class TName, class TProvider\n\n      static auto try_create(const TProvider\n);\n\n      template \nclass T, class TName, class TProvider\n\n      auto create(const TProvider\n);\n    };\n  };\n}\n\nscopes::unique unique;\n\n\n\n\n\n\n\n\n\nExpression\n\n\nRequirement\n\n\nDescription\n\n\nReturns\n\n\n\n\n\n\n\n\n\n\nTExpected\n\n\n-\n\n\n'Interface' type\n\n\n-\n\n\n\n\n\n\nTGiven\n\n\n-\n\n\n'Implementation' type\n\n\n-\n\n\n\n\n\n\nis_referable\nT\\\n\n\n-\n\n\nVerifies whether scope value might be converted to a reference\n\n\nstd::true_type/std::false_type\n\n\n\n\n\n\ntry_create\nT, TName, TProvider\\\n\n\nprovidable\nTProvider>\n\n\nVerifies whether type might be created\n\n\nstd::true_type/std::false_type\n\n\n\n\n\n\ncreate\nT, TName, TProvider\\\n\n\nprovidable\nTProvider>\n\n\nCreates type might be created\n\n\nT\n\n\n\n\n\n\n\n\nTest\n\n\n\n\nExample\n\n\n\n\n\n\n\n\nModules\n\n\nauto module = [] { return di::make_injector(...); };\n\n\n\n\nHeader\n\n\n#include \nboost/di.hpp\n\n\n\n\nDescription\n\n\nModules allow to split the configuration into smaller injectors.\nModule might be installed by passing it into [make_injector].\n\n\nSemantics\n\n\nauto module = di::make_injector(...);\n\n\n\nTest\n\n\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n\n\n\n\n\n\nProviders\n\n\nHeader\n\n\n#include \nboost/di.hpp\n\n\n\n\nDescription\n\n\nProviders are responsible for creating objects using given configuration.\n\n\nSemantics\n\n\nnamespace type_traits {\n  struct direct; // T(...)\n  struct uniform; // T{...}\n  struct heap; // new T\n  struct stack; // T\n}\n\nnamespace providers {\n  class provider {\n    public:\n      template \nclass T, class... TArgs\n\n      struct is_creatable;\n\n      template \n\n        class T\n      , class TInit // type_traits::direct/type_traits::uniform\n      , class TMemory // type_traits::heap/type_traits::stack\n      , class... TArgs\n      \n auto get(const TInit\n, const TMemory\n, TArgs\n... args) const;\n  };\n}\n\n\n\n\n\n\n\n\n\nExpression\n\n\nRequirement\n\n\nDescription\n\n\nReturns\n\n\n\n\n\n\n\n\n\n\nis_creatable\nT, TArgs...\\\n\n\ncreatable\nTArgs...>\n\n\nVerify whether \nT\n is creatable with \nTArgs...\n\n\nT\n\n\n\n\n\n\nget\nT, TInitialization, TMemory, TArgs\\\n(const TInitialization\n, const TMemory\n, TArgs\n...)\n\n\nTInitialization\n is direct\\\n\n\nuniform \n \nTMemory\n is heap\\\n\n\nstack\n\n\n\n\n\n\n\n\nTest\n\n\n\n\nExample\n\n\n\n\n\n\n\n\ndi::providers::stack_over_heap (default)\n\n\n\n\nHeader\n\n\n#include \nboost/di.hpp\n\n\n\n\nDescription\n\n\nCreates objects on the stack whenever possible, otherwise on the heap.\n\n\nSemantics\n\n\nnamespace providers {\n  class stack_over_heap {\n    public:\n      template \nclass T, class... TArgs\n\n      struct is_creatable;\n\n      template \n\n        class T\n      , class TInit // type_traits::direct/type_traits::uniform\n      , class TMemory // type_traits::heap/type_traits::stack\n      , class... TArgs\n      \n auto get(const TInit\n, const TMemory\n, TArgs\n... args) const;\n  };\n}\n\n\n\n\n\n\n\n\n\nExpression\n\n\nRequirement\n\n\nDescription\n\n\nReturns\n\n\n\n\n\n\n\n\n\n\nis_creatable\nT, TArgs...\\\n\n\ncreatable\nTArgs...>\n\n\nVerify whether \nT\n is creatable with \nTArgs...\n\n\nT\n\n\n\n\n\n\nget\nT, TInitialization, TMemory, TArgs\\\n(const TInitialization\n, const TMemory\n, TArgs\n...)\n\n\nTInitialization\n is direct\\\n\n\nuniform \n \nTMemory\n is heap\\\n\n\nstack\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nTMemory\n\n\n\n\n\n\n\n\n\n\nT\n\n\nstack\n\n\n\n\n\n\nT\n\n\nstack\n\n\n\n\n\n\nconst T\n\n\nstack\n\n\n\n\n\n\nT*\n\n\nstack\n\n\n\n\n\n\nconst T*\n\n\nstack\n\n\n\n\n\n\nT\n\n\nstack\n\n\n\n\n\n\nunique_ptr\n\n\nstack\n\n\n\n\n\n\nshared_ptr\n\n\nstack\n\n\n\n\n\n\nweak_ptr\n\n\nstack\n\n\n\n\n\n\n\n\nTest\n\n\n\n\nExample\n\n\n\n\n\n\n\n\ndi::providers::heap\n\n\n\n\nHeader\n\n\n#include \nboost/di.hpp\n\n\n\n\nDescription\n\n\nBasic provider creates objects on the heap.\n\n\nSemantics\n\n\nnamespace providers {\n  class stack_over_heap {\n    public:\n      template \nclass T, class... TArgs\n\n      struct is_creatable;\n\n      template \n\n        class T\n      , class TInit // type_traits::direct/type_traits::uniform\n      , class TMemory // type_traits::heap/type_traits::stack\n      , class... TArgs\n      \n auto get(const TInit\n, const TMemory\n, TArgs\n... args) const;\n  };\n}\n\n\n\n\n\n\n\n\n\nExpression\n\n\nRequirement\n\n\nDescription\n\n\nReturns\n\n\n\n\n\n\n\n\n\n\nis_creatable\nT, TArgs...\\\n\n\ncreatable\nTArgs...>\n\n\nVerify whether \nT\n is creatable with \nTArgs...\n\n\nT\n\n\n\n\n\n\nget\nT, TInitialization, TMemory, TArgs\\\n(const TInitialization\n, const TMemory\n, TArgs\n...)\n\n\nTInitialization\n is direct\\\n\n\nuniform \n \nTMemory\n is heap\\\n\n\nstack\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nTMemory\n\n\n\n\n\n\n\n\n\n\nT\n\n\nstack\n\n\n\n\n\n\nT\n\n\nstack\n\n\n\n\n\n\nconst T\n\n\nstack\n\n\n\n\n\n\nT*\n\n\nstack\n\n\n\n\n\n\nconst T*\n\n\nstack\n\n\n\n\n\n\nT\n\n\nstack\n\n\n\n\n\n\nunique_ptr\n\n\nstack\n\n\n\n\n\n\nshared_ptr\n\n\nstack\n\n\n\n\n\n\nweak_ptr\n\n\nstack\n\n\n\n\n\n\n\n\nTest\n\n\n\n\nExample\n\n\n\n\n\n\n\n\nPolicies\n\n\nHeader\n\n\n#include \nboost/di.hpp\n\n\n\n\nDescription\n\n\nPolicies operates on dependencies in order to limit allowed behaviour or visit created types during run-time.\nPolicies are set up via [di::config].\n\n\n\n\n Note\n\nBy default Boost.DI has no policies enabled.\n\n\n\n\nSemantics\n\n\ntemplate \n requires callable\n\n  auto make_policies(TPolicies... args) noexcept;\n\n\nstruct config : di::config {\n    static auto policies(...) noexcept { return make_policies(...); }\n  };\n\n\n\n\n\n\n\n\nExpression\n\n\nRequirement\n\n\nDescription\n\n\nReturns\n\n\n\n\n\n\n\n\n\n\nmake_policies\nTPolicies...\\\n\n\n[callable]\nTPolicies...>\n\n\nCreates policies\n\n\n[callable] list\n\n\n\n\n\n\n\n\n\n\n Note\n\nIn order for injector to verify policies they have to be created using di::config and passed via `TConfig` in make_injector or set globally via BOOST_DI_CFG.\n\n\n\n\nTest\n\n\n\n\n\n\nExample\n\n\n\n\n\n\n\n\ndi::policies::constructible\n\n\n\n\nHeader\n\n\n#include \nboost/di.hpp\n\n\n\n\nDescription\n\n\nPolicy limits constructor parameters to explicitly allowed.\n\n\n\n\n Note\n\nBy default constructible policy disables creation of any constructor parameters.\n\n\n\n\nSemantics\n\n\nnamespace policies {\n  struct _ { }; // placeholder\n\n  template\nclass T\n\n  struct is_bound; // true when type is bound with 'di::bind\nT\n'\n\n  template \nclass T\n\n  struct is_injected; // true when type is injected using 'BOOST_DI_INJECT' or is 'fundamental'\n\n  template\nclass T\n\n  auto constructible(const T\n) noexcept;\n}\n\nnamespace operators {\n  template\nclass X\n\n  inline auto operator!(const X\n)\n\n  template\nclass X, class Y\n\n  inline auto operator\n(const X\n, const Y\n);\n\n  template\nclass X, class Y\n\n  inline auto operator||(const X\n, const Y\n);\n}\n\n\n\n\n\n\n\n\n\nExpression\n\n\nRequirement\n\n\nDescription\n\n\nReturns\n\n\n\n\n\n\n\n\n\n\nis_bound\nT\\\n\n\n-\n\n\nVerify whether type \nT\n is bound\n\n\ntrue_type/false_type\n\n\n\n\n\n\nis_injected\nT\\\n\n\n-\n\n\nVerify whether type \nT\n is injected via [BOOST_DI_INJECT]\n\n\ntrue_type/false_type\n\n\n\n\n\n\n\n\n\n\n Note\n\nIn order to allow logic operators using namespace boost::di::policies::operators has to be used\n\n\n\n\nTest\n\n\n\n\n\n\n\n\n Note\n\nSTL type traits are supported and might be combined with Boost.DI traits in order to limit constructor types\nFor example, std::is_same\n<\n_, int>{} || std::is_constructible\n<\n_, int, int>{} || std::is_base_of\n<int\n, _>{}, etc...\n\n\n\n\nExample\n\n\n\n\n\n\n\n\nConcepts\n\n\nConcepts are types constraints which ensure that only given types which are satisfied by the constraint will be allowed.\nIf type doesn't satisfy the concept short and descriptive error message is provided.\n\n\ndi::concepts::boundable\n\n\n\n\nHeader\n\n\n#include \nboost/di.hpp\n\n\n\n\nDescription\n\n\nBindings type requirement.\n\n\nSemantics\n\n\ntemplate \nclass... Ts\n\nusing boundable;\n\n\n\n\n\n\n\n\n\nExpression\n\n\nDescription\n\n\nReturns\n\n\n\n\n\n\n\n\n\n\nTs...\n\n\nBindings to be verified\n\n\ntrue_type if constraint is satisfied, \nerror\n otherwise\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExpression\n\n\nError\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\ntype\n::is_bound_more_than_once\n\n\nT\n is bound more than once\n\n\n\n\n\n\n\n\ntype\n::is_neither_a_dependency_nor_an_injector\n\n\nT\n is bound more than once\n\n\n\n\n\n\n\n\ntype\n::is_not_base_of\n\n\nT\n is bound more than once\n\n\n\n\n\n\n\n\ntype\n::is_not_convertible_to\n\n\nT\n is bound more than once\n\n\n\n\n\n\n\n\nTest\n\n\n\n\nExample\n\n\n\n\n\n\n\n\ndi::concepts::callable\n\n\n\n\nHeader\n\n\n#include \nboost/di.hpp\n\n\n\n\nDescription\n\n\nSemantics\n\n\nTest\n\n\n\n\nExample\n\n\n\n\n\n\n\n\ndi::concepts::configurable\n\n\n\n\nHeader\n\n\n#include \nboost/di.hpp\n\n\n\n\nDescription\n\n\nSemantics\n\n\nTest\n\n\n\n\nExample\n\n\n\n\n\n\n\n\ndi::concepts::creatable\n\n\n\n\nHeader\n\n\n#include \nboost/di.hpp\n\n\n\n\nDescription\n\n\nSemantics\n\n\nTest\n\n\n\n\nExample\n\n\n\n\n\n\n\n\ndi::concepts::providable\n\n\n\n\nHeader\n\n\n#include \nboost/di.hpp\n\n\n\n\nDescription\n\n\nSemantics\n\n\nTest\n\n\n\n\nExample\n\n\n\n\n\n\n\n\ndi::concepts::scopable\n\n\n\n\nHeader\n\n\n#include \nboost/di.hpp\n\n\n\n\nDescription\n\n\nSemantics\n\n\nTest\n\n\n\n\nExample\n\n\n\n\n\n\n\n\nConfiguration\n\n\ndi::config\n\n\n\n\nHeader\n\n\n#include \nboost/di.hpp\n\n\n\n\nDescription\n\n\nInjector configuration.\n\n\nSemantics\n\n\nstruct config {\n  static auto provider(...) noexcept;\n  static auto policies(...) noexcept;\n};\n\n\n\n\n\n\n\n\n\nExpression\n\n\nRequirement\n\n\nDescription\n\n\nReturns\n\n\n\n\n\n\n\n\n\n\nprovider()\n\n\n[providable]\n\n\nCreates provider\n\n\n[provider]\n\n\n\n\n\n\npolicies()\n\n\n[callable]\n\n\nCreates policies\n\n\n[policy]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExpression\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBOOST_DI_CFG\n\n\nGlobal configuration allows to customize provider and policies\n\n\n\n\n\n\n\n\nTest\n\n\n\n\nExample", 
            "title": "User Guide"
        }, 
        {
            "location": "/user_guide/index.html#injector", 
            "text": "di::injector  Header  #include  boost/di.hpp   Description  Injector is a component used for creating dependencies configuration using bindings and resolve requested types. Boost.DI injector might be composed by mixing bindings, modules and other injectors.  Semantics  template class... TDeps  requires boundable TDeps... \nclass injector {\npublic:\n  using deps; // list of dependencies\n  using config; // configuration\n\n  injector(injector ) = default;\n  template  class... Ts  // no requirements\n  injector(core::injector Ts... ) noexcept;\n  explicit injector(const TDeps ...) noexcept;\n\n  template class T  requires creatable T \n  T create() const;\n\n  template  class T  requires creatable T \n  operator T() const;\n};     Expression  Requirement  Description  Returns      TDeps...  [boundable] TDeps...>  [Bindings] to be used as configuration  -    create T ()  [creatable] T>  Creates type  T  T    operator T()  [creatable] T>  Creates type  T  T        Type  T  Is allowed?  Note      T  \u2714  -    T*  \u2714  Ownerhsip transfer!    const T*  \u2714  Ownerhsip transfer!    T  \u2714  -    const T  \u2714  -    T  \u2714  -    std::unique_ptr T  \u2714  -    std::shared_ptr T  \u2714  -    std::weak_ptr T  \u2714  -    boost_shared_ptr T  \u2714  -     Test   Example     di::make_injector  Header  #include  boost/di.hpp   Description  Creates [injector] type.  Semantics  template \n  class TConfig = di::config\n, class... TBindings  requires boundable TBindings...    configurable TConfig \nauto make_injector(const TBindings ...) noexcept;     Expression  Requirement  Description  Returns      TConfig  [configurable] TConfig>  [Configuration]  -    make_injector(const TBindings ...)  [boundable] TBindings...>  Creates [injector] with given [Bindings]  [injector]     Test   Example", 
            "title": "Injector"
        }, 
        {
            "location": "/user_guide/index.html#bindings", 
            "text": "Bindings define dependencies configuration which basically means what types will be created\nand what values will be passed into them.  di::bind  Header  #include  boost/di.hpp   Description  Allows to bind interface to implementation and associate value with it.  Semantics  struct override; // overrides given configuration\n\nnamespace detail {\n  template class... Ts  requires boundable Ts... \n  struct bind {\n    bind(bind ) noexcept = default;\n\n    template class T  requires boundable T \n    auto to() noexcept;\n\n    template class T  requires boundable T \n    auto to(T ) noexcept;\n\n    template class TScope  requires scopable TScope \n    auto in(const TScope  = di::deduce) noexcept;\n\n    template class TName  // no requirements\n    auto named(const TName  = {}) noexcept;\n\n    auto operator[](const override ) noexcept;\n  };\n} // detail\n\ntemplate class... Ts  requires boundable Ts... \ndetail::bind Ts...  bind{};     Expression  Requirement  Description  Returns      Ts...  [boundable] Ts...>  'Interface' types  -    to T\\  [boundable] T>  Binds  Ts...  to  T  type  [boundable]    to(T )  [boundable] T>  Binds  Ts...  to  T  object  [boundable]    in(const TScope )  [scopable] TScope>  Binds  Ts...  into  TScope  [boundable]    named(const TName )  -  Binds  Ts...  using 'Named' annotation  [boundable]    operator[](const override )  -  Overrides given binding  [boundable]     Test         Example", 
            "title": "Bindings"
        }, 
        {
            "location": "/user_guide/index.html#injections", 
            "text": "Constructor Injection  is the most powerful of available injections.\nIt guarantees initialized state of data members. Boost.DI constructor injection is achieved without any additional work from the user.  automatic (default)  Header  #include  boost/di.hpp   Description  Boost.DI will deduce the best available constructor to be used for injection - unique constructor with the longest parameter list.\nIf the default behavior should be changed constructor has to be explicitly marked with [BOOST_DI_INJECT] or [BOOST_DI_INJECT_TRAITS].", 
            "title": "Injections"
        }, 
        {
            "location": "/user_guide/index.html#annotations", 
            "text": "Annotations are intrusive, additional informations specified along with the type in order to refer to given type by the\nannotation instead of type it self. Useful, when there are more than one type of the same parameters in constructor parameters.  (named = name)  Header  #include  boost/di.hpp   Description  Named parameters are useful when constructor has more parameters of the same type.    T(int value1, int value2);  In order to inject proper values into  value1  and  value2  they have to be distinguished somehow.\nBoost.DI solution for that problem are annotations.", 
            "title": "Annotations"
        }, 
        {
            "location": "/user_guide/index.html#scopes", 
            "text": "Header  #include  boost/di.hpp   Description  Scopes are responsible for creating and maintaining life time of dependencies.\nIf no scope will be given, deduce scope will be assumed.  Semantics  template  class TExpected, class TGiven \nstruct scope {\n  template  class T \n  using is_referable;\n\n  template  class T, class TName, class TProvider \n  static auto try_create(const TProvider );\n\n  template  class T, class TName, class TProvider \n  auto create(const TProvider );\n};     Expression  Requirement  Description  Returns      TExpected  -  'Interface' type  -    TGiven  -  'Implementation' type  -    is_referable T\\  -  Verifies whether scope value might be converted to a reference  std::true_type/std::false_type    try_create T, TName, TProvider\\  providable TProvider>  Verifies whether type might be created  std::true_type/std::false_type    create T, TName, TProvider\\  providable TProvider>  Creates type might be created  T        Type/Scope  unique  singleton  instance        T  \u2714  -  \u2714      T  -  \u2714  \u2714      const T  \u2714 (temporary)  \u2714  \u2714      T* (transfer ownership)  \u2714  -  -  -  \u2714    const T*  \u2714  -  \u2714      T  \u2714  -  -      unique_ptr  \u2714  -  \u2714      shared_ptr  \u2714  \u2714  \u2714      weak_ptr  -  \u2714  \u2714       Test   Example     di::deduce (default)  Header  #include  boost/di.hpp   Description  Default scope which will be converted to one of the scopes depending on the type.     Type  Deduced scope      T  unique    T  singleton    const T  unique (temporary)/singleton    T*  unique (ownership transfer)    const T*  unique (ownership transfer)    T  unique    unique_ptr  unique    shared_ptr  singleton    weak_ptr  singleton     Semantics  namespace scopes {\n  struct deduce {\n    template  class TExpected, class TGiven \n    struct scope {\n      template  class T \n      using is_referable;\n\n      template  class T, class TName, class TProvider \n      static auto try_create(const TProvider );\n\n      template  class T, class TName, class TProvider \n      auto create(const TProvider );\n    };\n  };\n}\n\nscopes::deduce deduce;     Expression  Requirement  Description  Returns      TExpected  -  'Interface' type  -    TGiven  -  'Implementation' type  -    is_referable T\\  -  Verifies whether scope value might be converted to a reference  std::true_type/std::false_type    try_create T, TName, TProvider\\  providable TProvider>  Verifies whether type might be created  std::true_type/std::false_type    create T, TName, TProvider\\  providable TProvider>  Creates type might be created  T     Test   Example     di::instance (di::bind .to(value))  Header  #include  boost/di.hpp   Description  Scope representing values - passed by user. The life time of the object depends on the user.\nBoost.DI is not managing life time of passed objects, however values and strings will be copied and managed by the library.     Type      T    T    const T    T* (transfer ownership)    const T*    T    unique_ptr    shared_ptr    weak_ptr     Semantics  namespace scopes {\n  struct instance {\n    template  class TExpected, class TGiven \n    struct scope {\n      template  class T \n      using is_referable;\n\n      template  class T, class TName, class TProvider \n      static auto try_create(const TProvider );\n\n      template  class T, class TName, class TProvider \n      auto create(const TProvider );\n    };\n  };\n}     Expression  Requirement  Description  Returns      TExpected  -  'Interface' type  -    TGiven  -  'Implementation' type  -    is_referable T\\  -  Verifies whether scope value might be converted to a reference  std::true_type/std::false_type    try_create T, TName, TProvider\\  providable TProvider>  Verifies whether type might be created  std::true_type/std::false_type    create T, TName, TProvider\\  providable TProvider>  Creates type might be created  T     Test   Example     di::singleton  Header  #include  boost/di.hpp   Description  Scope representing shared value between all instances and between threads.\nSingleton scope will be deduced in case of shared_ptr or weak_ptr.", 
            "title": "Scopes"
        }, 
        {
            "location": "/user_guide/index.html#modules", 
            "text": "auto module = [] { return di::make_injector(...); };  Header  #include  boost/di.hpp   Description  Modules allow to split the configuration into smaller injectors.\nModule might be installed by passing it into [make_injector].  Semantics  auto module = di::make_injector(...);  Test       Example", 
            "title": "Modules"
        }, 
        {
            "location": "/user_guide/index.html#providers", 
            "text": "Header  #include  boost/di.hpp   Description  Providers are responsible for creating objects using given configuration.  Semantics  namespace type_traits {\n  struct direct; // T(...)\n  struct uniform; // T{...}\n  struct heap; // new T\n  struct stack; // T\n}\n\nnamespace providers {\n  class provider {\n    public:\n      template  class T, class... TArgs \n      struct is_creatable;\n\n      template  \n        class T\n      , class TInit // type_traits::direct/type_traits::uniform\n      , class TMemory // type_traits::heap/type_traits::stack\n      , class... TArgs\n        auto get(const TInit , const TMemory , TArgs ... args) const;\n  };\n}     Expression  Requirement  Description  Returns      is_creatable T, TArgs...\\  creatable TArgs...>  Verify whether  T  is creatable with  TArgs...  T    get T, TInitialization, TMemory, TArgs\\ (const TInitialization , const TMemory , TArgs ...)  TInitialization  is direct\\  uniform    TMemory  is heap\\  stack     Test   Example     di::providers::stack_over_heap (default)  Header  #include  boost/di.hpp   Description  Creates objects on the stack whenever possible, otherwise on the heap.  Semantics  namespace providers {\n  class stack_over_heap {\n    public:\n      template  class T, class... TArgs \n      struct is_creatable;\n\n      template  \n        class T\n      , class TInit // type_traits::direct/type_traits::uniform\n      , class TMemory // type_traits::heap/type_traits::stack\n      , class... TArgs\n        auto get(const TInit , const TMemory , TArgs ... args) const;\n  };\n}     Expression  Requirement  Description  Returns      is_creatable T, TArgs...\\  creatable TArgs...>  Verify whether  T  is creatable with  TArgs...  T    get T, TInitialization, TMemory, TArgs\\ (const TInitialization , const TMemory , TArgs ...)  TInitialization  is direct\\  uniform    TMemory  is heap\\  stack        Type  TMemory      T  stack    T  stack    const T  stack    T*  stack    const T*  stack    T  stack    unique_ptr  stack    shared_ptr  stack    weak_ptr  stack     Test   Example     di::providers::heap  Header  #include  boost/di.hpp   Description  Basic provider creates objects on the heap.  Semantics  namespace providers {\n  class stack_over_heap {\n    public:\n      template  class T, class... TArgs \n      struct is_creatable;\n\n      template  \n        class T\n      , class TInit // type_traits::direct/type_traits::uniform\n      , class TMemory // type_traits::heap/type_traits::stack\n      , class... TArgs\n        auto get(const TInit , const TMemory , TArgs ... args) const;\n  };\n}     Expression  Requirement  Description  Returns      is_creatable T, TArgs...\\  creatable TArgs...>  Verify whether  T  is creatable with  TArgs...  T    get T, TInitialization, TMemory, TArgs\\ (const TInitialization , const TMemory , TArgs ...)  TInitialization  is direct\\  uniform    TMemory  is heap\\  stack        Type  TMemory      T  stack    T  stack    const T  stack    T*  stack    const T*  stack    T  stack    unique_ptr  stack    shared_ptr  stack    weak_ptr  stack     Test   Example", 
            "title": "Providers"
        }, 
        {
            "location": "/user_guide/index.html#policies", 
            "text": "Header  #include  boost/di.hpp   Description  Policies operates on dependencies in order to limit allowed behaviour or visit created types during run-time.\nPolicies are set up via [di::config].", 
            "title": "Policies"
        }, 
        {
            "location": "/user_guide/index.html#concepts", 
            "text": "Concepts are types constraints which ensure that only given types which are satisfied by the constraint will be allowed.\nIf type doesn't satisfy the concept short and descriptive error message is provided.  di::concepts::boundable  Header  #include  boost/di.hpp   Description  Bindings type requirement.  Semantics  template  class... Ts \nusing boundable;     Expression  Description  Returns      Ts...  Bindings to be verified  true_type if constraint is satisfied,  error  otherwise        Expression  Error  Description       type ::is_bound_more_than_once  T  is bound more than once     type ::is_neither_a_dependency_nor_an_injector  T  is bound more than once     type ::is_not_base_of  T  is bound more than once     type ::is_not_convertible_to  T  is bound more than once     Test   Example     di::concepts::callable  Header  #include  boost/di.hpp   Description  Semantics  Test   Example     di::concepts::configurable  Header  #include  boost/di.hpp   Description  Semantics  Test   Example     di::concepts::creatable  Header  #include  boost/di.hpp   Description  Semantics  Test   Example     di::concepts::providable  Header  #include  boost/di.hpp   Description  Semantics  Test   Example     di::concepts::scopable  Header  #include  boost/di.hpp   Description  Semantics  Test   Example", 
            "title": "Concepts"
        }, 
        {
            "location": "/user_guide/index.html#configuration", 
            "text": "di::config  Header  #include  boost/di.hpp   Description  Injector configuration.  Semantics  struct config {\n  static auto provider(...) noexcept;\n  static auto policies(...) noexcept;\n};     Expression  Requirement  Description  Returns      provider()  [providable]  Creates provider  [provider]    policies()  [callable]  Creates policies  [policy]        Expression  Description      BOOST_DI_CFG  Global configuration allows to customize provider and policies     Test   Example", 
            "title": "Configuration"
        }, 
        {
            "location": "/examples/index.html", 
            "text": "Hello World\n\n\n\n\nBindings\n\n\n\n\nDynamic Bindings\n\n\n\n\nForward Bindings\n\n\n\n\nMultiple Bindings\n\n\n\n\nBinding Non-owning Pointer\n\n\n\n\nAutomatic Injection\n\n\n\n\nConstructor Signature\n\n\n\n\nConstructor Injection\n\n\n\n\nMultiple Interface\n\n\n\n\nAnnotations\n\n\n\n\nDeduce Scope\n\n\n\n\nCustom Scope\n\n\n\n\nEager Singletons\n\n\n\n\nModules\n\n\n\n\nModules (hpp/cpp)\n\n\nCustom Policy\n\n\n\n\nCustom Provider\n\n\n\n\nPool Provider\n\n\n\n\nConfiguration", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/index.html#hello-world", 
            "text": "", 
            "title": "Hello World"
        }, 
        {
            "location": "/examples/index.html#bindings", 
            "text": "", 
            "title": "Bindings"
        }, 
        {
            "location": "/examples/index.html#dynamic-bindings", 
            "text": "", 
            "title": "Dynamic Bindings"
        }, 
        {
            "location": "/examples/index.html#forward-bindings", 
            "text": "", 
            "title": "Forward Bindings"
        }, 
        {
            "location": "/examples/index.html#multiple-bindings", 
            "text": "", 
            "title": "Multiple Bindings"
        }, 
        {
            "location": "/examples/index.html#binding-non-owning-pointer", 
            "text": "", 
            "title": "Binding Non-owning Pointer"
        }, 
        {
            "location": "/examples/index.html#automatic-injection", 
            "text": "", 
            "title": "Automatic Injection"
        }, 
        {
            "location": "/examples/index.html#constructor-signature", 
            "text": "", 
            "title": "Constructor Signature"
        }, 
        {
            "location": "/examples/index.html#constructor-injection", 
            "text": "", 
            "title": "Constructor Injection"
        }, 
        {
            "location": "/examples/index.html#multiple-interface", 
            "text": "", 
            "title": "Multiple Interface"
        }, 
        {
            "location": "/examples/index.html#annotations", 
            "text": "", 
            "title": "Annotations"
        }, 
        {
            "location": "/examples/index.html#deduce-scope", 
            "text": "", 
            "title": "Deduce Scope"
        }, 
        {
            "location": "/examples/index.html#custom-scope", 
            "text": "", 
            "title": "Custom Scope"
        }, 
        {
            "location": "/examples/index.html#eager-singletons", 
            "text": "", 
            "title": "Eager Singletons"
        }, 
        {
            "location": "/examples/index.html#modules", 
            "text": "", 
            "title": "Modules"
        }, 
        {
            "location": "/examples/index.html#modules-hppcpp", 
            "text": "", 
            "title": "Modules (hpp/cpp)"
        }, 
        {
            "location": "/examples/index.html#custom-policy", 
            "text": "", 
            "title": "Custom Policy"
        }, 
        {
            "location": "/examples/index.html#custom-provider", 
            "text": "", 
            "title": "Custom Provider"
        }, 
        {
            "location": "/examples/index.html#pool-provider", 
            "text": "", 
            "title": "Pool Provider"
        }, 
        {
            "location": "/examples/index.html#configuration", 
            "text": "", 
            "title": "Configuration"
        }, 
        {
            "location": "/extensions/index.html", 
            "text": "Constructor Bindings\n\n\n\n\nAssisted Injection\n\n\n\n\nConcepts\n\n\n\n\nLazy\n\n\n\n\nNamed Parameters\n\n\n\n\nXML Injection\n\n\n\n\nTypes Dumper\n\n\n\n\nUML Dumper\n\n\n\n\nMocks Provider\n\n\n\n\nScoped Scope\n\n\n\n\nSession Scope\n\n\n\n\nShared Scope", 
            "title": "Extensions"
        }, 
        {
            "location": "/extensions/index.html#constructor-bindings", 
            "text": "", 
            "title": "Constructor Bindings"
        }, 
        {
            "location": "/extensions/index.html#assisted-injection", 
            "text": "", 
            "title": "Assisted Injection"
        }, 
        {
            "location": "/extensions/index.html#concepts", 
            "text": "", 
            "title": "Concepts"
        }, 
        {
            "location": "/extensions/index.html#lazy", 
            "text": "", 
            "title": "Lazy"
        }, 
        {
            "location": "/extensions/index.html#named-parameters", 
            "text": "", 
            "title": "Named Parameters"
        }, 
        {
            "location": "/extensions/index.html#xml-injection", 
            "text": "", 
            "title": "XML Injection"
        }, 
        {
            "location": "/extensions/index.html#types-dumper", 
            "text": "", 
            "title": "Types Dumper"
        }, 
        {
            "location": "/extensions/index.html#uml-dumper", 
            "text": "", 
            "title": "UML Dumper"
        }, 
        {
            "location": "/extensions/index.html#mocks-provider", 
            "text": "", 
            "title": "Mocks Provider"
        }, 
        {
            "location": "/extensions/index.html#scoped-scope", 
            "text": "", 
            "title": "Scoped Scope"
        }, 
        {
            "location": "/extensions/index.html#session-scope", 
            "text": "", 
            "title": "Session Scope"
        }, 
        {
            "location": "/extensions/index.html#shared-scope", 
            "text": "", 
            "title": "Shared Scope"
        }, 
        {
            "location": "/projects/index.html", 
            "text": "1. \nExperimental Boost.MSM-lite\n\n\n2. \nAutomatic Mocks Injector\n\n\n3. \nMatch-3 Game", 
            "title": "Projects"
        }, 
        {
            "location": "/projects/index.html#1-experimental-boostmsm-lite", 
            "text": "", 
            "title": "1. Experimental Boost.MSM-lite"
        }, 
        {
            "location": "/projects/index.html#2-automatic-mocks-injector", 
            "text": "", 
            "title": "2. Automatic Mocks Injector"
        }, 
        {
            "location": "/projects/index.html#3-match-3-game", 
            "text": "", 
            "title": "3. Match-3 Game"
        }, 
        {
            "location": "/CHANGELOG/index.html", 
            "text": "1.0.0\n - TBD\n\n\n\n\nSupport for MSVC-2015+\n\n\nSupport for GCC-5+\n\n\nSupport for CMake 2.8+\n\n\nSupport for libc++, libstdc++\n\n\nSupport for clang-format\n\n\n\n\n0.5.0\n - 2015-01-12\n\n\n\n\nC++14 version\n\n\nSupport for Clang3.4+\n\n\n\n\n0.1.0\n - 2014-08-15\n\n\n\n\nC++03/C++11 version\n\n\nSupport for Clang3.2+", 
            "title": "CHANGELOG"
        }, 
        {
            "location": "/CHANGELOG/index.html#100-tbd", 
            "text": "Support for MSVC-2015+  Support for GCC-5+  Support for CMake 2.8+  Support for libc++, libstdc++  Support for clang-format", 
            "title": "1.0.0 - TBD"
        }, 
        {
            "location": "/CHANGELOG/index.html#050-2015-01-12", 
            "text": "C++14 version  Support for Clang3.4+", 
            "title": "0.5.0 - 2015-01-12"
        }, 
        {
            "location": "/CHANGELOG/index.html#010-2014-08-15", 
            "text": "C++03/C++11 version  Support for Clang3.2+", 
            "title": "0.1.0 - 2014-08-15"
        }, 
        {
            "location": "/TODO/index.html", 
            "text": "", 
            "title": "TODO"
        }
    ]
}