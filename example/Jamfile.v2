#
# Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
#
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#

import testing ;

project di :
    requirements
        <include>../include
        <include>.
        <warnings>all
;

rule run-example ( std : src + : property * : cxxflags * ) {
    if $(cxxflags) {
        run $(src) : : :
            <toolset>gcc:<cxxflags>"-std=$(std) -include ../test/common/config.hpp $(cxxflags)"
            <toolset>clang:<cxxflags>"-std=$(std) -include ../test/common/config.hpp $(cxxflags)"
            <toolset>darwin:<cxxflags>"-std=$(std) -include ../test/common/config.hpp $(cxxflags)"
            <toolset>intel:<cxxflags>"-std=$(std) -include ../test/common/config.hpp $(cxxflags)"
            <toolset>msvc:<cxxflags>"/FI ../test/common/config.hpp $(cxxflags)"
        : $(property) ;
    } else {
        run $(src) : : :
            <define>BOOST_DI_CFG_EXAMINE_CALL_STACK
            <toolset>gcc:<cxxflags>"-std=$(std) -include ../test/common/config.hpp"
            <toolset>clang:<cxxflags>"-std=$(std) -include ../test/common/config.hpp"
            <toolset>darwin:<cxxflags>"-std=$(std) -include ../test/common/config.hpp"
            <toolset>intel:<cxxflags>"-std=$(std) -include ../test/common/config.hpp"
            <toolset>msvc:<cxxflags>"/FI ../test/common/config.hpp"
        : $(property) ;
    }
}

test-suite cpp_03 : # "di / c++ 03"
    [ run-example c++03 : cpp_03/hello_world.cpp : hello_world_cpp_03 ]
    [ run-example c++03 : cpp_03/modules.cpp : modules_cpp_03 ]
;

test-suite cpp_11 : # "di / c++ 11"
    [ run-example c++11 : cpp_11/binding.cpp : binding_cpp_11 ]
    [ run-example c++11 : cpp_11/constructor_injection.cpp : constructor_injection_cpp_11 ]
    [ run-example c++11 : cpp_11/constructor_signature.cpp : constructor_signature_cpp_11 ]
    [ run-example c++11 : cpp_11/custom_allocator.cpp : custom_allocator_cpp_11 ]
    [ run-example c++11 : cpp_11/custom_policy.cpp : custom_policy_cpp_11 ]
    [ run-example c++11 : cpp_11/custom_scope.cpp : custom_scope_cpp_11 ]
    [ run-example c++11 : cpp_11/deduce_scope.cpp : deduce_scope_cpp_11 ]
    [ run-example c++11 : cpp_11/externals.cpp : externals_cpp_11 ]
    [ run-example c++11 : cpp_11/hello_world.cpp : hello_world_cpp_11 ]
    [ run-example c++11 : cpp_11/multiple_interfaces.cpp : multiple_interfaces_cpp_11 ]
    [ run-example c++11 : cpp_11/modules/module1.cpp
                          cpp_11/modules/module2.cpp
                          cpp_11/modules/app.cpp
                          cpp_11/modules/main.cpp : modules_cpp_11 : -DBOOST_MPL_LIMIT_VECTOR_SIZE=50 ]
    [ run-example c++11 : cpp_11/named.cpp : named_cpp_11 ]
    [ run-example c++11 : cpp_11/provider.cpp : provider_cpp_11 ]
    [ run-example c++11 : cpp_11/text_visitor.cpp : text_visitor_cpp_11 ]
    [ run-example c++11 : cpp_11/uml_visitor.cpp : uml_visitor_cpp_11 ]
;

test-suite cpp_14 : # "di / c++ 14"
    [ run-example c++1y : cpp_14/dynamic_binding.cpp : dynamic_binding_cpp_14 ]
    [ run-example c++1y : cpp_14/modules.cpp : modules_cpp_14 ]
;

test-suite tutorial :
    [ run-example c++1y : cpp_14/tutorial/tutorial1.cpp : tutorial1_cpp_14 : -Icpp_14/tutorial ]
    [ run-example c++1y : cpp_14/tutorial/tutorial2.cpp : tutorial2_cpp_14 : -Icpp_14/tutorial ]
    [ run-example c++1y : cpp_14/tutorial/tutorial3.cpp : tutorial3_cpp_14 : -Icpp_14/tutorial ]
    [ run-example c++1y : cpp_14/tutorial/tutorial4.cpp : tutorial4_cpp_14 : -Icpp_14/tutorial ]
    [ run-example c++1y : cpp_14/tutorial/tutorial5.cpp : tutorial5_cpp_14 : -Icpp_14/tutorial ]
    [ run-example c++1y : cpp_14/tutorial/tutorial6.cpp : tutorial6_cpp_14 : -Icpp_14/tutorial ]
;

