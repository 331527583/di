#
# Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
#
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#

import testing ;

project di :
    requirements
        <include>../include
        <include>.
        <warnings>all
;

rule run-test ( std : src : property * ) {
    run $(src) : : :
        <define>BOOST_DI_CFG_EXAMINE_CALL_STACK
        <toolset>gcc:<cxxflags>"-std=$(std) -include ../test/common/config.hpp"
        <toolset>clang:<cxxflags>"-std=$(std) -include ../test/common/config.hpp"
        <toolset>darwin:<cxxflags>"-std=$(std) -include ../test/common/config.hpp"
        <toolset>intel:<cxxflags>"-std=$(std) -include ../test/common/config.hpp"
        <toolset>msvc:<cxxflags>"/FI ../test/common/config.hpp"
    : $(property) ;
}

test-suite di :
    [ run-test c++03 : hello_world.cpp : hello_world_cpp_03 ]
    [ run-test c++11 : hello_world.cpp : hello_world_cpp_11 ]
    [ run-test c++03 : text_visitor.cpp : text_visitor_cpp_03 ]
    [ run-test c++11 : text_visitor.cpp : text_visitor_cpp_11 ]
    [ run-test c++03 : uml_visitor.cpp : uml_visitor_cpp_03 ]
    [ run-test c++11 : uml_visitor.cpp : uml_visitor_cpp_11 ]
    [ run-test c++03 : provider.cpp : provider_cpp_03 ]
    [ run-test c++11 : provider.cpp : provider_cpp_11 ]
;

test-suite cpp_03 : # "di / c++ 03"
    [ run-test c++03 : cpp_03/injection.cpp : injection_cpp_03 ]
    [ run-test c++03 : cpp_03/modules.cpp : modules_cpp_03 ]
;

test-suite cpp_11 : # "di / c++ 11"
    [ run-test c++11 : cpp_11/allow_only_smart_ptr_policy.cpp : allow_only_smart_ptr_policy_cpp_11 ]
    [ run-test c++11 : cpp_11/concepts.cpp : concepts_cpp_11 ]
    [ run-test c++11 : cpp_11/custom_scope.cpp : custom_scope_cpp_11 ]
    [ run-test c++11 : cpp_11/deduce_scope.cpp : deduce_scope_cpp_11 ]
    [ run-test c++11 : cpp_11/injection.cpp : injection_cpp_11 ]
    [ run-test c++11 : cpp_11/externals.cpp : externals_cpp_11 ]
    [ run-test c++11 : cpp_11/inject.cpp : inject_cpp_11 ]
    [ run-test c++11 : cpp_11/multiple_interfaces.cpp : multiple_interfaces_cpp_11 ]
    [ run-test c++11 : cpp_11/motivation.cpp : motivation_cpp_11 ]
    [ run-test c++11 : cpp_11/named.cpp : named_cpp_11 ]
    [ run-test c++11 : cpp_11/testing.cpp : testing_cpp_11 ]
;

test-suite cpp_14 : # "di / c++ 14"
    [ run-test c++1y : cpp_14/tutorial/tutorial1.cpp : tutorial1_cpp_14 ]
    [ run-test c++1y : cpp_14/tutorial/tutorial2.cpp : tutorial2_cpp_14 ]
    [ run-test c++1y : cpp_14/tutorial/tutorial3.cpp : tutorial3_cpp_14 ]
    [ run-test c++1y : cpp_14/tutorial/tutorial4.cpp : tutorial4_cpp_14 ]
    [ run-test c++1y : cpp_14/tutorial/tutorial5.cpp : tutorial5_cpp_14 ]
    [ run-test c++1y : cpp_14/factory.cpp : factory_cpp_14 ]
    [ run-test c++1y : cpp_14/modules.cpp : modules_cpp_14 ]
;

