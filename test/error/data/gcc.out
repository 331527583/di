error/bind_external_repeated.cpp: In lambda function:
error/bind_external_repeated.cpp:15:5: error: no matching function for call to ‘make_injector(boost::di::v1::core::dependency<boost::di::v1::scopes::external, int, int, boost::di::v1::no_name, boost::di::v1::aux::none_type>, boost::di::v1::core::dependency<boost::di::v1::scopes::external, int, int, boost::di::v1::no_name, boost::di::v1::aux::none_type>)’
     );
     ^
In file included from error/bind_external_repeated.cpp:7:0:
../include/boost/di.hpp:3417:15: note: candidate: template<class TConfig, class ... TDeps, typename boost::di::v1::constraint_not_satisfied<boost::di::v1::concepts::boundable<boost::di::v1::aux::type_list<TArgs2 ...> > >::type <anonymous>, typename boost::di::v1::constraint_not_satisfied<boost::di::v1::concepts::configurable<TConfig> >::type <anonymous> > auto boost::di::v1::make_injector(const TDeps& ...)
 > inline auto make_injector(const TDeps&... args) noexcept {
               ^
../include/boost/di.hpp:3417:15: note:   template argument deduction/substitution failed:
In file included from error/bind_external_repeated.cpp:7:0:
../include/boost/di.hpp:191:60: error: no type named ‘type’ in ‘struct boost::di::v1::constraint_not_satisfied<boost::di::v1::bound_type<int, boost::di::v1::no_name>::is_bound_more_than_once>’
     typename constraint_not_satisfied<__VA_ARGS__>::type = 0
                                                            ^
../include/boost/di.hpp:3415:6: note: in expansion of macro ‘BOOST_DI_REQUIRES_MSG’
    , BOOST_DI_REQUIRES_MSG(concepts::boundable<aux::type_list<TDeps...>>)
      ^
../include/boost/di.hpp:191:60: note: invalid template non-type parameter
     typename constraint_not_satisfied<__VA_ARGS__>::type = 0
                                                            ^
../include/boost/di.hpp:3415:6: note: in expansion of macro ‘BOOST_DI_REQUIRES_MSG’
    , BOOST_DI_REQUIRES_MSG(concepts::boundable<aux::type_list<TDeps...>>)
      ^
error/bind_external_with_given_scope.cpp: In lambda function:
error/bind_external_with_given_scope.cpp:13:45: error: no matching function for call to ‘boost::di::v1::core::dependency<boost::di::v1::scopes::unique, int, int, boost::di::v1::no_name, boost::di::v1::aux::none_type>::to(int)’
         di::bind<int>().in(di::unique).to(42)
                                             ^
In file included from error/bind_external_with_given_scope.cpp:7:0:
../include/boost/di.hpp:1634:10: note: candidate: template<class T, typename std::enable_if<boost::di::v1::core::dependency<boost::di::v1::scopes::unique, int, int, boost::di::v1::no_name, boost::di::v1::aux::none_type>::externable<T>::value, int>::type <anonymous> > auto boost::di::v1::core::dependency<TScope, TExpected, TGiven, TName, TPriority>::to(T&&) const [with T = T; typename std::enable_if<boost::di::v1::core::dependency<TScope, TExpected, TGiven, TName, TPriority>::externable<T>::value, int>::type <anonymous> = <enumerator>; TScope = boost::di::v1::scopes::unique; TExpected = int; TGiven = int; TName = boost::di::v1::no_name; TPriority = boost::di::v1::aux::none_type]
     auto to(T&& object) const noexcept {
          ^
../include/boost/di.hpp:1634:10: note:   template argument deduction/substitution failed:
In file included from error/bind_external_with_given_scope.cpp:7:0:
../include/boost/di.hpp:185:55: error: no type named ‘type’ in ‘struct std::enable_if<false, int>’
     typename std::enable_if<__VA_ARGS__, int>::type = 0
                                                       ^
../include/boost/di.hpp:1633:23: note: in expansion of macro ‘BOOST_DI_REQUIRES’
     template<class T, BOOST_DI_REQUIRES(externable<T>::value)>
                       ^
../include/boost/di.hpp:185:55: note: invalid template non-type parameter
     typename std::enable_if<__VA_ARGS__, int>::type = 0
                                                       ^
../include/boost/di.hpp:1633:23: note: in expansion of macro ‘BOOST_DI_REQUIRES’
     template<class T, BOOST_DI_REQUIRES(externable<T>::value)>
                       ^
In file included from error/bind_external_with_given_scope.cpp:7:0:
../include/boost/di.hpp:1642:10: note: candidate: template<class T, typename std::enable_if<boost::di::v1::core::has_configure<T>::value, int>::type <anonymous> > auto boost::di::v1::core::dependency<TScope, TExpected, TGiven, TName, TPriority>::to(const T&) const [with T = T; typename std::enable_if<boost::di::v1::core::has_configure<T>::value, int>::type <anonymous> = <enumerator>; TScope = boost::di::v1::scopes::unique; TExpected = int; TGiven = int; TName = boost::di::v1::no_name; TPriority = boost::di::v1::aux::none_type]
     auto to(const T& object) const noexcept {
          ^
../include/boost/di.hpp:1642:10: note:   template argument deduction/substitution failed:
In file included from error/bind_external_with_given_scope.cpp:7:0:
../include/boost/di.hpp:185:55: error: no type named ‘type’ in ‘struct std::enable_if<false, int>’
     typename std::enable_if<__VA_ARGS__, int>::type = 0
                                                       ^
../include/boost/di.hpp:1641:23: note: in expansion of macro ‘BOOST_DI_REQUIRES’
     template<class T, BOOST_DI_REQUIRES(has_configure<T>::value)>
                       ^
../include/boost/di.hpp:185:55: note: invalid template non-type parameter
     typename std::enable_if<__VA_ARGS__, int>::type = 0
                                                       ^
../include/boost/di.hpp:1641:23: note: in expansion of macro ‘BOOST_DI_REQUIRES’
     template<class T, BOOST_DI_REQUIRES(has_configure<T>::value)>
                       ^
In file included from error/bind_external_with_given_scope.cpp:7:0:
../include/boost/di.hpp:1650:10: note: candidate: template<class T, typename std::enable_if<boost::di::v1::core::has_deps<T, void>::value, int>::type <anonymous> > auto boost::di::v1::core::dependency<TScope, TExpected, TGiven, TName, TPriority>::to(const T&) const [with T = T; typename std::enable_if<boost::di::v1::core::has_deps<T>::value, int>::type <anonymous> = <enumerator>; TScope = boost::di::v1::scopes::unique; TExpected = int; TGiven = int; TName = boost::di::v1::no_name; TPriority = boost::di::v1::aux::none_type]
     auto to(const T& object) const noexcept {
          ^
../include/boost/di.hpp:1650:10: note:   template argument deduction/substitution failed:
In file included from error/bind_external_with_given_scope.cpp:7:0:
../include/boost/di.hpp:185:55: error: no type named ‘type’ in ‘struct std::enable_if<false, int>’
     typename std::enable_if<__VA_ARGS__, int>::type = 0
                                                       ^
../include/boost/di.hpp:1649:23: note: in expansion of macro ‘BOOST_DI_REQUIRES’
     template<class T, BOOST_DI_REQUIRES(has_deps<T>::value)>
                       ^
../include/boost/di.hpp:185:55: note: invalid template non-type parameter
     typename std::enable_if<__VA_ARGS__, int>::type = 0
                                                       ^
../include/boost/di.hpp:1649:23: note: in expansion of macro ‘BOOST_DI_REQUIRES’
     template<class T, BOOST_DI_REQUIRES(has_deps<T>::value)>
                       ^
error/bind_external_with_given_type.cpp: In lambda function:
error/bind_external_with_given_type.cpp:16:38: error: no matching function for call to ‘boost::di::v1::core::dependency<boost::di::v1::scopes::deduce, i, impl, boost::di::v1::no_name, boost::di::v1::aux::none_type>::to(impl) const’
         di::bind<i, impl>().to(impl{})
                                      ^
In file included from error/bind_external_with_given_type.cpp:7:0:
../include/boost/di.hpp:1634:10: note: candidate: template<class T, typename std::enable_if<boost::di::v1::core::dependency<boost::di::v1::scopes::deduce, i, impl, boost::di::v1::no_name, boost::di::v1::aux::none_type>::externable<T>::value, int>::type <anonymous> > auto boost::di::v1::core::dependency<TScope, TExpected, TGiven, TName, TPriority>::to(T&&) const [with T = T; typename std::enable_if<boost::di::v1::core::dependency<TScope, TExpected, TGiven, TName, TPriority>::externable<T>::value, int>::type <anonymous> = <enumerator>; TScope = boost::di::v1::scopes::deduce; TExpected = i; TGiven = impl; TName = boost::di::v1::no_name; TPriority = boost::di::v1::aux::none_type]
     auto to(T&& object) const noexcept {
          ^
../include/boost/di.hpp:1634:10: note:   template argument deduction/substitution failed:
In file included from error/bind_external_with_given_type.cpp:7:0:
../include/boost/di.hpp:185:55: error: no type named ‘type’ in ‘struct std::enable_if<false, int>’
     typename std::enable_if<__VA_ARGS__, int>::type = 0
                                                       ^
../include/boost/di.hpp:1633:23: note: in expansion of macro ‘BOOST_DI_REQUIRES’
     template<class T, BOOST_DI_REQUIRES(externable<T>::value)>
                       ^
../include/boost/di.hpp:185:55: note: invalid template non-type parameter
     typename std::enable_if<__VA_ARGS__, int>::type = 0
                                                       ^
../include/boost/di.hpp:1633:23: note: in expansion of macro ‘BOOST_DI_REQUIRES’
     template<class T, BOOST_DI_REQUIRES(externable<T>::value)>
                       ^
In file included from error/bind_external_with_given_type.cpp:7:0:
../include/boost/di.hpp:1642:10: note: candidate: template<class T, typename std::enable_if<boost::di::v1::core::has_configure<T>::value, int>::type <anonymous> > auto boost::di::v1::core::dependency<TScope, TExpected, TGiven, TName, TPriority>::to(const T&) const [with T = T; typename std::enable_if<boost::di::v1::core::has_configure<T>::value, int>::type <anonymous> = <enumerator>; TScope = boost::di::v1::scopes::deduce; TExpected = i; TGiven = impl; TName = boost::di::v1::no_name; TPriority = boost::di::v1::aux::none_type]
     auto to(const T& object) const noexcept {
          ^
../include/boost/di.hpp:1642:10: note:   template argument deduction/substitution failed:
In file included from error/bind_external_with_given_type.cpp:7:0:
../include/boost/di.hpp:185:55: error: no type named ‘type’ in ‘struct std::enable_if<false, int>’
     typename std::enable_if<__VA_ARGS__, int>::type = 0
                                                       ^
../include/boost/di.hpp:1641:23: note: in expansion of macro ‘BOOST_DI_REQUIRES’
     template<class T, BOOST_DI_REQUIRES(has_configure<T>::value)>
                       ^
../include/boost/di.hpp:185:55: note: invalid template non-type parameter
     typename std::enable_if<__VA_ARGS__, int>::type = 0
                                                       ^
../include/boost/di.hpp:1641:23: note: in expansion of macro ‘BOOST_DI_REQUIRES’
     template<class T, BOOST_DI_REQUIRES(has_configure<T>::value)>
                       ^
In file included from error/bind_external_with_given_type.cpp:7:0:
../include/boost/di.hpp:1650:10: note: candidate: template<class T, typename std::enable_if<boost::di::v1::core::has_deps<T, void>::value, int>::type <anonymous> > auto boost::di::v1::core::dependency<TScope, TExpected, TGiven, TName, TPriority>::to(const T&) const [with T = T; typename std::enable_if<boost::di::v1::core::has_deps<T>::value, int>::type <anonymous> = <enumerator>; TScope = boost::di::v1::scopes::deduce; TExpected = i; TGiven = impl; TName = boost::di::v1::no_name; TPriority = boost::di::v1::aux::none_type]
     auto to(const T& object) const noexcept {
          ^
../include/boost/di.hpp:1650:10: note:   template argument deduction/substitution failed:
In file included from error/bind_external_with_given_type.cpp:7:0:
../include/boost/di.hpp:185:55: error: no type named ‘type’ in ‘struct std::enable_if<false, int>’
     typename std::enable_if<__VA_ARGS__, int>::type = 0
                                                       ^
../include/boost/di.hpp:1649:23: note: in expansion of macro ‘BOOST_DI_REQUIRES’
     template<class T, BOOST_DI_REQUIRES(has_deps<T>::value)>
                       ^
../include/boost/di.hpp:185:55: note: invalid template non-type parameter
     typename std::enable_if<__VA_ARGS__, int>::type = 0
                                                       ^
../include/boost/di.hpp:1649:23: note: in expansion of macro ‘BOOST_DI_REQUIRES’
     template<class T, BOOST_DI_REQUIRES(has_deps<T>::value)>
                       ^
error/bind_multiple_times.cpp: In lambda function:
error/bind_multiple_times.cpp:19:5: error: no matching function for call to ‘make_injector(const boost::di::v1::core::dependency<boost::di::v1::scopes::deduce, i, impl1, boost::di::v1::no_name, boost::di::v1::aux::none_type>&, const boost::di::v1::core::dependency<boost::di::v1::scopes::deduce, i, impl2, boost::di::v1::no_name, boost::di::v1::aux::none_type>&)’
     );
     ^
In file included from error/bind_multiple_times.cpp:7:0:
../include/boost/di.hpp:3417:15: note: candidate: template<class TConfig, class ... TDeps, typename boost::di::v1::constraint_not_satisfied<boost::di::v1::concepts::boundable<boost::di::v1::aux::type_list<TArgs2 ...> > >::type <anonymous>, typename boost::di::v1::constraint_not_satisfied<boost::di::v1::concepts::configurable<TConfig> >::type <anonymous> > auto boost::di::v1::make_injector(const TDeps& ...)
 > inline auto make_injector(const TDeps&... args) noexcept {
               ^
../include/boost/di.hpp:3417:15: note:   template argument deduction/substitution failed:
In file included from error/bind_multiple_times.cpp:7:0:
../include/boost/di.hpp:191:60: error: no type named ‘type’ in ‘struct boost::di::v1::constraint_not_satisfied<boost::di::v1::bound_type<i, boost::di::v1::no_name>::is_bound_more_than_once>’
     typename constraint_not_satisfied<__VA_ARGS__>::type = 0
                                                            ^
../include/boost/di.hpp:3415:6: note: in expansion of macro ‘BOOST_DI_REQUIRES_MSG’
    , BOOST_DI_REQUIRES_MSG(concepts::boundable<aux::type_list<TDeps...>>)
      ^
../include/boost/di.hpp:191:60: note: invalid template non-type parameter
     typename constraint_not_satisfied<__VA_ARGS__>::type = 0
                                                            ^
../include/boost/di.hpp:3415:6: note: in expansion of macro ‘BOOST_DI_REQUIRES_MSG’
    , BOOST_DI_REQUIRES_MSG(concepts::boundable<aux::type_list<TDeps...>>)
      ^
error/bind_not_compatible_types.cpp: In lambda function:
error/bind_not_compatible_types.cpp:16:13: error: no type named ‘type’ in ‘struct boost::di::v1::constraint_not_satisfied<boost::di::v1::bound_type<impl>::is_not_base_of<int> >’
         di::bind<int, impl>()
             ^
error/bind_not_compatible_types.cpp:16:13: note: invalid template non-type parameter
error/bind_not_compatible_types.cpp:19:21: error: expected primary-expression before ‘int’
     injector.create<int>();
                     ^
error/bind_repeated.cpp: In lambda function:
error/bind_repeated.cpp:19:5: error: no matching function for call to ‘make_injector(const boost::di::v1::core::dependency<boost::di::v1::scopes::deduce, i, impl1, boost::di::v1::no_name, boost::di::v1::aux::none_type>&, const boost::di::v1::core::dependency<boost::di::v1::scopes::deduce, i, impl1, boost::di::v1::no_name, boost::di::v1::aux::none_type>&)’
     );
     ^
In file included from error/bind_repeated.cpp:7:0:
../include/boost/di.hpp:3417:15: note: candidate: template<class TConfig, class ... TDeps, typename boost::di::v1::constraint_not_satisfied<boost::di::v1::concepts::boundable<boost::di::v1::aux::type_list<TArgs2 ...> > >::type <anonymous>, typename boost::di::v1::constraint_not_satisfied<boost::di::v1::concepts::configurable<TConfig> >::type <anonymous> > auto boost::di::v1::make_injector(const TDeps& ...)
 > inline auto make_injector(const TDeps&... args) noexcept {
               ^
../include/boost/di.hpp:3417:15: note:   template argument deduction/substitution failed:
In file included from error/bind_repeated.cpp:7:0:
../include/boost/di.hpp:191:60: error: no type named ‘type’ in ‘struct boost::di::v1::constraint_not_satisfied<boost::di::v1::bound_type<i, boost::di::v1::no_name>::is_bound_more_than_once>’
     typename constraint_not_satisfied<__VA_ARGS__>::type = 0
                                                            ^
../include/boost/di.hpp:3415:6: note: in expansion of macro ‘BOOST_DI_REQUIRES_MSG’
    , BOOST_DI_REQUIRES_MSG(concepts::boundable<aux::type_list<TDeps...>>)
      ^
../include/boost/di.hpp:191:60: note: invalid template non-type parameter
     typename constraint_not_satisfied<__VA_ARGS__>::type = 0
                                                            ^
../include/boost/di.hpp:3415:6: note: in expansion of macro ‘BOOST_DI_REQUIRES_MSG’
    , BOOST_DI_REQUIRES_MSG(concepts::boundable<aux::type_list<TDeps...>>)
      ^
error/bind_to_different_types.cpp: In lambda function:
error/bind_to_different_types.cpp:19:5: error: no matching function for call to ‘make_injector(const boost::di::v1::core::dependency<boost::di::v1::scopes::deduce, i, impl1, boost::di::v1::no_name, boost::di::v1::aux::none_type>&, const boost::di::v1::core::dependency<boost::di::v1::scopes::deduce, i, impl2, boost::di::v1::no_name, boost::di::v1::aux::none_type>&)’
     );
     ^
In file included from error/bind_to_different_types.cpp:7:0:
../include/boost/di.hpp:3417:15: note: candidate: template<class TConfig, class ... TDeps, typename boost::di::v1::constraint_not_satisfied<boost::di::v1::concepts::boundable<boost::di::v1::aux::type_list<TArgs2 ...> > >::type <anonymous>, typename boost::di::v1::constraint_not_satisfied<boost::di::v1::concepts::configurable<TConfig> >::type <anonymous> > auto boost::di::v1::make_injector(const TDeps& ...)
 > inline auto make_injector(const TDeps&... args) noexcept {
               ^
../include/boost/di.hpp:3417:15: note:   template argument deduction/substitution failed:
In file included from error/bind_to_different_types.cpp:7:0:
../include/boost/di.hpp:191:60: error: no type named ‘type’ in ‘struct boost::di::v1::constraint_not_satisfied<boost::di::v1::bound_type<i, boost::di::v1::no_name>::is_bound_more_than_once>’
     typename constraint_not_satisfied<__VA_ARGS__>::type = 0
                                                            ^
../include/boost/di.hpp:3415:6: note: in expansion of macro ‘BOOST_DI_REQUIRES_MSG’
    , BOOST_DI_REQUIRES_MSG(concepts::boundable<aux::type_list<TDeps...>>)
      ^
../include/boost/di.hpp:191:60: note: invalid template non-type parameter
     typename constraint_not_satisfied<__VA_ARGS__>::type = 0
                                                            ^
../include/boost/di.hpp:3415:6: note: in expansion of macro ‘BOOST_DI_REQUIRES_MSG’
    , BOOST_DI_REQUIRES_MSG(concepts::boundable<aux::type_list<TDeps...>>)
      ^
In file included from error/create_polymorphic_type_without_binding.cpp:7:0:
../include/boost/di.hpp:1772:5: error: inline function ‘static T* boost::di::v1::abstract_type<T>::is_not_bound::error(boost::di::v1::_) [with T = i]’ used but never defined [-Werror]
     error(_ = "type not bound, did you forget to add: 'di::bind<interface, implementation>'?");
     ^
error/create_polymorphic_type_without_binding.cpp: In lambda function:
error/create_polymorphic_type_without_binding.cpp:19:35: error: call to ‘boost::di::v1::core::injector<boost::di::v1::config, boost::di::v1::core::pool<> >::create<c, 0>’ declared with attribute error: creatable constraint not satisfied
     di::make_injector().create<c>();
                                   ^
cc1plus: all warnings being treated as errors
In file included from error/ctor_inject_limit_out_of_range.cpp:8:0:
error/ctor_inject_limit_out_of_range.cpp: In lambda function:
../include/boost/di.hpp:1306:5: error: static assertion failed: Number of constructor arguments is out of range - see BOOST_DI_CFG_CTOR_LIMIT_SIZE
     static_assert( \
     ^
../include/boost/di.hpp:1235:33: note: in expansion of macro ‘BOOST_DI_INJECT_TRAITS_IMPL’
     #define BOOST_DI_IIF_II(id) id
                                 ^
../include/boost/di.hpp:1234:39: note: in expansion of macro ‘BOOST_DI_IIF_II’
     #define BOOST_DI_IIF_I(bit, t, f) BOOST_DI_IIF_II(BOOST_DI_IIF_ ## bit(t, f))
                                       ^
../include/boost/di.hpp:1234:55: note: in expansion of macro ‘BOOST_DI_IIF_0’
     #define BOOST_DI_IIF_I(bit, t, f) BOOST_DI_IIF_II(BOOST_DI_IIF_ ## bit(t, f))
                                                       ^
../include/boost/di.hpp:1233:37: note: in expansion of macro ‘BOOST_DI_IIF_I’
     #define BOOST_DI_IIF(bit, t, f) BOOST_DI_IIF_I(bit, t, f)
                                     ^
../include/boost/di.hpp:1172:35: note: in expansion of macro ‘BOOST_DI_IIF’
 #define BOOST_DI_IF_I(cond, t, f) BOOST_DI_IIF(cond, t, f)
                                   ^
../include/boost/di.hpp:1154:33: note: in expansion of macro ‘BOOST_DI_IF_I’
 #define BOOST_DI_IF(cond, t, f) BOOST_DI_IF_I(cond, t, f)
                                 ^
../include/boost/di.hpp:1313:9: note: in expansion of macro ‘BOOST_DI_IF’
         BOOST_DI_IF( \
         ^
../include/boost/di.hpp:1329:9: note: in expansion of macro ‘BOOST_DI_INJECT_TRAITS’
         BOOST_DI_INJECT_TRAITS(__VA_ARGS__); \
         ^
error/ctor_inject_limit_out_of_range.cpp:14:9: note: in expansion of macro ‘BOOST_DI_INJECT’
         BOOST_DI_INJECT(c, int, int, int, int) { }
         ^
In file included from error/ctor_limit_out_of_range.cpp:8:0:
../include/boost/di.hpp:1943:5: error: inline function ‘static T* boost::di::v1::number_of_constructor_arguments_is_out_of_range_for<T>::max<TMax>::error(boost::di::v1::_) [with int TMax = 3; T = <lambda()>::c]’ used but never defined [-Werror]
     error(_ = "increase BOOST_DI_CFG_CTOR_LIMIT_SIZE value or reduce number of constructor parameters");
     ^
../include/boost/di.hpp:1943:5: error: ‘static T* boost::di::v1::number_of_constructor_arguments_is_out_of_range_for<T>::max<TMax>::error(boost::di::v1::_) [with int TMax = 3; T = <lambda()>::c]’, declared using local type ‘<lambda()>::c’, is used but never defined [-fpermissive]
cc1plus: all warnings being treated as errors
In file included from error/exposed_multiple_times.cpp:7:0:
../include/boost/di.hpp: In instantiation of ‘class boost::di::v1::injector<c, c>’:
error/exposed_multiple_times.cpp:14:24:   required from here
../include/boost/di.hpp:3378:7: error: no type named ‘type’ in ‘struct boost::di::v1::constraint_not_satisfied<boost::di::v1::bound_type<c>::is_bound_more_than_once, boost::di::v1::core::injector<boost::di::v1::config, boost::di::v1::core::pool<boost::di::v1::aux::type_list<> >, c, c> >’
 class injector : public
       ^
../include/boost/di.hpp:3389:7: error: no type named ‘type’ in ‘struct boost::di::v1::constraint_not_satisfied<boost::di::v1::bound_type<c>::is_bound_more_than_once>’
     > injector(const core::injector<TConfig, TPolicies, TDeps...>& injector) noexcept // non explicit
       ^
error/exposed_not_creatable.cpp: In lambda function:
error/exposed_not_creatable.cpp:21:21: error: variable ‘injector’ set but not used [-Werror=unused-but-set-variable]
     di::injector<i> injector = di::make_injector();
                     ^
In file included from error/exposed_not_creatable.cpp:8:0:
../include/boost/di.hpp: At global scope:
../include/boost/di.hpp:1772:5: error: inline function ‘static T* boost::di::v1::abstract_type<T>::is_not_bound::error(boost::di::v1::_) [with T = i]’ used but never defined [-Werror]
     error(_ = "type not bound, did you forget to add: 'di::bind<interface, implementation>'?");
     ^
../include/boost/di.hpp: In constructor ‘boost::di::v1::injector< <template-parameter-1-1> >::injector(const boost::di::v1::core::injector<TConfig_, TPolicies_, TDeps_ ...>&) [with TConfig = boost::di::v1::config; TPolicies = boost::di::v1::core::pool<>; TDeps = {}; typename boost::di::v1::constraint_not_satisfied<boost::di::v1::concepts::boundable<boost::di::v1::aux::type<TDeps ...> > >::type <anonymous> = 0; T = {i}]’:
../include/boost/di.hpp:3393:34: error: call to ‘boost::di::v1::detail::create<i>’ declared with attribute error: creatable constraint not satisfied
                 detail::create<T>(
                                  ^
cc1plus: all warnings being treated as errors
error/exposed_polymorphic_type_without_binding.cpp: In lambda function:
error/exposed_polymorphic_type_without_binding.cpp:16:21: error: variable ‘injector’ set but not used [-Werror=unused-but-set-variable]
     di::injector<c> injector = di::make_injector(); // di::bind<i, impl>()
                     ^
In file included from error/exposed_polymorphic_type_without_binding.cpp:7:0:
../include/boost/di.hpp: At global scope:
../include/boost/di.hpp:1772:5: error: inline function ‘static T* boost::di::v1::abstract_type<T>::is_not_bound::error(boost::di::v1::_) [with T = i]’ used but never defined [-Werror]
     error(_ = "type not bound, did you forget to add: 'di::bind<interface, implementation>'?");
     ^
../include/boost/di.hpp: In constructor ‘boost::di::v1::injector< <template-parameter-1-1> >::injector(const boost::di::v1::core::injector<TConfig_, TPolicies_, TDeps_ ...>&) [with TConfig = boost::di::v1::config; TPolicies = boost::di::v1::core::pool<>; TDeps = {}; typename boost::di::v1::constraint_not_satisfied<boost::di::v1::concepts::boundable<boost::di::v1::aux::type<TDeps ...> > >::type <anonymous> = 0; T = {c}]’:
../include/boost/di.hpp:3393:34: error: call to ‘boost::di::v1::detail::create<c>’ declared with attribute error: creatable constraint not satisfied
                 detail::create<T>(
                                  ^
cc1plus: all warnings being treated as errors
In file included from error/inject_limit_out_of_range.cpp:8:0:
error/inject_limit_out_of_range.cpp: In lambda function:
../include/boost/di.hpp:1306:5: error: static assertion failed: Number of constructor arguments is out of range - see BOOST_DI_CFG_CTOR_LIMIT_SIZE
     static_assert( \
     ^
../include/boost/di.hpp:1235:33: note: in expansion of macro ‘BOOST_DI_INJECT_TRAITS_IMPL’
     #define BOOST_DI_IIF_II(id) id
                                 ^
../include/boost/di.hpp:1234:39: note: in expansion of macro ‘BOOST_DI_IIF_II’
     #define BOOST_DI_IIF_I(bit, t, f) BOOST_DI_IIF_II(BOOST_DI_IIF_ ## bit(t, f))
                                       ^
../include/boost/di.hpp:1234:55: note: in expansion of macro ‘BOOST_DI_IIF_0’
     #define BOOST_DI_IIF_I(bit, t, f) BOOST_DI_IIF_II(BOOST_DI_IIF_ ## bit(t, f))
                                                       ^
../include/boost/di.hpp:1233:37: note: in expansion of macro ‘BOOST_DI_IIF_I’
     #define BOOST_DI_IIF(bit, t, f) BOOST_DI_IIF_I(bit, t, f)
                                     ^
../include/boost/di.hpp:1172:35: note: in expansion of macro ‘BOOST_DI_IIF’
 #define BOOST_DI_IF_I(cond, t, f) BOOST_DI_IIF(cond, t, f)
                                   ^
../include/boost/di.hpp:1154:33: note: in expansion of macro ‘BOOST_DI_IF_I’
 #define BOOST_DI_IF(cond, t, f) BOOST_DI_IF_I(cond, t, f)
                                 ^
../include/boost/di.hpp:1313:9: note: in expansion of macro ‘BOOST_DI_IF’
         BOOST_DI_IF( \
         ^
../include/boost/di.hpp:1329:9: note: in expansion of macro ‘BOOST_DI_INJECT_TRAITS’
         BOOST_DI_INJECT_TRAITS(__VA_ARGS__); \
         ^
error/inject_limit_out_of_range.cpp:14:9: note: in expansion of macro ‘BOOST_DI_INJECT’
         BOOST_DI_INJECT(c, int, int, int, int) { }
         ^
In file included from error/injector_ctor_ambiguous.cpp:7:0:
../include/boost/di.hpp:1943:5: error: inline function ‘static T* boost::di::v1::number_of_constructor_arguments_is_out_of_range_for<T>::max<TMax>::error(boost::di::v1::_) [with int TMax = 10; T = <lambda()>::ctor]’ used but never defined [-Werror]
     error(_ = "increase BOOST_DI_CFG_CTOR_LIMIT_SIZE value or reduce number of constructor parameters");
     ^
../include/boost/di.hpp:1943:5: error: ‘static T* boost::di::v1::number_of_constructor_arguments_is_out_of_range_for<T>::max<TMax>::error(boost::di::v1::_) [with int TMax = 10; T = <lambda()>::ctor]’, declared using local type ‘<lambda()>::ctor’, is used but never defined [-fpermissive]
cc1plus: all warnings being treated as errors
error/injector_shared_by_copy.cpp: In lambda function:
error/injector_shared_by_copy.cpp:17:28: error: ‘shared’ is not a member of ‘di’
         di::bind<int>().in(di::shared)
                            ^
error/injector_shared_by_copy.cpp:17:28: note: suggested alternative:
In file included from error/injector_shared_by_copy.cpp:7:0:
../include/boost/di.hpp:621:8: note:   ‘boost::di::v1::wrappers::shared’
 struct shared {
        ^
error/injector_shared_by_copy.cpp:20:22: error: expected primary-expression before ‘>’ token
     injector.create<c>();
                      ^
error/injector_shared_by_copy.cpp:20:24: error: expected primary-expression before ‘)’ token
     injector.create<c>();
                        ^
error/make_injector_wrong_arg.cpp: In lambda function:
error/make_injector_wrong_arg.cpp:13:79: error: no matching function for call to ‘make_injector(<lambda()>::neither_module_nor_injector_nor_module)’
     auto injector = di::make_injector(neither_module_nor_injector_nor_module{});
                                                                               ^
In file included from error/make_injector_wrong_arg.cpp:7:0:
../include/boost/di.hpp:3417:15: note: candidate: template<class TConfig, class ... TDeps, typename boost::di::v1::constraint_not_satisfied<boost::di::v1::concepts::boundable<boost::di::v1::aux::type_list<TArgs2 ...> > >::type <anonymous>, typename boost::di::v1::constraint_not_satisfied<boost::di::v1::concepts::configurable<TConfig> >::type <anonymous> > auto boost::di::v1::make_injector(const TDeps& ...)
 > inline auto make_injector(const TDeps&... args) noexcept {
               ^
../include/boost/di.hpp:3417:15: note:   template argument deduction/substitution failed:
In file included from error/make_injector_wrong_arg.cpp:7:0:
../include/boost/di.hpp:191:60: error: no type named ‘type’ in ‘struct boost::di::v1::constraint_not_satisfied<boost::di::v1::bound_type<<lambda()>::neither_module_nor_injector_nor_module>::is_neither_a_dependency_nor_an_injector>’
     typename constraint_not_satisfied<__VA_ARGS__>::type = 0
                                                            ^
../include/boost/di.hpp:3415:6: note: in expansion of macro ‘BOOST_DI_REQUIRES_MSG’
    , BOOST_DI_REQUIRES_MSG(concepts::boundable<aux::type_list<TDeps...>>)
      ^
../include/boost/di.hpp:191:60: note: invalid template non-type parameter
     typename constraint_not_satisfied<__VA_ARGS__>::type = 0
                                                            ^
../include/boost/di.hpp:3415:6: note: in expansion of macro ‘BOOST_DI_REQUIRES_MSG’
    , BOOST_DI_REQUIRES_MSG(concepts::boundable<aux::type_list<TDeps...>>)
      ^
In file included from error/named_paramater_spelling.cpp:7:0:
error/named_paramater_spelling.cpp: In lambda function:
../include/boost/di.hpp:1286:48: error: ‘NAMED’ is not a member of ‘boost::di::v1::detail’
 #define BOOST_DI_GEN_ARG_NAME_IMPL(p) decltype(::boost::di::detail::p) BOOST_DI_EAT(
                                                ^
../include/boost/di.hpp:1284:34: note: in expansion of macro ‘BOOST_DI_GEN_ARG_NAME_IMPL’
 #define BOOST_DI_GEN_ARG_NAME(p) BOOST_DI_GEN_ARG_NAME_IMPL p )
                                  ^
../include/boost/di.hpp:1235:33: note: in expansion of macro ‘BOOST_DI_GEN_ARG_NAME’
     #define BOOST_DI_IIF_II(id) id
                                 ^
../include/boost/di.hpp:1234:39: note: in expansion of macro ‘BOOST_DI_IIF_II’
     #define BOOST_DI_IIF_I(bit, t, f) BOOST_DI_IIF_II(BOOST_DI_IIF_ ## bit(t, f))
                                       ^
../include/boost/di.hpp:1234:55: note: in expansion of macro ‘BOOST_DI_IIF_1’
     #define BOOST_DI_IIF_I(bit, t, f) BOOST_DI_IIF_II(BOOST_DI_IIF_ ## bit(t, f))
                                                       ^
../include/boost/di.hpp:1233:37: note: in expansion of macro ‘BOOST_DI_IIF_I’
     #define BOOST_DI_IIF(bit, t, f) BOOST_DI_IIF_I(bit, t, f)
                                     ^
../include/boost/di.hpp:1172:35: note: in expansion of macro ‘BOOST_DI_IIF’
 #define BOOST_DI_IF_I(cond, t, f) BOOST_DI_IIF(cond, t, f)
                                   ^
../include/boost/di.hpp:1154:33: note: in expansion of macro ‘BOOST_DI_IF_I’
 #define BOOST_DI_IF(cond, t, f) BOOST_DI_IF_I(cond, t, f)
                                 ^
../include/boost/di.hpp:1289:5: note: in expansion of macro ‘BOOST_DI_IF’
     BOOST_DI_IF(BOOST_DI_IBP(p), BOOST_DI_GEN_ARG_NAME, BOOST_DI_GEN_NONE_TYPE)(p)
     ^
../include/boost/di.hpp:1290:35: note: in expansion of macro ‘BOOST_DI_GEN_NAME_IMPL’
 #define BOOST_DI_GEN_NAME(i, ...) BOOST_DI_GEN_NAME_IMPL(BOOST_DI_ELEM(i, __VA_ARGS__,), i)
                                   ^
../include/boost/di.hpp:1195:35: note: in expansion of macro ‘BOOST_DI_GEN_NAME’
 #define BOOST_DI_REPEAT_1(m, ...) m(0, __VA_ARGS__)
                                   ^
../include/boost/di.hpp:1194:38: note: in expansion of macro ‘BOOST_DI_REPEAT_1’
 #define BOOST_DI_REPEAT_N(i, m, ...) BOOST_DI_REPEAT_##i(m, __VA_ARGS__)
                                      ^
../include/boost/di.hpp:1155:36: note: in expansion of macro ‘BOOST_DI_REPEAT_N’
 #define BOOST_DI_REPEAT(i, m, ...) BOOST_DI_REPEAT_N(i, m, __VA_ARGS__)
                                    ^
../include/boost/di.hpp:1300:9: note: in expansion of macro ‘BOOST_DI_REPEAT’
         BOOST_DI_REPEAT(BOOST_DI_SIZE(__VA_ARGS__), BOOST_DI_GEN_NAME, __VA_ARGS__) \
         ^
../include/boost/di.hpp:1235:33: note: in expansion of macro ‘BOOST_DI_INJECT_TRAITS_IMPL’
     #define BOOST_DI_IIF_II(id) id
                                 ^
../include/boost/di.hpp:1234:39: note: in expansion of macro ‘BOOST_DI_IIF_II’
     #define BOOST_DI_IIF_I(bit, t, f) BOOST_DI_IIF_II(BOOST_DI_IIF_ ## bit(t, f))
                                       ^
../include/boost/di.hpp:1234:55: note: in expansion of macro ‘BOOST_DI_IIF_0’
     #define BOOST_DI_IIF_I(bit, t, f) BOOST_DI_IIF_II(BOOST_DI_IIF_ ## bit(t, f))
                                                       ^
../include/boost/di.hpp:1233:37: note: in expansion of macro ‘BOOST_DI_IIF_I’
     #define BOOST_DI_IIF(bit, t, f) BOOST_DI_IIF_I(bit, t, f)
                                     ^
../include/boost/di.hpp:1172:35: note: in expansion of macro ‘BOOST_DI_IIF’
 #define BOOST_DI_IF_I(cond, t, f) BOOST_DI_IIF(cond, t, f)
                                   ^
../include/boost/di.hpp:1154:33: note: in expansion of macro ‘BOOST_DI_IF_I’
 #define BOOST_DI_IF(cond, t, f) BOOST_DI_IF_I(cond, t, f)
                                 ^
../include/boost/di.hpp:1313:9: note: in expansion of macro ‘BOOST_DI_IF’
         BOOST_DI_IF( \
         ^
../include/boost/di.hpp:1329:9: note: in expansion of macro ‘BOOST_DI_INJECT_TRAITS’
         BOOST_DI_INJECT_TRAITS(__VA_ARGS__); \
         ^
error/named_paramater_spelling.cpp:15:9: note: in expansion of macro ‘BOOST_DI_INJECT’
         BOOST_DI_INJECT(c, (NAMED = name) int) { }
         ^
../include/boost/di.hpp:1286:48: error: ‘NAMED’ is not a member of ‘boost::di::v1::detail’
 #define BOOST_DI_GEN_ARG_NAME_IMPL(p) decltype(::boost::di::detail::p) BOOST_DI_EAT(
                                                ^
../include/boost/di.hpp:1284:34: note: in expansion of macro ‘BOOST_DI_GEN_ARG_NAME_IMPL’
 #define BOOST_DI_GEN_ARG_NAME(p) BOOST_DI_GEN_ARG_NAME_IMPL p )
                                  ^
../include/boost/di.hpp:1235:33: note: in expansion of macro ‘BOOST_DI_GEN_ARG_NAME’
     #define BOOST_DI_IIF_II(id) id
                                 ^
../include/boost/di.hpp:1234:39: note: in expansion of macro ‘BOOST_DI_IIF_II’
     #define BOOST_DI_IIF_I(bit, t, f) BOOST_DI_IIF_II(BOOST_DI_IIF_ ## bit(t, f))
                                       ^
../include/boost/di.hpp:1234:55: note: in expansion of macro ‘BOOST_DI_IIF_1’
     #define BOOST_DI_IIF_I(bit, t, f) BOOST_DI_IIF_II(BOOST_DI_IIF_ ## bit(t, f))
                                                       ^
../include/boost/di.hpp:1233:37: note: in expansion of macro ‘BOOST_DI_IIF_I’
     #define BOOST_DI_IIF(bit, t, f) BOOST_DI_IIF_I(bit, t, f)
                                     ^
../include/boost/di.hpp:1172:35: note: in expansion of macro ‘BOOST_DI_IIF’
 #define BOOST_DI_IF_I(cond, t, f) BOOST_DI_IIF(cond, t, f)
                                   ^
../include/boost/di.hpp:1154:33: note: in expansion of macro ‘BOOST_DI_IF_I’
 #define BOOST_DI_IF(cond, t, f) BOOST_DI_IF_I(cond, t, f)
                                 ^
../include/boost/di.hpp:1289:5: note: in expansion of macro ‘BOOST_DI_IF’
     BOOST_DI_IF(BOOST_DI_IBP(p), BOOST_DI_GEN_ARG_NAME, BOOST_DI_GEN_NONE_TYPE)(p)
     ^
../include/boost/di.hpp:1290:35: note: in expansion of macro ‘BOOST_DI_GEN_NAME_IMPL’
 #define BOOST_DI_GEN_NAME(i, ...) BOOST_DI_GEN_NAME_IMPL(BOOST_DI_ELEM(i, __VA_ARGS__,), i)
                                   ^
../include/boost/di.hpp:1195:35: note: in expansion of macro ‘BOOST_DI_GEN_NAME’
 #define BOOST_DI_REPEAT_1(m, ...) m(0, __VA_ARGS__)
                                   ^
../include/boost/di.hpp:1194:38: note: in expansion of macro ‘BOOST_DI_REPEAT_1’
 #define BOOST_DI_REPEAT_N(i, m, ...) BOOST_DI_REPEAT_##i(m, __VA_ARGS__)
                                      ^
../include/boost/di.hpp:1155:36: note: in expansion of macro ‘BOOST_DI_REPEAT_N’
 #define BOOST_DI_REPEAT(i, m, ...) BOOST_DI_REPEAT_N(i, m, __VA_ARGS__)
                                    ^
../include/boost/di.hpp:1300:9: note: in expansion of macro ‘BOOST_DI_REPEAT’
         BOOST_DI_REPEAT(BOOST_DI_SIZE(__VA_ARGS__), BOOST_DI_GEN_NAME, __VA_ARGS__) \
         ^
../include/boost/di.hpp:1235:33: note: in expansion of macro ‘BOOST_DI_INJECT_TRAITS_IMPL’
     #define BOOST_DI_IIF_II(id) id
                                 ^
../include/boost/di.hpp:1234:39: note: in expansion of macro ‘BOOST_DI_IIF_II’
     #define BOOST_DI_IIF_I(bit, t, f) BOOST_DI_IIF_II(BOOST_DI_IIF_ ## bit(t, f))
                                       ^
../include/boost/di.hpp:1234:55: note: in expansion of macro ‘BOOST_DI_IIF_0’
     #define BOOST_DI_IIF_I(bit, t, f) BOOST_DI_IIF_II(BOOST_DI_IIF_ ## bit(t, f))
                                                       ^
../include/boost/di.hpp:1233:37: note: in expansion of macro ‘BOOST_DI_IIF_I’
     #define BOOST_DI_IIF(bit, t, f) BOOST_DI_IIF_I(bit, t, f)
                                     ^
../include/boost/di.hpp:1172:35: note: in expansion of macro ‘BOOST_DI_IIF’
 #define BOOST_DI_IF_I(cond, t, f) BOOST_DI_IIF(cond, t, f)
                                   ^
../include/boost/di.hpp:1154:33: note: in expansion of macro ‘BOOST_DI_IF_I’
 #define BOOST_DI_IF(cond, t, f) BOOST_DI_IF_I(cond, t, f)
                                 ^
../include/boost/di.hpp:1313:9: note: in expansion of macro ‘BOOST_DI_IF’
         BOOST_DI_IF( \
         ^
../include/boost/di.hpp:1329:9: note: in expansion of macro ‘BOOST_DI_INJECT_TRAITS’
         BOOST_DI_INJECT_TRAITS(__VA_ARGS__); \
         ^
error/named_paramater_spelling.cpp:15:9: note: in expansion of macro ‘BOOST_DI_INJECT’
         BOOST_DI_INJECT(c, (NAMED = name) int) { }
         ^
error/policy_constructible.cpp: In static member function ‘static auto config::policies()’:
error/policy_constructible.cpp:15:57: error: ‘_’ was not declared in this scope
         return di::make_policies(constructible(is_bound<_>{}));
                                                         ^
error/policy_constructible.cpp:15:57: note: suggested alternatives:
In file included from error/policy_constructible.cpp:7:0:
../include/boost/di.hpp:51:8: note:   ‘boost::di::v1::_’
 struct _ { _(...) { } };
        ^
../include/boost/di.hpp:51:8: note:   ‘boost::di::v1::_’
error/policy_constructible.cpp:15:58: error: template argument 1 is invalid
         return di::make_policies(constructible(is_bound<_>{}));
                                                          ^
error/policy_constructible.cpp: In lambda function:
error/policy_constructible.cpp:20:47: error: no matching function for call to ‘make_injector()’
     auto injector = di::make_injector<config>();
                                               ^
In file included from error/policy_constructible.cpp:7:0:
../include/boost/di.hpp:3417:15: note: candidate: template<class TConfig, class ... TDeps, typename boost::di::v1::constraint_not_satisfied<boost::di::v1::concepts::boundable<boost::di::v1::aux::type_list<TArgs2 ...> > >::type <anonymous>, typename boost::di::v1::constraint_not_satisfied<boost::di::v1::concepts::configurable<TConfig> >::type <anonymous> > auto boost::di::v1::make_injector(const TDeps& ...)
 > inline auto make_injector(const TDeps&... args) noexcept {
               ^
../include/boost/di.hpp:3417:15: note:   template argument deduction/substitution failed:
In file included from error/policy_constructible.cpp:7:0:
../include/boost/di.hpp:191:60: error: no type named ‘type’ in ‘struct boost::di::v1::constraint_not_satisfied<boost::di::v1::config_type<config>::is_not_configurable>’
     typename constraint_not_satisfied<__VA_ARGS__>::type = 0
                                                            ^
../include/boost/di.hpp:3416:6: note: in expansion of macro ‘BOOST_DI_REQUIRES_MSG’
    , BOOST_DI_REQUIRES_MSG(concepts::configurable<TConfig>)
      ^
../include/boost/di.hpp:191:60: note: invalid template non-type parameter
     typename constraint_not_satisfied<__VA_ARGS__>::type = 0
                                                            ^
../include/boost/di.hpp:3416:6: note: in expansion of macro ‘BOOST_DI_REQUIRES_MSG’
    , BOOST_DI_REQUIRES_MSG(concepts::configurable<TConfig>)
      ^
error/policy_constructible.cpp:21:21: error: expected primary-expression before ‘int’
     injector.create<int>();
                     ^
In file included from error/scope_traits_external_not_referable.cpp:7:0:
../include/boost/di.hpp:1823:9: error: inline function ‘static T boost::di::v1::when_creating<TParent>::type<T>::error(boost::di::v1::_) [with T = int&; TParent = <lambda()>::c]’ used but never defined [-Werror]
         error(_ = "reference type not bound, did you forget to add `auto value = ...; di::bind<T>.to(value)`");
         ^
error/scope_traits_external_not_referable.cpp: In lambda function:
error/scope_traits_external_not_referable.cpp:20:24: error: call to ‘boost::di::v1::core::injector<boost::di::v1::config, boost::di::v1::core::pool<>, boost::di::v1::core::dependency<boost::di::v1::scopes::external, int, int, boost::di::v1::no_name, boost::di::v1::aux::none_type> >::create<<lambda()>::c, 0>’ declared with attribute error: creatable constraint not satisfied
     injector.create<c>();
                        ^
cc1plus: all warnings being treated as errors
