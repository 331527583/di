#
# Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
#
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#

import testing ;

project :
    requirements
        <include>.
        <include>../include
        <library>/boost/test//boost_unit_test_framework/<link>static
        <warnings>all
        <toolset>gcc:<cxxflags>"-ftemplate-depth-1024"
        <define>BOOST_TEST_MODULE=di_test
;

rule run-cpp11 ( src ) {
    return [ run $(src) : : :
        <toolset>gcc:<cxxflags>"-std=c++11 -include config.hpp"
        <toolset>clang:<cxxflags>"-std=c++11 -include config.hpp"
        <toolset>intel:<cxxflags>"-std=c++11 -include config.hpp"
    ] ;
}

rule run-cpp03 ( src ) {
    return [ run $(src) : : :
        <toolset>gcc:<cxxflags>"-std=c++03 -include config.hpp"
        <toolset>clang:<cxxflags>"-std=c++03 -include config.hpp"
        <toolset>intel:<cxxflags>"-std=gnu++98 -include config.hpp"
    ] ;
}

rule compile-fail-cpp11 ( src ) {
    return [ compile-fail $(src) :
        <toolset>gcc:<cxxflags>"-std=c++11 -include config.hpp"
        <toolset>clang:<cxxflags>"-std=c++11 -include config.hpp"
        <toolset>intel:<cxxflags>"-std=c++11 -include config.hpp"
    ] ;
}

rule compile-fail-cpp03 ( src ) {
    return [ compile-fail $(src) :
        <toolset>gcc:<cxxflags>"-std=c++03 -include config.hpp"
        <toolset>clang:<cxxflags>"-std=c++03 -include config.hpp"
        <toolset>intel:<cxxflags>"-std=gnu++98 -include config.hpp"
    ] ;
}

#test-suite "concepts" :
    #[ run-cpp11 concepts/dependency_ut.cpp ]
    #[ run-cpp11 concepts_ut.cpp ]
    #[ run-cpp11 named_ut.cpp ]
#;

#test-suite "convertibles" :
    #[ run-cpp11 convertibles/copy_convertible_ut.cpp ]
    #[ run-cpp11 convertibles/reference_convertible_ut.cpp ]
    #[ run-cpp11 convertibles/shared_convertible_ut.cpp ]
    #[ run-cpp11 convertibles/value_convertible_ut.cpp ]
#;

test-suite "type traits" :
    #[ run-cpp11 type_traits/create_traits_ut.cpp ]
	#[ run-cpp11 type_traits/ctor_traits_ut.cpp ]
    #[ run-cpp11 type_traits/is_same_base_of_ut.cpp ]
    #[ run-cpp11 type_traits/make_plain_ut.cpp ]
    #[ run-cpp11 type_traits/parameter_types_ut.cpp ]
    #[ run-cpp11 type_traits/remove_accessors_ut.cpp ]
    #[ run-cpp11 type_traits/scope_traits_ut.cpp ]
;

test-suite "implementation detail" :
    #[ run-cpp11 detail/binder_ut.cpp ]
    #[ run-cpp11 detail/creator_ut.cpp ]
	[ run-cpp11 detail/module_mt.cpp ]
    #[ run-cpp11 detail/pool_ut.cpp ]
;

#test-suite "policies" :
    #[ run-cpp11 policies/arguments_permission_ut.cpp ]
    #[ run-cpp11 policies/binding_correctness_ut.cpp ]
    #[ run-cpp11 policies/creation_ownership_ut.cpp ]
    #[ run-cpp11 policies/circular_dependencies_ut.cpp ]
    #[ run-cpp11 policies/scopes_permission_ut.cpp ]
#;

#test-suite "scopes" :
    #[ run-cpp11 scopes/external_scope_ut.cpp ]
    #[ run-cpp11 scopes/session_scope_ut.cpp ]
    #[ run-cpp11 scopes/shared_scope_ut.cpp ]
    #[ run-cpp11 scopes/unique_scope_ut.cpp ]
#;

#test-suite "ctors" :
    #[ run-cpp11 ctor_bracket_ut.cpp ]
    #[ run-cpp11 ctor_va_args_ut.cpp ]
#;

test-suite "injector" :
	[ run-cpp11 injector_mt.cpp ]
	[ run-cpp11 injector_ut.cpp ]
	[ run-cpp11 make_injector_mt.cpp ]
    #[ run injector_limit_size_mt.cpp : : :
        #<define>BOOST_DI_CTOR_CFG_BRACKET
        #<define>BOOST_MPL_LIMIT_VECTOR_SIZE=70
    #]
;

test-suite "di / C++ 11" :
	[ run-cpp11 di_mt_11.cpp ]
;

#test-suite "di / c++ 98/03" :
    #[ run-cpp03 di_mt_03.cpp ]
#;

#test-suite "di / default" :
    #[ run di_mt.cpp : : :
        #<toolset>gcc:<cxxflags>"-Wno-variadic-macros"
        #<define>BOOST_DI_CTOR_CFG_VA_ARGS
        #<define>BOOST_DI_TR1_SMART_PTR
    #]
#;
#
test-suite "di / playground" :
	#[ run-cpp11 test.cpp ]
;

#test-suite "compile fail" :
    #[ compile-fail-cpp11 detail/module_externals_mt_fail.cpp ]
    #[ compile-fail-cpp11 detail/module_policy_mt_fail.cpp ]
    #[ compile-fail-cpp11 policies/arguments_permission_mt_fail.cpp ]
    #[ compile-fail-cpp11 policies/binding_correctness_mt_fail.cpp ]
    #[ compile-fail-cpp11 policies/binding_correctness_ub_mt_fail.cpp ]
    #[ compile-fail-cpp11 policies/circular_dependencies_mt_fail.cpp ]
    #[ compile-fail-cpp11 policies/creation_ownership_mt_fail.cpp ]
    #[ compile-fail-cpp11 policies/scopes_permission_mt_fail.cpp ]
    #[ compile-fail-cpp11 injector_policy_mt_fail.cpp ]
    #[ compile-fail-cpp11 injector_shared_by_copy_mt_fail.cpp ]
    #[ compile-fail       injector_lack_of_shared_ptr_mt_fail.cpp : <define>BOOST_DI_TR1_SMART_PTR ]
#;

