#
# Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
#
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#

import testing ;
import feature : extend-feature compose ;

extend-feature variant : coverage ;
compose <variant>coverage :
    <cxxflags>"-fprofile-arcs"
    <cxxflags>"-ftest-coverage"
    <linkflags>"-fprofile-arcs"
    <optimization>off
;

extend-feature variant : analyze ;
compose <variant>analyze :
    <cxxflags>"-fsanitize=undefined -fsanitize=memory"
;

project :
    requirements
        <include>common
        <include>../include
        <warnings>all
;

rule run-test ( std * : src + : ctor * : defines * : preprocessed_headers * ) {
    common_toolset = ;

    if $(std) {
        common_toolset +=
            <toolset>clang:<cxxflags>"-std=$(std)"
        ;
    }

    if $(ctor) {
        defines += <define>BOOST_DI_INJECT(type, ...)=type(__VA_ARGS__) ;
    }

    if ! $(preprocessed_headers) {
        defines += <define>BOOST_DI_CFG_NO_PREPROCESSED_HEADERS ;
    }

    run $(src) : : : $(common_toolset) $(defines) : $(ctor) ;
}

rule compile-fail-test ( std * : src + : ctor * : defines * : preprocessed_headers * ) {
    common_toolset =
        <toolset>clang:<cxxflags>"-std=$(std) -Wfatal-errors"
    ;

    if $(ctor) {
        defines += <define>BOOST_DI_INJECT(type, ...)=type(__VA_ARGS__) ;
    }

    if ! $(preprocessed_headers) {
        defines += <define>BOOST_DI_CFG_NO_PREPROCESSED_HEADERS ;
    }

    compile-fail $(src) : $(common_toolset) $(defines) : $(ctor) ;
}

#test-suite ut : # unit tests
#    [ run-test c++11 : ut/bindings_ut.cpp ]
#;

test-suite it : # integration tests
    [ run-test c++1y : it/di.cpp : : <define>BOOST_DI_CFG_CONV_TO_BOOST_SMART_PTR ]
;

#test-suite ft : # functional tests
    #[ run-test c++11 : ft/di_ft_cpp_03.cpp : ctor_di_ft_cpp_03 ]
#;

#test-suite fail : # compile fail tests
    #[ compile-fail-test c++11 : fail/detail/module_externals_fail.cpp ]
#;

#test-suite pt : # performane tests
    #[ run-test c++11 : pt/di_pt.cpp : preprocessed_di_pt_cpp_11 : <define>BOOST_DI_CFG_TEST_LEVELS_LIMIT_SIZE=5 : preprocessed_headers ]
#;

