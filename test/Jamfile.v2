#
# Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
#
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#

import testing ;
import feature : extend-feature compose ;

extend-feature variant : coverage ;
compose <variant>coverage :
    <cxxflags>"-fprofile-arcs"
    <cxxflags>"-ftest-coverage"
    <linkflags>"-fprofile-arcs"
    <optimization>off
;

extend-feature variant : analyze ;
compose <variant>analyze :
    <cxxflags>"-fsanitize=undefined -fsanitize=memory"
;

project :
    requirements
        <include>.
        <include>../include
        <warnings>all
;

rule run-test ( std * : src + : ctor * : defines * : preprocessed_headers * ) {
    common_toolset = ;

    if $(std) {
        common_toolset += <cxxflags>"-std=$(std) -include common/test.hpp" ;
    }

    if $(ctor) {
        defines += <define>\"BOOST_DI_INJECT(type,...)=type(__VA_ARGS__)\" ;
    }

    if ! $(preprocessed_headers) {
        defines += <define>BOOST_DI_CFG_NO_PREPROCESSED_HEADERS ;
    }

    run $(src) : : : $(common_toolset) $(defines) : $(ctor) ;
}

rule compile-fail-test ( std * : src + : ctor * : defines * : preprocessed_headers * ) {
    common_toolset = <cxxflags>"-std=$(std) -Wfatal-errors -include common/test.hpp" ;

    if $(ctor) {
        defines += <define>\"BOOST_DI_INJECT(type,...)=type(__VA_ARGS__)\" ;
    }

    if ! $(preprocessed_headers) {
        defines += <define>BOOST_DI_CFG_NO_PREPROCESSED_HEADERS ;
    }

    compile-fail $(src) : $(common_toolset) $(defines) : $(ctor) ;
}

test-suite ut : # unit tests
    [ run-test c++1y : ut/inject.cpp ]
    [ run-test c++1y : ut/inject.cpp : ctor_inject ]
    [ run-test c++1y : ut/aux_/type_traits.cpp ]
    [ run-test c++1y : ut/aux_/utility.cpp ]
    [ run-test c++1y : ut/type_traits/ctor_traits.cpp ]
    [ run-test c++1y : ut/type_traits/scope_traits.cpp ]
    [ run-test c++1y : ut/type_traits/memory_traits.cpp ]
    [ run-test c++1y : ut/wrappers/unique.cpp ]
    [ run-test c++1y : ut/bindings.cpp ]
    [ run-test c++1y : ut/config.cpp ]
    [ run-test c++1y : ut/make_injector.cpp ]
    [ run-test c++1y : ut/named.cpp ]
;

test-suite ft : # functional tests
    [ run-test c++1y : ft/di.cpp : : <define>BOOST_DI_CFG_CONV_TO_BOOST_SMART_PTR ]
    [ run-test c++1y : ft/di_allow_ctor_types.cpp ]
    [ run-test c++1y : ft/di_custom_policies.cpp ]
    [ run-test c++1y : ft/di_custom_policies_global.cpp ]
    [ run-test c++1y : ft/di_custom_provider.cpp ]
;

test-suite fail : # compile fail tests
    #[ compile-fail-test c++1y : fail/make_injector_wrong_arg.cpp ]
;

test-suite pt : # performane tests
    #[ run-test c++1y : pt/di.cpp : : : pph ]
    #[ run-test c++1y : pt/di.cpp : ctor_di : : pph ]
;

