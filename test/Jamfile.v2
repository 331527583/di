#
# Copyright (c) 2012-2015 Krzysztof Jusiak (krzysztof at jusiak dot net)
#
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#

import testing ;
import feature : extend-feature compose ;

extend-feature variant : coverage ;
compose <variant>coverage :
    <cxxflags>"-fprofile-arcs -ftest-coverage" <linkflags>"-fprofile-arcs"
    <optimization>off
;

extend-feature variant : analyze ;
compose <variant>analyze :
    <toolset>gcc:<cxxflags>"-fsanitize=undefined -fsanitize=address" <toolset>gcc:<linkflags>"-fsanitize=undefined -fsanitize=address"
    <toolset>clang:<cxxflags>"-fsanitize=undefined -fsanitize=address" <toolset>clang:<linkflags>"-fsanitize=undefined -fsanitize=address"
    <toolset>darwin:<cxxflags>"-fsanitize=undefined -fsanitize=address" <toolset>darwin:<linkflags>"-fsanitize=undefined -fsanitize=address"
    <toolset>msvc:<cxxflags>"/analyze"
    <optimization>off
;

project :
    requirements
        <include>.
        <include>..
        <include>../include
;

rule run-test ( std * : src + : ctor * : defines * : preprocessed_headers * ) {
    toolset =
        <toolset>gcc:<cxxflags>"-std=$(std) -include common/test.hpp -pedantic -pedantic-errors -Wall -Wextra -Werror"
        <toolset>clang:<cxxflags>"-std=$(std) -include common/test.hpp -pedantic -pedantic-errors -Wall -Wextra -Werror"
        <toolset>darwin:<cxxflags>"-std=$(std) -include common/test.hpp -pedantic -pedantic-errors -Wall -Wextra -Werror"
        <toolset>msvc:<cxxflags>"/FI common/test.hpp /W3"
    ;

    if $(ctor) {
        defines += <define>BOOST_DI_CFG_CTOR <define>\"BOOST_DI_INJECT(type,...)=type(__VA_ARGS__)\" ;
    }

    if ! $(preprocessed_headers) {
        defines += <define>BOOST_DI_CFG_NO_PREPROCESSED_HEADERS ;
    }

    run $(src) : : : $(toolset) $(defines) : $(ctor) ;
}

rule compile-fail-test ( std * : src + : ctor * : defines * : preprocessed_headers * ) {
    toolset =
        <toolset>gcc:<cxxflags>"-std=$(std) -include common/test.hpp -pedantic -pedantic-errors -Wall -Wextra -Werror"
        <toolset>clang:<cxxflags>"-std=$(std) -include common/test.hpp -pedantic -pedantic-errors -Wall -Wextra -Werror"
        <toolset>darwin:<cxxflags>"-std=$(std) -include common/test.hpp -pedantic -pedantic-errors -Wall -Wextra -Werror"
        <toolset>msvc:<cxxflags>"/FI common/test.hpp /W3"
    ;

    if $(ctor) {
        defines += <define>\"BOOST_DI_INJECT(type,...)=type(__VA_ARGS__)\" ;
    }

    if ! $(preprocessed_headers) {
        defines += <define>BOOST_DI_CFG_NO_PREPROCESSED_HEADERS ;
    }

    compile-fail $(src) : $(toolset) $(defines) : $(ctor) ;
}

test-suite ut :
    [ run-test c++1y : ut/inject.cpp ]
    [ run-test c++1y : ut/inject.cpp : ctor_inject ]
    [ run-test c++1y : ut/aux_/preprocessor.cpp ]
    [ run-test c++1y : ut/aux_/type_traits.cpp ]
    [ run-test c++1y : ut/aux_/utility.cpp ]
    #[ run-test c++1y : ut/concepts/boundable.cpp ]
    #[ run-test c++1y : ut/concepts/callable.cpp ]
    #[ run-test c++1y : ut/concepts/configurable.cpp ]
    #[ run-test c++1y : ut/concepts/creatable.cpp ]
    #[ run-test c++1y : ut/concepts/providable.cpp ]
    #[ run-test c++1y : ut/concepts/scopable.cpp ]
    [ run-test c++1y : ut/core/any_type.cpp ]
    [ run-test c++1y : ut/core/binder.cpp ]
    [ run-test c++1y : ut/core/dependency.cpp ]
    [ run-test c++1y : ut/core/injector.cpp ]
    [ run-test c++1y : ut/core/policy.cpp ]
    [ run-test c++1y : ut/core/pool.cpp ]
    [ run-test c++1y : ut/core/provider.cpp ]
    [ run-test c++1y : ut/policies/constructible.cpp ]
    [ run-test c++1y : ut/providers/heap.cpp ]
    [ run-test c++1y : ut/providers/stack_over_heap.cpp ]
    [ run-test c++1y : ut/scopes/deduce.cpp ]
    [ run-test c++1y : ut/scopes/exposed.cpp ]
    [ run-test c++1y : ut/scopes/external.cpp ]
    [ run-test c++1y : ut/scopes/session.cpp ]
    [ run-test c++1y : ut/scopes/shared.cpp ]
    [ run-test c++1y : ut/scopes/singleton.cpp ]
    [ run-test c++1y : ut/scopes/unique.cpp ]
    [ run-test c++1y : ut/type_traits/ctor_traits.cpp ]
    [ run-test c++1y : ut/type_traits/scope_traits.cpp ]
    [ run-test c++1y : ut/type_traits/memory_traits.cpp ]
    [ run-test c++1y : ut/wrappers/unique.cpp : unique_wrapper ]
    [ run-test c++1y : ut/wrappers/shared.cpp : shared_wrapper ]
    [ run-test c++1y : ut/bindings.cpp ]
    [ run-test c++1y : ut/config.cpp ]
    [ run-test c++1y : ut/injector.cpp : ctor_injector_cpp ]
    [ run-test c++1y : ut/make_injector.cpp ]
;

test-suite ft :
    [ run-test c++1y : ft/di_bind.cpp ]
    [ run-test c++1y : ft/di_config.cpp ]
    [ run-test c++1y : ft/di_config_global_policies.cpp ]
    [ run-test c++1y : ft/di_config_global_provider.cpp ]
    [ run-test c++1y : ft/di_inject.cpp ]
    [ run-test c++1y : ft/di_injector.cpp ]
    [ run-test c++1y : ft/di_modules.cpp ]
    [ run-test c++1y : ft/di_scope_exposed.cpp ]
    [ run-test c++1y : ft/di_scope_external.cpp ]
    [ run-test c++1y : ft/di_scope_session.cpp ]
    [ run-test c++1y : ft/di_scope_shared.cpp ]
    [ run-test c++1y : ft/di_scope_unique.cpp ]
;

test-suite pt :
    [ run-test c++1y : pt/di_run_time.cpp : : <optimization>speed <variant>release ]
;

#test-suite error :
    #[ compile-fail-test c++1y : error/bind_external_repeated.cpp ]
    #[ compile-fail-test c++1y : error/bind_external_with_given_scope.cpp ]
    #[ compile-fail-test c++1y : error/bind_external_with_given_type.cpp ]
    #[ compile-fail-test c++1y : error/bind_not_compatible_types.cpp ]
    #[ compile-fail-test c++1y : error/bind_multiple_times.cpp ]
    #[ compile-fail-test c++1y : error/bind_repeated.cpp ]
    #[ compile-fail-test c++1y : error/bind_to_different_types.cpp ]
    #[ compile-fail-test c++1y : error/create_polymorphic_type_without_binding.cpp ]
    #[ compile-fail-test c++1y : error/ctor_limit_out_of_range.cpp ]
    #[ compile-fail-test c++1y : error/expose_multiple_times.cpp ]
    #[ compile-fail-test c++1y : error/expose_polymorphic_type_without_binding.cpp ]
    #[ compile-fail-test c++1y : error/inject_limit_out_of_range.cpp ]
    #[ compile-fail-test c++1y : error/injector_ctor_ambiguous.cpp ]
    #[ compile-fail-test c++1y : error/injector_shared_by_copy.cpp ]
    #[ compile-fail-test c++1y : error/make_injector_wrong_arg.cpp ]
    #[ compile-fail-test c++1y : error/named_paramater_spelling.cpp ]
    #[ compile-fail-test c++1y : error/policy_constructible.cpp ]
    #[ compile-fail-test c++1y : error/scope_traits_external_not_referable.cpp ]
#;

