#
# Copyright (c) 2012 Krzysztof Jusiak (krzysztof at jusiak dot net)
#
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#

import testing ;

project di :
    requirements
        <include>.
        <include>../include
        <library>/boost/test//boost_unit_test_framework/<link>static
        <warnings>all
        <cxxflags>-std=c++11
        <cxxflags>-Wno-unused-local-typedefs
        <cxxflags>-ftemplate-depth=1024
        <define>DDI_FUNCTION_ARITY_LIMIT_SIZE=4
        <define>BOOST_TEST_MODULE=di_test
        <define>BOOST_MPL_CFG_NO_PREPROCESSED_HEADERS
        <define>BOOST_MPL_LIMIT_VECTOR_SIZE=30
;

test-suite di-test :
    [ compile-fail detail/module_externals_mt_fail.cpp ]
    [ compile-fail detail/module_policy_mt_fail.cpp ]
    [ compile-fail policies/check_for_binding_correctness_ctor_mt_fail.cpp ]
    #[ compile-fail policies/check_for_binding_correctness_value_mt_fail.cpp ]
    [ compile-fail policies/check_for_creation_ownership_mt_fail.cpp ]
    [ compile-fail policies/check_for_circular_dependencies_mt_fail.cpp ]
    [ compile-fail injector_policy_mt_fail.cpp ]
    [ compile-fail injector_singleton_by_copy_mt_fail.cpp ]

    [ run concepts/dependency_ut.cpp ]
    [ run type_traits/create_traits_ut.cpp ]
    [ run type_traits/ctor_traits_ut.cpp ]
    [ run type_traits/is_same_base_of_ut.cpp ]
    [ run type_traits/make_plain_ut.cpp ]
    [ run type_traits/value_type_ut.cpp ]
    [ run detail/binder_ut.cpp ]
    [ run detail/creator_ut.cpp ]
    [ run detail/module_mt.cpp ]
    [ run detail/pool_ut.cpp ]
    [ run detail/visitor_ut.cpp ]
    [ run policies/check_for_binding_correctness_ut.cpp ]
    [ run policies/check_for_creation_ownership_ut.cpp ]
    [ run policies/check_for_circular_dependencies_ut.cpp ]
    [ run scopes/external_ut.cpp ]
    [ run scopes/per_request_ut.cpp ]
    [ run scopes/session_ut.cpp ]
    [ run scopes/singleton_ut.cpp ]
    [ run ctor_bracket_ut.cpp ]
    [ run ctor_va_args_ut.cpp ]
    [ run concepts_ut.cpp ]
    [ run fusion_module_ut.cpp ]
    [ run generic_module_ut.cpp ]
    [ run injector_mt.cpp ]
    [ run named_ut.cpp ]
;

