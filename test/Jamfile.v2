#
# Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
#
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#

import testing ;

project :
    requirements
        <include>.
        <include>../include
        <library>/boost/test//boost_unit_test_framework/<link>static
        <warnings>all
        <define>BOOST_TEST_MODULE=di_test
;

rule run-test ( std * : src : ctor * : defines * : force_bracket * ) {
    common_toolset = ;

    if $(std) {
        common_toolset +=
            <toolset>gcc:<cxxflags>"-std=$(std) -include common/config.hpp"
            <toolset>clang:<cxxflags>"-std=$(std) -include common/config.hpp"
            <toolset>intel:<cxxflags>"-std=$(std) -include common/config.hpp"
        ;
    }

    if $(ctor) {
        inject_macro = "\"BOOST_DI_INJECT(type, ...) = type(__VA_ARGS__)\"" ;
        if $(std) = c++03 || $(force_bracket) {
            inject_macro = "\"BOOST_DI_INJECT(type, args) = type args\"" ;
        }

        run $(src) : : : $(common_toolset) <define>$(inject_macro) $(defines) : $(ctor) ;
    } else {
        run $(src) : : : $(common_toolset) $(defines) ;
    }
}

rule compile-fail-test ( std * : src : ctor * : defines * : force_bracket * ) {
    common_toolset =
        <toolset>gcc:<cxxflags>"-std=$(std) -include common/config.hpp -Wfatal-errors"
        <toolset>clang:<cxxflags>"-std=$(std) -include common/config.hpp -Wfatal-errors"
        <toolset>intel:<cxxflags>"-std=$(std) -include common/config.hpp -Wfatal-errors"
    ;

    if $(ctor) {
        inject_macro = "\"BOOST_DI_INJECT(type, ...) = type(__VA_ARGS__)\"" ;
        if $(std) = c++03 || $(force_bracket) {
            inject_macro = "\"BOOST_DI_INJECT(type, args) = type args\"" ;
        }

        compile-fail $(src) : $(common_toolset) <define>$(inject_macro) $(defines) : $(ctor) ;
    } else {
        compile-fail $(src) : $(common_toolset) $(defines) ;
    }
}

test-suite "unit tests" :
    [ run-test c++11 : ut/concepts/dependency_ut.cpp ]
    [ run-test c++11 : ut/concepts_ut.cpp ]
    [ run-test c++11 : ut/named_ut.cpp ]

    [ run-test c++11 : ut/convertibles/copy_ut.cpp : convertible_copy_ut ]
    [ run-test c++11 : ut/convertibles/reference_ut.cpp : convertible_reference_ut ]
    [ run-test c++11 : ut/convertibles/shared_ut.cpp : convertible_shared_ut ]
    [ run-test c++11 : ut/convertibles/value_ut.cpp : convertible_value_ut ]

    [ run-test c++11 : ut/type_traits/create_traits_ut.cpp ]
    [ run-test c++11 : ut/type_traits/ctor_traits_ut.cpp ]
    [ run-test c++11 : ut/type_traits/ctor_traits_ut.cpp : cpp_11_ctor_traits_ut ]
    [ run-test c++03 : ut/type_traits/ctor_traits_ut.cpp : cpp_03_ctor_traits_ut ]
    [ run-test c++11 : ut/type_traits/has_ctor_ut.cpp ]
    [ run-test c++11 : ut/type_traits/is_same_base_of_ut.cpp ]
    [ run-test c++11 : ut/type_traits/make_plain_ut.cpp ]
    [ run-test c++11 : ut/type_traits/remove_accessors_ut.cpp ]
    [ run-test c++11 : ut/type_traits/scope_traits_ut.cpp ]

    [ run-test c++11 : ut/detail/binder_ut.cpp ]
    [ run-test c++11 : ut/detail/creator_ut.cpp ]
    [ run-test c++11 : ut/detail/pool_ut.cpp ]

    [ run-test c++11 : ut/policies/arguments_permission_ut.cpp ]
    #[ run-test c++11 : ut/policies/binding_correctness_ut.cpp ]
    [ run-test c++11 : ut/policies/circular_dependencies_ut.cpp ]
    [ run-test c++11 : ut/policies/creation_ownership_ut.cpp ]
    #[ run-test c++11 : ut/policies/scopes_permission_ut.cpp ]

    [ run-test c++11 : ut/scopes/external_ut.cpp : scope_external_ut ]
    [ run-test c++11 : ut/scopes/session_ut.cpp : scope_session_ut ]
    [ run-test c++11 : ut/scopes/shared_ut.cpp : scope_shared_ut ]
    [ run-test c++11 : ut/scopes/unique_ut.cpp : scope_unique_ut ]

    [ run-test c++11 : ut/inject_bracket_ut.cpp ]
    [ run-test c++11 : ut/inject_va_args_ut.cpp ]

    [ run-test c++11 : ut/injector_ut.cpp ]
    [ run-test c++11 : ut/injector_ut.cpp : ctor_injector_ut ]
;

test-suite "module tests" :
    [ run-test c++11 : mt/detail/module_mt.cpp ]
    [ run-test c++11 : mt/detail/module_mt.cpp : ctor_module_mt ]

    [ run-test c++11 : mt/injector_mt.cpp ]
    [ run-test c++11 : mt/injector_mt.cpp : ctor_injector_mt ]

    [ run-test c++11 : mt/make_injector_mt.cpp ]
    [ run-test c++11 : mt/make_injector_mt.cpp : ctor_make_injector_mt ]
    [ run-test c++11 : mt/injector_limit_size_mt.cpp : :
        <define>BOOST_DI_CTOR_LIMIT_SIZE=30
        <define>BOOST_MPL_LIMIT_VECTOR_SIZE=30
    ]
;

test-suite "functional tests" :
    [ run-test c++11 : ft/di_ft_cpp_11.cpp ]
    [ run-test c++11 : ft/di_ft_cpp_11.cpp : ctor_di_ft_cpp_11 ]

    [ run-test c++03 : ft/di_ft_cpp_03.cpp ]
    [ run-test c++03 : ft/di_ft_cpp_03.cpp : ctor_di_ft_cpp_03 ]

    [ run-test c++03 : ft/di_ft_cpp_tr1.cpp :                    : <define>BOOST_DI_TR1_SMART_PTR ]
    [ run-test c++11 : ft/di_ft_cpp_tr1.cpp : ctor_di_ft_cpp_tr1 : <define>BOOST_DI_TR1_SMART_PTR : force_bracket ]
;

test-suite "fail tests" :
    [ compile-fail-test c++11 : fail/detail/module_externals_fail.cpp ]
    [ compile-fail-test c++11 : fail/policies/arguments_permission_fail.cpp ]
    [ compile-fail-test c++11 : fail/policies/arguments_permission_fail.cpp : ctor_arguments_permission_fail ]
    #[ compile-fail-test c++11 : fail/policies/binding_correctness_fail.cpp ]
    #[ compile-fail-test c++11 : fail/policies/binding_correctness_ub_fail.cpp ]
    #[ compile-fail-test c++11 : fail/policies/circular_dependencies_fail.cpp ]
    #[ compile-fail-test c++11 : fail/policies/circular_dependencies_fail.cpp : ctor_circular_dependencies_fail ]
    [ compile-fail-test c++11 : fail/policies/creation_ownership_fail.cpp ]
    #[ compile-fail-test c++11 : fail/policies/scopes_permission_fail.cpp ]
    [ compile-fail-test c++11 : fail/injector_ctor_ambiguous_fail.cpp ]
    [ compile-fail-test c++11 : fail/injector_ctor_ambiguous_fail.cpp : ctor_injector_ctor_ambiguous_fail ]
    [ compile-fail-test c++03 : fail/injector_ctor_one_arg_fail_cpp_03.cpp ]
    [ compile-fail-test c++11 : fail/injector_shared_by_copy_fail.cpp ]
    [ compile-fail-test c++11 : fail/injector_shared_by_copy_fail.cpp : ctor_injector_shared_by_copy_fail ]
    [ compile-fail-test c++03 : fail/injector_lack_of_shared_ptr_fail.cpp :                                          : <define>BOOST_DI_TR1_SMART_PTR ]
    [ compile-fail-test c++03 : fail/injector_lack_of_shared_ptr_fail.cpp : ctor_injector_lack_of_shared_ptr_fail : <define>BOOST_DI_TR1_SMART_PTR ]
;

test-suite "performance tests" :
	[ run-test c++11 : pt/compilation_pt.cpp ] #ftime-report
;

