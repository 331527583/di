[/
 /
 / Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section Introduction]

[:['["Don't call us, we'll call you.]]]
[:*--Hollywood principle*]

[*[@http://en.wikipedia.org/wiki/Dependency_injection Dependency injection]] is a programming practice providing required instances to an object.
Following this approach has many advantages.

* [*Provide loosely coupled code] (Separation of business logic and object creation)
* [*Provide easier to maintain code] (Different objects might be easily injected)
* [*Provide easier to test code] (Fakes objects might be injected)

[table
[[No Dependency Injection][Dependency Injection]]
    [
        [
            ```
                class example {
                public:
                    example()
                        : logic_(new logic{})
                        , logger_(logger_factory::create())
                    { }

                    int run() const;

                private:
                    shared_ptr<ilogic> logic_;
                    shared_ptr<ilogger> logger_;
                };
            ```
        ]
        [
            ```
                class example {
                public:
                    // dependencies are passed via constructor
                    example(shared_ptr<ilogic> logic, shared_ptr<ilogger> logger)
                        : logic_(logic), logger_(logger)
                    { }

                    int run() const;

                private:
                    shared_ptr<ilogic> logic_;
                    shared_ptr<ilogger> logger_;
                };
            ```
        ]
    ]
]

`Boost.DI` is a `dependency injection library` improving `manual dependency injection` by simplifying object instantiation with automatic dependencies injection.
Using `Boost.DI` has many advantages over `manual dependency injection`.

* [*Reduce boilerplate code] (No factories, no objects creation in specific order)
* [*Reduce cost of maintenance effort] ([link di.examples.constructor_signature Constructor signature] change won't affect `di` configuration)
* [*Reduce testing effort]
* [*Give better control of what and how is created] (__policies__, __providers__)
* [*Give better understanding about objects hierarchy] (__examples_uml_dumper__)

[table
[[Manual Dependency Injection][`Boost.DI`]]
    [
        [
            ```
                int main() {
                    // boilerplate code
                    auto logic = make_shared<logic>();
                    auto logger = make_shared<logger>();

                    return example{logic, logger}.run();
                }
            ```
        ]
        [
            ```
                int main() {
                    auto injector = __di_make_injector__(
                        __di_bind__<ilogic, logic>
                      , __di_bind__<ilogger, logger>
                    );
                    return injector.__di_injector_create__<example>().run();                     .
                }
            ```
        ]
    ]
]

`Boost.DI` [*key] features.

* [*Type safe]
* [*Header only]
* [*Compile time creation guarantee] - no exceptions - if application compiles all dependencies will be be created accurately
* [*Exception safe strong guarantee]
* [*None or minimal run-time execution overhead] - [link di.performance.run_time Run-time performance]
* [*Fast compilation times] - [link di.performance.compile_time Compile-time performance]
* [*[link di.user_guide.injections.automatic Macro free]] - by default - no need to specify constructor traits or register anything
* [*[link di.user_guide.scopes.deduce Scopes deduction]] - [link di.user_guide.scopes scopes] are deduced based on type semantic
* [link di.user_guide.policies Policies] to limit [link di.user_guide.policies.constructible supported constructor parameters] or dump objects creation graph (__examples_uml_dumper__)
* Automatic conversion to boost smart pointers (if boost is available)
* Requires `C++14` compliant compiler

[heading See Also]
* [link di.motivation Motivation]
* [link di.overview Overview]
* [link di.tutorial Tutorial]
* [link di.quick_user_guide Quick user Guide]
* [link di.diagnostic_messages Diagnostic messages]
* [link di.performance Performance]
* [link di.user_guide User Guide]
* [link di.examples Examples]
* [link di.rationale Rationale]

[endsect]

