[/
 /
 / Copyright (c) 2012-2015 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section:introduction Introduction & Motivation]

[:['["Don't call us, we'll call you.]]]
[:*--Hollywood principle*]

[*[@http://en.wikipedia.org/wiki/Dependency_injection Dependency injection]] (DI) involves passing (injecting) one or more dependencies (or services) to a dependent object (or client) which become part of the clientâ€™s state. It is like the Strategy Pattern, except the strategy is set once, at construction. DI enables loosely coupled designs, which are easier to maintain and test.
Following this approach has many advantages.

[table
    [[Let's make some coffee!][No Dependency Injection][Dependency Injection]]
    [
        [[@images/coffee_maker.png [$images/coffee_maker.png]]]
        [
            ```
                class coffee_maker {
                public:
                    coffee_maker()
                      : heater{make_shared<electric_heater>()}
                      , pump{make_unique<heat_pump>(heater)}
                    { }

                    void brew() {
                        heater->on();
                        pump->pump();
                        clog << "coffee"! << endl;
                        heater->off();
                    }

                private:
                    shared_ptr<iheater> heater;
                    unique_ptr<ipump> pump;
                };
            ```
        ]
        [
            ```
                class coffee_maker {
                public:
                    coffee_maker(shared_ptr<iheater> heater, unique_ptr<ipump> pump)
                        : heater(heater)
                        , pump(move(pump))
                    { }

                    void brew() {
                        heater->on();
                        pump->pump();
                        clog << "coffee!" << endl;
                        heater->off();
                    }

                private:
                    shared_ptr<iheater> heater;
                    unique_ptr<ipump> pump;
                };
            ```
        ]
    ]
]

[h6 Why Dependency Injection?]

* [*Provide loosely coupled code] (separation of business logic and object creation)
* [*Provide easier to maintain code] (different objects might be easily injected)
* [*Provide easier to test code] (fakes objects might be injected)

[table
    [
        [[@http://www.youtube.com/watch?v=RlfLCWKxHJ0 [$http://img.youtube.com/vi/RlfLCWKxHJ0/0.jpg [width 75%] [height 75%] ]]]
        [[@http://www.youtube.com/watch?v=oK_XtfXPkqw [$http://image.slidesharecdn.com/nr73mexetqiybd1qpcem-140529143342-phpapp01/95/dependency-injection-for-android-5-638.jpg?cb=1401392113 [width 75%] [height 75%] ]]]
    ]
]

[h6 Why Boost.DI?]

* *Boost.DI has none or minimal run-time overhead* - [link di.performance.run_time Run-time Performance]
* *Boost.DI compiles fast* - [link di.performance.compile_time Compile-time Performance]
* *Boost.DI gives short diagnostic messages* - [link di.diagnostic_messages Diagnostic Messages]

* *Boost.DI guarantees compile time creation*
[table
    [[Manual Dependency Injection][Boost.DI]]
    [
        [
            ```
                class coffee_maker {
                public:
                    coffee_maker(unique_ptr<ipump> pump = nullptr);
                };

                int main() {
                    auto cm = coffee_maker cm{}; // pump is nullptr
                }
            ```
        ]
        [
            ```
                class coffee_maker {
                public:
                    coffee_maker(unique_ptr<ipump> pump = nullptr);
                };

                int main() {
                    auto injector = __di_make_injector__();
                    auto cm = injector.create<coffee_maker>(); // compile error: ipump not bound
                }
            ```
        ]
    ]
]

* *Boost.DI supports non-intrusive constructor injection*
[table
    [[Manual Dependency Injection][Boost.DI]]
    [
        [
            ```
                class coffee_maker {
                public:
                    coffee_maker(shared_ptr<iheater> heater, unique_ptr<ipump> pump);
                };

                int main() {
                    auto heater = make_shared<heater>();
                    auto pump = make_unique<pump>();
                    auto cm = coffee_maker cm{heater, move(pump)};
                }
            ```
        ]
        [
            ```
                class coffee_maker {
                public:
                    // no generation or constructor changes required
                    coffee_maker(shared_ptr<iheater> heater, unique_ptr<ipump> pump);
                };

                int main() {
                    auto injector = __di_make_injector__(
                        __di_bind__<iheater, heater>
                      , __di_bind__<ipump, pump>
                    );

                    auto cm = injector.create<coffee_maker>();
                }
            ```
        ]
    ]
]

* *Boost.DI reduces boilerplate code*
[table
    [[Manual Dependency Injection][Boost.DI]]
    [
        [
            ```
                int main() {
                   // has to be before pump
                   auto heater = shared_ptr<iheater>{
                       make_shared<electric_heater>()
                   };

                   // has to be after heater
                   auto pump = unique_ptr<ipump>{
                       make_unique<heat_pump>(heater)
                   };

                   coffee_maker cm{heater, move(pump)};
                   cm.brew();
                }
            ```
        ]
        [
            ```
                int main() {
                    auto injector = di::make_injector(
                        di::bind<ipump, heat_pump>
                      , di::bind<iheater, electric_heater>
                    );

                    auto cm = injector.create<coffee_maker>();
                    cm.brew();
                }
            ```
        ]
    ]
    [
        [
            ```
                int main() {
                   // has to be before pump
                   auto heater = shared_ptr<iheater>{
                       make_shared<electric_heater>()
                   };

                   // has to be before pump
                   // and after heater
                   auto grinder = unique_ptr<igrinder>{
                       make_unique<grinder>(heater)
                   };

                   // has to be after
                   // heater and grinder
                   auto pump = unique_ptr<ipump>{
                       make_unique<heat_pump>(
                           heater, grinder
                       )
                   };

                   coffee_maker cm{heater, move(pump)};
                   cm.brew();
                }
            ```
        ]
        [
            ```
                int main() {
                    auto injector = di::make_injector(
                        di::bind<ipump, heat_pump>
                      , di::bind<iheater, electric_heater>
                      , di::bind<igrinder, grinder> // new
                    );

                    auto cm = injector.create<coffee_maker>();
                    cm.brew();
                }
            ```
        ]
    ]
    [
        [
            ```
                int main() {
                   // has to be before pump
                   auto heater = shared_ptr<iheater>{
                       make_shared<electric_heater>()
                   };

                   // has to be after
                   // heater and grinder
                   auto pump = unique_ptr<ipump>{
                       make_unique<heat_pump>(
                           heater
                       )
                   };

                   // has to be before pump
                   // and after heater
                   auto grinder = unique_ptr<igrinder>{
                     make_unique<grinder>(heater, pump)
                   };

                   coffee_maker cm{heater, move(pump)};
                   cm.brew();
                }
            ```
        ]
        [
            *No changes!*
        ]
    ]
    [
        [
            ```
                int main() {
                   ...
                   auto grinder = unique_ptr<igrinder>{
                       make_unique<grinder>(pump, heater)
                   };
                   ...
                }
            ```
        ]
        [
            *No changes!*
        ]
    ]
]

* *Boost.DI reduces maintaining effort* (by automatic scopes deduction)
[table
    [[Manual Dependency Injection][Boost.DI]]
    [
        [
            ```
            ```
        ]
        [
            ```
            ```
        ]
    ]
]

* *Boost.DI supports conversion between boost smart pointers and std smart pointers*
[table
    [[Manual Dependency Injection][Boost.DI]]
    [
        [
            ```
                class coffee_maker {
                public:
                    coffee_maker(std::shared_ptr<iheater> heater, boost::shared_ptr<ipump> pump);
                };
            ```
        ]
        [
            ```
            ```
        ]
    ]
]

* *Boost.DI simplify testing*
[table
    [[Manual Dependency Injection][Boost.DI]]
    [
        [
            ```
                // create and maintain all required mocks
                auto heater_mock = create_heater_mock{};
                auto pump_mock = create_pump_mock{};

                // set expectations
                EXPECT_CALL(&ipump::pump);
                EXPECT_CALL(&iheater::on);
                EXPECT_CALL(&iheater::off);

                coffee_maker cm{heater_mock, pump_mock};
                cm.brew();
            ```
        ]
        [
            ```
                // create and maintain one mocks injector despite the number of required mocks
                auto mi = di::make_injector<mocks_provider>();

                // set expectations
                mi(&iheater::on);
                mi(&ipump::pump);
                mi(&iheater::off);

                auto cm = injector.create<coffee_maker>();
                cm.brew();
            ```
        ]
    ]
]

* *Boost.DI gives better control of what and how is created*
[table
    [[Manual Dependency Injection][Boost.DI]]
    [
        [
            ```
                ???
            ```
        ]
        [
            ```
                template<class>
                class allow_only_smart_ptrs : public di::config<> {
                public:
                    auto policies() const noexcept {
                        return di::make_policies(
                            constructible(is_smart_ptr<di::policies::_>{});
                    }
                };

                auto injector = di::make_injector();
                injector.create<int>(); // compile error
                injector.create<unique_ptr<int>>(); // okay
            ```
        ]
    ]
]

* *Boost.DI gives better understanding about objects hierarchy*
[table
    [[Manual Dependency Injection][Boost.DI][Output]]
    [
        [
            ```
                ???
            ```
        ]
        [
            ```
                injector = di::make_injector<types_dumper>();
                auto cm = injector.create<coffee_maker>();
            ```
        ]
        [
            ```
                (coffee_maker)
                    (shared_ptr<iheater> -> electric_heater)
                    (unique_ptr<ipump> -> heat_pump)
                        (shared_ptr<iheater> -> electric_heater)
            ```
        ]
    ]
    [
        [
            ```
                ???
            ```
        ]
        [
            ```
                injector = di::make_injector<uml_dumper>();
                auto cm = injector.create<coffee_maker>();
            ```
        ]
        [
            [@images/coffee_maker_uml.png [$images/coffee_maker_uml.png]]
        ]
    ]
]

[heading See Also]
* [link di.overview Overview]
* [link di.tutorial Tutorial]
* [link di.quick_user_guide Quick user Guide]
* [link di.diagnostic_messages Diagnostic messages]
* [link di.performance Performance]
* [link di.user_guide User Guide]
* [link di.examples Examples]
* [link di.rationale Rationale]

[include libraries.qbk]

[endsect]

