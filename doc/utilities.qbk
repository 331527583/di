[/
 /
 / Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section Utilities]

[heading Description]
Provides common `Boost.DI` functionality to be externally implemented.
`Boost.DI` is released with following utilities:

* __utilities_allocator__
* __utilities_provider__

[section allocator]

[heading Description]
Allocate and create objects. By default objects are allocated on heap using `new` operator.

[heading Synopsis]
    class allocator {
    public:
        template<typename TExpected, typename TGiven>
        typename disable_if<is_explicit<TGiven>, TExpected*>::type
        allocate() const;

        template<typename TExpected, typename TGiven>
        typename enable_if<type_traits::has_value<TGiven>, TExpected*>::type
        allocate() const;

        template<typename TExpected, typename TGiven>
        typename enable_if<is_mpl_string<TGiven>, TExpected*>::type
        allocate() const;

        template<typename TExpected, typename TGiven, typename... TArgs>
        TExpected* allocate(TArgs&&...) const;
    };

[table Parameters
    [[Parameter][Requirement][Description][Returns][Throw]]
    [[`TExpected`][None][Result type]]
    [[`TGiven`][None][Type to be created]]
    [[`TArgs...`][None][List of types to be constructed]]
    [[`allocate<TExpected, TGiven>()`][`TGiven` has no value and TGiven is not `mpl::string`][Returns allocated TGiven object][`TExpected`*][Does not throw]]
    [[`allocate<TExpected, TGiven>()`][`TGiven` has value][Returns allocated `TGiven::value` object][`TExpected`*][Does not throw]]
    [[`allocate<TExpected, TGiven>()`][`TGiven` is `mpl::string`][Returns result of `mpl::c_str<TGiven>::value` expression][`TExpected`*][Does not throw]]
    [[`allocate<TExpected, TGiven>(TArgs&&...)`][Otherwise][Returns allocated `TGiven` constructed with `TArgs...`][`TExpected`*][Does not throw]]
]

[heading Header]
    #include <boost/di.hpp>

[heading Examples]
    class allocator {
    public:
        template<typename TExpected, typename TGiven, typename... TArgs>
        TExpected* allocate(TArgs&&... args) const {
            return new TGiven(std::forward<TArgs>(args)...);
        }
    };

    assert(0 == __di_make_injector__().__di_injector_allocate__<int>(allocator()));

[heading More Examples]
    ``__examples_custom_allocator__``

[heading Tests]
    ``[@test/ut/core/allocator_ut.cpp]``

[heading See Also]

* __utilities_provider__

[endsect]

[section provider]

[heading Description]
With normal dependency injection, each type gets exactly one instance of each of its dependent types.
Sometimes it's required to get many different instances. Then providers become handy.
They create a new value whenever get() method is invoked.

[heading Synopsis]
    template<typename T>
    class provider {
    public:
        virtual ~provider() { }
        virtual T get() const = 0;
    };

[table Parameters
    [[Parameter][Requirement][Description][Returns][Throw]]
    [[`T`][None][Type to be provided]]
    [[`get()`][None][Returns type to be provided][`T` instance][Does not throw]]
]

[heading Header]
    #include <boost/di.hpp>

[heading Example]
    class provider : iprovider<int> {
    public:
        int get() const override {
            static int i = 0;
            return i++;
        }
    };

    class example {
    public:
        example(provider<int> p) {
            assert(p.get() != p.get());
        }
    };

[heading More Examples]
    ``__more_examples_provider__``

[heading Tests]
    ``[@test/ut/provider_ut.cpp]``

[heading See Also]

* __utilities_allocator__

[endsect]

[endsect]


