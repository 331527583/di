[/
 /
 / Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section Testing]

[section Automatic Mocks Injector]

`C++11` header only library providing following functionality:

* Automatically create required mocks
* Automatically inject mocks to tested classes via constructor
* Automatically register for required destructor's in case of smart pointers (supports testing of unique_ptr)
* Uses [@https://github.com/dascandy/hippomocks HippoMocks] as Mocking library

Example
```
#include <mocks_injector.hpp>

struct ilogger { virtual ~ilogger() { }; virtual void log(const std::string&) = 0; };
struct ilogic { virtual ~ilogic() { }; virtual void do_it() = 0; };

class example {
public:
    example(std::shared_ptr<ilogger> logger, const std::unique_ptr<ilogic>& logic)
        : logger_(logger), logic_(std::move(logic))
    { }

    void run() {
        logic_->do_it();
        logger_->log("hello world");
    }

private:
    std::shared_ptr<ilogger> logger_;
    std::unique_ptr<ilogic> logic_;
};

int main() {
    //1. create mocks injector
    auto mi = di::make_mocks_injector();

    //2. set up expectations
    EXPECT_CALL(mi, ilogic::do_it);
    EXPECT_CALL(mi, ilogger::log).With("hello world");

    //3. create example class and run it
    mi.create<example>().run(); // or mi.create<std::unique_ptr<example>>()->run();

    return 0;
}
```

[table
    [[Download: [@https://github.com/krzysztof-jusiak/mocks_injector.git]]]
]

[endsect]


[section Unit Tests]

For Unit Tests Dependency Injection Framework is not really needed.
It's enough that usage of Dependency Injection make possible to pass dependencies via constructor.
Thanks to that we can easily pass fakes and test our class in isolation.

```
    class example {
    public:
        example(std::shared_ptr<ilogic>, std::shared_ptr<ilogger>);

        void run() {
            logic_->do_it();
            logger_->log("hello world");
        }

        ...
    };
```

To test `example` we just need fakes for `ilogic`  and `ilogger` and pass them to constructor.

```
    void test_example() {
        auto logic_mock = std::make_shared<logic_mock>();
        auto logger_mock = std::make_shared<logger_mock>();

        example sut((logic_mock, logger_mock));

        EXPECT_CALL(*logic_mock, do_it());
        EXPECT_CALL(*logger_mock, log("hello world"));

        sut.run();
    }
```

That's it, Dependency Injection make unit-testing straight forward. Nevertheless to avoid
writing boilerplate code like below example (avoid factory for object and repetitions of mocks creation)...

```
    class example_test {
    public:
        void set_up() {
            logic_mock_.reset(new logic_mock());
            logger_mock_.reset(new logger_mock());
        }

        void tear_down() { }

        void test_example() {
            example sut((logic_mock_, logger_mock_));

            EXPECT_CALL(*logic_mock, do_it());
            EXPECT_CALL(*logger_mock, log("hello world"));

            sut.run();
        }

        std::shared_ptr<iloggic> logic_mock_;
        std::shared_ptr<ilogger> logger_mock;
    };
```

... we can take full advantage of `Boost.DI` and generate required mocks for us.

[note [@https://github.com/dascandy/hippomocks HippoMocks] was used as Mocking library.]

So our example might be refactored to.
```
    void test_example() {
        auto mi = di::make_mocks_injector();

        EXPECT_CALL(mi, ilogic::do_it);
        EXPECT_CALL(mi, ilogger::log).With("hello world");

        mi.create<example>().run();
    }
```

Above example has few advantages

* Is insensitive for constructor signature change (for example when `logic` and `logger` parameters order would be swapped)
* Allow to easily test smart pointers (verifying destruction call automatically) as well as allows to test `unique_ptr`
* Automatically manage mocks lifetime
* Less boilerplate code

To learn more about `Automatic Mocks Injector` see __examples_testing_automatic_mocks_injector__.

[endsect]

[section Integration Tests]

Integration tests usually will require building whole hierarchy of objects. However some fakes might be required
as well for example to fake data base calls. With `Boost.DI` we can achieve such functionality in few ways.

* Fake modules configuration

Example application configuration.
```
    class module_common {
    public:
        auto configure() const {
            return di::make_injector(
                di::bind<ilogger, logger>()
              , di::bind<idb, db>()
            );
        }
    };

    class module_controller {
    public:
        auto configure() const {
            return di::make_injector(
                di::bind<ilogic, logic>()
              , di::bind<iuser, user>()
            );
        }
    };

    int main() {
        di::make_injector(module_common(), module_controller()).create<app>();
        return 0;
    }
```

Testing module with fake `logger` and `db`, but original `logic` and `user`.
```
    class fake_module_common {
    public:
        auto configure() const {
            return di::make_injector(
                di::bind<ilogger, fake_logger>()
              , di::bind<idb, fake_db>()
            );
        }
    };

    void test_app() {
        auto sut = di::make_injector(module_controller(), fake_module_common()).create<app>();
        // test sut...
    }
```

* Write custom allocator which automatically inject fakes for specified components.

To achieve that we can use __examples_testing_automatic_mocks_injector__.
```
    void test_app() {
        auto mi = di::make_mocks_injector(
            module_controller() // bind originals
        );

        auto sut = mi.create<app>()
        // test sut...
    }
```

This way all dependencies will be faked, except specified in `module_controller`,
which in is this example means `ilogger` and `idb`.

[endsect]

[endsect]

