[/
 /
 / Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[def __BOOST_DI_INJECT [link di.reference.ctor `BOOST_DI_INJECT `]]

[section Concepts]

[section Constructor Injections]

[*Constructor Injection] is the most powerful of the available injections. It guarantee initialized state of data members.
In Boost.DI Constructor Injection is achieved without any additional work from the user except defining the constructor.

[section automatic (default)]
Boost.DI will deduce the best available constructor to be used for injection. See `Constructor Parameters Deduction` to read more.

```
class example {
public:
    example(int);
    example(int, double);
    example(int, double, float); // will be deduced by Boost.DI
};
```

If the default behavior should be changed is should explicitly marked using by adding `BOOST_DI_INJECT` to the constructor definition.

[note Boost.DI is not able to distinguish between ambiguous constructors with the same (longest) amount of parameters, then BOOST_DI_INJECT has to be used to point which constructor should be dedced]
[warning In C++03 constructors with one argument might be ambiguous with copy constructors, therefore is advised to use `BOOST_DI_INJECT` for 1 argument constructors in C++03.]

[endsect]

[section ctor_traits]
[endsect]

[section BOOST_DI_INJECT]

`BOOST_DI_INJECT` is a macro definition used to explicity say Boost.DI which constructor should be used.

[table
    [[Definition][Preprocessed]]
    [
        [
            ```
                #define BOOST_DI_INJECT(type, ...)              \
                    static void BOOST_DI_INJECTOR(__VA_ARGS__); \
                    type(__VA_ARGS__)
            ```
        ]
        [
            ```
                BOOST_DI_INJECT(explicit example, int = 0, double = 0.0);

                    void boost_di_injector__(int = 0, double = 0.0);
                    explicit example(int = 0, double = 0.0);
           ```
        ]
    ]
]

When class has more than one constructor Boost.DI will by default choose the one with
the longest parameter list. Then `BOOST_DI_INJECT` become handy to point which constructor
should be used.

```
class example {
public:
    example(int);
    BOOST_DI_INJECT(example, int, double); // will be chosen by Boost.DI
    example(int, double, float); // would be chosen by Boost.DI
};
```

[note In C++03 additional brackets are needed: `BOOST_DI_INJECT(example, (int, double))`]
[tip Requirement of brackets in BOOST_DI_INJECT might be switched with `BOOST_DI_CFG_INJECT_VA_ARGS` and `BOOST_DI_CFG_INJECT_BRACKET` ]

Sometimes we can't, in case of third party libraries, or just don't want to be so intrusive, then we can use constructor traits to define
which constructor should be deduced by DI.

[endsect]

[section BOOST_DI_INJECT_TRAITS]

`BOOST_DI_INJECT_TRAITS` is a macro definition used to define constructor traits.

[table
    [[Definition][Preprocessed]]
    [
        [
            ```
                #define BOOST_DI_INJECT_TRAITS(...) \
                    static void BOOST_DI_INJECTOR(__VA_ARGS__)
            ```
        ]
        [
            ```
                BOOST_DI_INJECT_TRAITS(int, double, float);

                    void boost_di_injector__(int, double, float);
           ```
        ]
    ]
]

Boost.DI defines `ctor_traits` in order to handle cases when constructor can't be
chosen using `BOOST_DI_INJECT` (useful for third party libraries).

```
namespace boost { namespace di {

template<>
struct ctor_traits<example> {
    BOOST_DI_INJECT_TRAITS(int, double, float);
};

}} // boost::di

```

[note BOOST_DI_INJECT_TRAITS might be also defined within the class, useful in case of named parameters]

[table
    [[Tests: [@test/ut/inject_va_args_ut.cpp] | [@test/ut/inject_bracket_ut.cpp]]]
]
[endsect]
[endsect]

[section Annotations]

[section named]
Named parameters are useful when constructor has more parameters of the same type.
```
    example(int value1, int value2);
```
In order to inject proper values into value and value2 they have to distinguish somehow.
Boost.DI solution for this are `named parameters`, which basically are just wrappers
for the type with automatic conversion to the based type.
```
    class my_name { };
    di::named<int, my_name> named_parameter;
    int i = named_parameter;
```

Named parameters are intrusive in a sens constructor has to be changed in order to support them.
It doesn't has to be the case when constructor traits are being used.
```
    class example {
    public:
        example(int value1, int value2);
    };

    class my_value1 { };
    class my_value2 { };

    namespace boost { namespace di {

    template<>
    struct ctor_traits<example> {
        BOOST_DI_INJECT_TRAITS(di::named<int, my_value1>, di::named<int, my_value2>);
    };

}} // boost::di
```
[table
    [[Tests: [@test/ut/named_ut.cpp]]]
]
[endsect]

[endsect]


[include scopes.qbk]

[section Bindings]

Binding in DI is done by DSL. The main purpose of binding DSL is to make easy things as easy
as possible whilst giving possibility to accomplish solutions for more complicated problems.
The glue between DSL and the core is dependency, so if you would like to write your own front end
the only thing which has to be in mind is to return list of dependencies.

```
template<
    typename TScope
  , typename TExpected
  , typename TGiven
  , typename TBind
>
class dependency;
```

[section bind]

```
template<typename If, typename Impl>
struct bind
    : concepts::dependency<scopes::deduce, If, Impl>
{ };
```

DSL released with the library allows you to bind:

* bind to interface
```
    di::bind<interface, implementation>
    di::bind<implementation>
```

* bind the same implementation to many interfaces
```
    di::bind<any_of<interface1, interface2, ..., interfaceN>, implementation>
```
[note The same might be achived with `bind<implementation>`]

* bind to compile time value
```
    di::bind_int<42>()
    di::bind_string<mpl::string<'str'>>
```

* bind to runtime value
```
    di::bind<int>::to(42)
    di::bind<std::string>::to("text");
```

* bind to external runtime value

    * to shared ptr
    ```
        di::bind<example>::to(make_shared<example>()) // bind to shared_ptr
    ```

    * to reference
    ```
        example example_;
        di::bind<example>::to(cref(example_)) // bind to const ref
        di::bind<example>::to(ref(example_)) // bind to ref
    ```

    * to functor
    ```
        di::bind<std::function<int()>>::to([]{ return 42; })
        di::bind<std::function<int()>>::to(boost::bind(&return_int, 42))
    ```

    * to functor factory
    ```
        di::bind<int>::to([]{ return 42; })
    ```

On top of binding to values user can bind to named parameters or using context.

* bind using named parameters
```
    class my_value { };
    class my_if { };

    stuct example {
        example(di::named<int, my_value> value, di::named<shared_ptr<interface>, my_if>);
    };

    di::bind_int<42>::named<my_value>()
    di::bind<int>::named<my_value>::to(42)

    di::bind<interface, implementation>::named<my_if>()
    di::bind<implementation>::named<my_if>()
```

* bind using call stack context
```
    call_stack<c1, c2, ..., cN> // call stack definition

    class c2 {
    public:
        c2(unique_ptr<interface>);
    };

    class c1 {
    public:
        c1(c2);
    };

    di::bind<interface, implementation>::when<call_stack<c1, c2>>()

```
[note `BOOST_DI_CFG_EXAMINE_CALL_STACK` has to be defined to enable this features]

* bind using call stack context and named parameters
```
    class c2 {
    public:
        c2(di::named<unique_ptr<interface>, my_if>);
    };

    class c1 {
    public:
        c1(c2);
    };

    // bind interface to implementation for named
    // parameter `my_if` when the class `c2` was created from class `c1`

    di::bind<interface, implementation>::named<my_if>::when<call_stack<c1, c2>>()
    di::bind<implementation>::named<my_if>::when<call_stack<c1, c2>>()
    di::bind<interface, implementation>::when<call_stack<c1, c2>>::named<my_if>()
    di::bind<implementation>::when<call_stack<c1, c2>>::named<my_if>()

    // all bindings above are equivalent
```

* bind using custom concept

Custom concepts requires `apply` class which should return compile time integer value.
Given value will influence how dependencies will be resolved. Current algorithm might
be found in `Design Rationale`.

```
struct longer_call_stack_first {
    template<typename TDependency>
    struct apply
        : mpl::size<typename TDependency::call_stack>
    { };
}
```

Then concept might be used with `when` binding afterwards.

```
    auto injector = di::make_injector(
        di::bind<int>::to(1)
      , di::bind<int>::when<longer_call_stack_first>::to(42)
    );

    struct example {
        explicit example(int i) : i(i){ };
        int i = 0;
    };

    assert(1 == injector.create<int>());
    assert(42 == injector.create<example>().i);
```
[table
    [[Tests: [@test/ut/concepts_ut.cpp] | [@test/ut/core/binder_ut.cpp]]]
]
[endsect]

[section bind_int]
[endsect]

[section bind_string]
[endsect]

[section scope]
[endsect]

[section deduce]
[endsect]

[section unique]
[endsect]

[section shared]
[endsect]

[section session]
[endsect]

[section call_stack]
[endsect]

[section any_of]
[endsect]

[endsect]

[section Injectors]

[section injector]
Injector is a component used for creating dependencies configuration using bindings.

* `create`
```
    template<typename T, typename... TPolicies>
    T create(const TPolicies&...);
```

* `allocate`
```
    template<typename T>
    T allocate(const allocator&, const TPolicies&...);
```

* `visit`
```
    template<typename T>
    void visit();
```

* `call`
```
    template<typename TAction>
    void call(const TAction&);
```
[table
    [[Tests: [@test/ut/injector_ut.cpp]]]
]

[endsect]

[section make_injector]
Injector might be created using `di::make_injector` or `di::injector type` it self.
Preferable option is to use di::make_injector because it allows to bind dynamic values.

[table
[[di::make_injector][di::injector]]
    [
        [
            ```
                auto injector = di::make_injector();
            ```
        ]
        [
            ```
                using injector_t = di::injector<>;
                auto injector = injector_t();
            ```
        ]
    ]

    [
        [
            ```
                auto injector = di::make_injector(
                    di::deduce<implementation>()
                );
            ```
        ]
        [
            ```
                using injector = di::injector<implementation>;
            ```
        ]
    ]
]

[table
    [[Tests: [@test/mt/make_injector_mt.cpp] | [@test/mt/injector_mt.cpp]]]
]
[endsect]

[endsect]

[section Modules]
Modules allow to split the configurations into smaller injectors.
Module is a class with `configure` method returning `injector` type.
```
    class module {
    public:
        auto configure() const {
            return di::make_injector(
                ...
            );
        }
    }
```
Activation of `Module` is done by passing it into injector.
[table
[[di::make_injector][di::injector]]
    [
        [
            ```
                auto injector = di::make_injector(module(), ...);
            ```
        ]
        [
            ```
                using injector = di::injector<module, ...>;
            ```
        ]
    ]
]

[tip Modules/Concepts/Types might be mixed whilst creating an injector, order is not important]

[endsect]

[section Utilities]

[section provider]
With normal dependency injection, each type gets exactly one instance of each of its dependent types.
Sometimes it's required to get many different instances. Then providers become handy.
They create a new value whenever get() method is invoked.

```
    template<typename T>
    class provider
    {
    public:
        virtual ~provider() { }
        virtual T get() const = 0;
    };
```

```
    class example {
    public:
        example(provider<int> p) {
            assert(p.get() != p.get());
        }
    };

    class provider : iprovider<int> {
    public:
        int get() const override {
            static int i = 0;
            return i++;
        }
    };
```
[table
    [[Example: [link boost_di.examples.provider provider]]]
]
[endsect]

[section allocator]
[endsect]

[endsect]

[include policies.qbk]

[endsect]

