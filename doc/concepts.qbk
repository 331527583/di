[/
 /
 / Copyright (c) 2012-2016 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section Concepts]

[heading Description]
Concepts are types constraints which ensure that only given types which are satisfied by the constraint will be allowed.
If type doesn't satisfy the concept short and descriptive error message is provided.

[heading See Also]

* __diagnostic_messages__

[section boundable]

[heading Description]
Bindings type requirement.

[heading Synopsis]
    template<class... TBindings>
    using boundable;

[table Parameters
    [[Parameter][Description][Returns]]
    [[`TBindings...`][Bindings to be verified][`true_type` if constraint is satisfied, `error type` otherwise]]
]

[table Error Types
    [[Example][Error][Description]]
    [
        [
            ```
                __di_make_injector__(
                    __di_bind__<int>.to(42)
                  , __di_bind__<int>.to(87) // error
                );
            ```
        ]
        [bound_type<T>::is_bound_more_than_once][when `T` is bound more than once]
    ]
    [
        [
            ```
                struct anything { };

                __di_make_injector__(
                    anything{} // error
                );
            ```
        ]
        [bound_type<T>::is_neither_a_dependency_nor_an_injector][when `T` is not a dependency nor an injector]
    ]
    [
        [
            ```
                __di_make_injector__(
                    __di_bind__<I, int> // error
                );
            ```
        ]
        [bound_type<I>::is_not_base_of<Impl>][when `I` is not base of `Impl`]

    ]
    [
        [
            ```
                __di_make_injector__(
                    __di_bind__<int>.to(42.0/*double*/) // error
                );
            ```
        ]
        [bound_type<I>::is_not_convertible_to<T>][when `I` is not convertible to `T`]
    ]
]

[heading Header]
    #include <__di_hpp__>

[heading Namespace]
    boost::di::concepts

[warning Concept is not supported by MSVC 2015.]

[heading See Also]

* __concepts_callable__
* __concepts_configurable__
* __concepts_creatable__
* __concepts_providable__
* __concepts_scopable__

[endsect]

[section callable]

[heading Description]
Callable type requirement (used by __policies__).

[heading Synopsis]
    template<class... TPolicies>
    using callable;

[table Parameters
    [[Parameter][Description][Returns]]
    [[`TPolicies...`][Policies to be verified][`true_type` if constraint is satisfied, `error type` otherwise]]
]

[table Error Types
    [[Example][Error][Description]]
    [
        [
            ```
                struct anything { };

                __di_make_policies__(
                    [](auto) {} // okay
                  , anything{} // error
                );
            ```
        ]
        [policy<T>::is_not_callable][when `T` doesn't satisfy calls: `T(any{})` or `T(any{}, TDependency{}, TCtor{}...)`]
    ]
    [
        [
            ```
                //TODO
            ```
        ]
        [policy<T>::is_not_configurable][only when called from __concepts_configurable__ concept and `T` is not callable]
    ]
]

[heading Header]
    #include <__di_hpp__>

[heading Namespace]
    boost::di::concepts

[warning Concept is not supported by MSVC 2015.]

[heading See Also]

* __concepts_boundable__
* __concepts_configurable__
* __concepts_creatable__
* __concepts_providable__
* __concepts_scopable__

[endsect]

[section configurable]

[heading Description]
Configuration type requirement.

[heading Synopsis]
    template<class T>
    using configurable;

[table Parameters
    [[Parameter][Description][Returns]]
    [[`T`][Config to be verified][`true_type` if constraint is satisfied, `error type` otherwise]]
]

[table Error Types
    [[Example][Error][Description]]
    [
        [
            ```
                struct config {
                    auto provider() const; // okay
                    auto Policies() const; // upper case `Policies()`
                };

                __di_make_injector__<config>(); // error
            ```
        ]
        [
            when `T` doesn't satisfy calls: `T{}.policies()` (return value has to satisfy __concepts_callable__)
            and `const T{}.provider()` (return value has to satisfy __concepts_providable__)
        ]
        [config_type<T>::is_not_configurable]
    ]
]

[heading Header]
    #include <__di_hpp__>

[heading Namespace]
    boost::di::concepts

[warning Concept is not supported by MSVC 2015.]

[heading See Also]

* __concepts_boundable__
* __concepts_callable__
* __concepts_creatable__
* __concepts_providable__
* __concepts_scopable__

[endsect]

[section creatable]

[heading Description]
Create type requirement (used by __di_injector__).

[heading Synopsis]
    template<class TInit, class T, class... TArgs>
    using creatable;

[table Parameters
    [[Parameter][Description][Returns]]
    [[`TInit`][Initialization (direct/uniform)]]
    [[`T`][Type to be created and verified]]
    [[`TArgs...`][Type constructor arguments]]
    [[][][`true_type` if constraint is satisfied, `error type` otherwise]]
]

[table Error Types
    [[Example][Error][Suggestion][Description]]
    [
        [
            ```
                struct I {
                    virtual ~I() noexcept = default;
                    virtual void dummy() = 0;
                };

                auto injector = __di_make_injector__();
                injector.create<unique_ptr<I>>(); // error
            ```
        ]
        [abstract_type<I>::is_not_bound][type not bound, did you forget to add: 'di::bind<interface, implementation>'?]
        [
            when interface `I` wasn't bound and can't be created
        ]
    ]
    [
        [
            ```
                struct I {
                    virtual ~I() noexcept = default;
                    virtual void dummy() = 0;
                };

                struct Example {
                    __di_inject_hpp__(Example, (__annotations_named__ = name) unique_ptr<I>);
                };

                auto injector = __di_make_injector__();
                injector.create<Example>(); // error
            ```
        ]
        [abstract_type<I>::named<Name>::is_not_bound][type not bound, did you forget to add: 'di::bind<interface, implementation>.named(name)'?]
        [
            when interface `I` wasn't bound and can't be created
        ]
    ]
    [
        [
            ```
                struct I {
                    virtual ~I() noexcept = default;
                    virtual void dummy() = 0;
                };

                struct Impl : I { };

                auto injector = __di_make_injector__(
                    __di_bind__<I, Impl>
                );

                injector.create<I>(); // error
            ```
        ]
        [abstract_type<I>::is_not_fully_implemented][type not implemented, did you forget to implement all interface methods?]
        [
            when interface `I` wasn't fully implemented and can't be created
        ]
    ]
    [
        [
            ```
                struct I {
                    virtual ~I() noexcept = default;
                    virtual void dummy() = 0;
                };

                struct Impl : I { };

                struct Example {
                    __di_inject_hpp__(Example, (__annotations_named__ = name) unique_ptr<I>);
                };

                auto injector = __di_make_injector__(
                    __di_bind__<I, Impl>
                );

                injector.create<Example>(); // error
            ```
        ]
        [abstract_type<I>::named<Name>::is_not_fully_implemented][type not implemented, did you forget to implement all interface methods?]
        [
            when interface `I` wasn't fully implemented and can't be created
        ]
    ]
    [
        [
            ```
                struct Example {
                    Example(int&);
                };

                auto injector = __di_make_injector__(
                    __di_bind__<int>.to(42) // lvalue
                );

                injector.create<Example>(); // error
            ```
        ]
        [when_creating<TParent>::type<T&>][reference type not bound, did you forget to add `auto value = ...; di::bind<T>.to(value)`]
        [
            when type `T` is a not bound reference
        ]
    ]
    [
        [
            ```
                struct Example {
                    __di_inject_hpp__(Example, (__annotations_named__ = name) int&);
                };

                auto injector = __di_make_injector__(
                    __di_bind__<int>.__annotations_named__(name).to(42) // lvalue
                );

                injector.create<Example>(); // error
            ```
        ]
        [when_creating<TParent>::named<Name>::type<T&>][reference type not bound, did you forget to add `auto value = ...; di::bind<T>.named(name).to(value)`]
        [
            when type `T` is a not bound reference
        ]
    ]
    [
        [
            ```
                struct Example {
                    Example(I&);
                };

                auto injector = __di_make_injector__(
                    __di_bind__<I, Impl>.in(__di_scopes_unique__)
                    // unique scope is not convertible to non const reference
                );

                injector.create<Example>(); // error
            ```
        ]
        [type<TSrc>::is_not_convertible_to<TDst>][wrapper is not convertible to requested type, did you mistake the scope?]
        [
            when type `T` is bound in scope which doesn't allow conversion to requested type (see __scopes__)
        ]
    ]
    [
        [
            ```
                struct Example {
                    __injections_boost_di_inject_traits__(int, double); // 2 args
                    Example(int); // 1 arg
                };

                auto injector = __di_make_injector__();
                injector.create<Example>(); // error, expected<1>::given<2>
            ```
        ]
        [number_of_constructor_arguments_doesnt_match_for<T>::expected<...>::given<...>][verify BOOST_DI_INJECT_TRAITS or di::ctor_traits]
        [
            when type `T` has constructor traits with different number of arguments
        ]
    ]
    [
        [
            ```
                #define BOOST_DI_CFG_CTOR_LIMIT_SIZE 5

                struct Example {
                    Example(int, int, int, int, int, int); // 6 args
                };

                auto injector = __di_make_injector__();
                injector.create<Example>(); // error, max<5>
            ```
        ]
        [number_of_constructor_arguments_is_out_of_range_for<T>::max<...>][increase BOOST_DI_CFG_CTOR_LIMIT_SIZE value or reduce number of constructor parameters]
        [
            when type `T` has more than [link di.user_guide.configuration BOOST_DI_CFG_CTOR_LIMIT_SIZE]
        ]
    ]
]

[heading Header]
    #include <__di_hpp__>

[heading Namespace]
    boost::di::concepts

[warning Concept is not supported by MSVC 2015.]

[heading See Also]

* __concepts_boundable__
* __concepts_callable__
* __concepts_configurable__
* __concepts_providable__
* __concepts_scopable__

[endsect]

[section providable]

[heading Description]
Provider type requirement.

[heading Synopsis]
    template<class T>
    using providable;

[table Parameters
    [[Parameter][Description][Returns]]
    [[`T`][Provider to be verified][`true_type` if constraint is satisfied, `error type` otherwise]]
]

[table Error Types
    [[Example][Error][Description]]
    [
        [
            ```
                struct Provider {
                    template<class I, class Impl, class... TArgs>
                    auto Get(direct/uniform, stack/heap, TArgs&&...); // upper case `Get`
                };

                struct config : __di_config__ {
                    auto provider() const {
                        return Provider{};
                    }
                };

                __di_make_injector__<config>(); // error
            ```
        ]
        [provider<T>::is_not_providable]
        [
            when `T` doesn't satisfy calls: `T{}.get<I, Impl>(direct{}/uniform{}, stack{}/heap{}, args...)`
            where `I`, `Impl` are types to be created and `args...` are arguments to be passed
            and `T{}::is_creatable<uniform/direct, stack/heap, TArgs...>`
        ]
    ]
]

[heading Header]
    #include <__di_hpp__>

[heading Namespace]
    boost::di::concepts

[warning Concept is not supported by MSVC 2015.]

[heading See Also]

* __concepts_boundable__
* __concepts_callable__
* __concepts_configurable__
* __concepts_creatable__
* __concepts_scopable__

[endsect]

[section scopable]

[heading Description]
Scope type requirement (used by __di_dependency__).

[heading Synopsis]
    template<class T>
    using scopable;

[table Parameters
    [[Parameter][Description][Returns]]
    [[`T`][Scope to be verified][`true_type` if constraint is satisfied, `std::false_type` otherwise]]
]

[table Error Types
    [[Example][Error][Description]]
    [
        [
            ```
                struct Scope {
                    template<class, class>
                    struct scope {
                        template<class T, class TProvider>
                        auto try_create(const TProvider&);

                        // template<class T, class TProvider>
                        // auto create(const TProvider&);
                    };
                };

                __di_make_injector__(
                    di::bind<int>.in(Scope{}).to(42) // error, no method `in` found to be called
                );
            ```
        ]
        [std::false_type]
        [
            when `T` doesn't satisfy calls: `T::scope<I, Impl>::create<TArg>(TProvider{})` and `T::scope<I, Impl>::try_create<TArg>(TProvider{})`
        ]
    ]
]

[heading Header]
    #include <__di_hpp__>

[heading Namespace]
    boost::di::concepts

[warning Concept is not supported by MSVC 2015.]

[heading See Also]

* __concepts_boundable__
* __concepts_callable__
* __concepts_configurable__
* __concepts_creatable__
* __concepts_providable__

[endsect]

[endsect]

