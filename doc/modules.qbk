[/
 /
 / Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section Modules]

[heading Description]
Modules allow to split the configurations into smaller injectors.
Module is a type with `configure` method returning `injector` type.
Activation of `Module` is done by passing it into injector.

[heading Synopsis `C++14`]
    class module {
    public:
        auto configure() const {
            return di::__injectors_make_injector__(...);
        }
    }

[heading Synopsis `C++11`]
    class module {
    public:
        auto configure() const -> decltype(di::__injectors_make_injector__(...)) {
            return di::__injectors_make_injector__(...);
        }
    }

[heading Synopsis `C++03`]
    class module {
        typedef di::__injectors_injector__<...> injector;

    public:
        injector configure() const {
            return injector(...);
        }
    }

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`x.configure()`][None][Returns `di::injector` object with configured dependencies]]
]

[heading Expression Semantics]
    di::__injectors_make_injector__(module())

[*Return type]: `di::injector<...>`

[heading Header]
    #include <boost/di.hpp>

[heading Examples]
    class module_cpp_14 {
    public:
        auto configure() const {
            return di::__injectors_make_injector__(
                di::__bindings_bind__<interface, implementation>()
            );
        }
    };

    class module_cpp_11 {
    public:
        auto configure() const -> decltype(di::__injectors_make_injector__(di::bind_int<42>())) {
            return di::__injectors_make_injector__(
                di::__bindings_bind__<int>::to(42)
            );
        }
    };

    class module_cpp_03 {
    public:
        typedef di::__injectors_injector__<
            di::__bindings_bind_bind_bool__<true>
          , BOOST_TYPEOF_TPL(di::__bindings_bind__<long>::to(long()))
        >;

        injector_t configure() const {
            return injector_t(di::__bindings_bind__<long>::to(87l)); // order of passed binding is not important
        }
    };

    auto injector = di::__injectors_make_injector__(
        module_cpp_03(), module_cpp_11(), module_cpp_14()
        // module_cpp_14(), module_cpp_03(), module_cpp_11() // order of passed modules is not important
    );

    assert(dynamic_cast<implementation*>(injector.create<unique_ptr<interface>>().get()));
    assert(42 == injector.create<int>());
    assert(87l == injector.create<long>());
    assert(true == injector.create<bool>());

[tip `__modules__/__bindings__/Types` might be mixed whilst creating an injector, order is not important.]

[heading More Examples]
    ``__examples_modules__``

[heading Tests]
    ``[@test/mt/injector_mt.cpp]`` | ``[@test/mt/make_injector_mt.cpp]``

[heading See Also]

* __injectors__
* __injectors_injector__
* __injectors_make_injector__

[endsect]

