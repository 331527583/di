[/
 /
 / Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section Modules]

[heading Description]
Modules allow to split the configuration into smaller injectors.
Module is a type with `configure` method returning __injectors_injector__ type.
Activation of `Module` is done by passing it into injector.

[heading Synopsis]
    class module {
    public:
        auto configure() const noexcept {
            return __di_make_injector__(...);
        }
    };

    class exposed {
    public:
        __di_injector__<interface> configure() const noexcept {
            return __di_make_injector__(...);
        }
    };

[table Parameters
    [[Parameter][Requirement][Description][Returns][Throw]]
    [[`configure()`][None][Create bindings configuration][__di_make_injector__<...>][Does not throw]]
]

[heading Expression Semantics]
    __di_make_injector__(module{})

[*Return type]: `__di_injector__<...>`

[heading Header]
    #include <__di_hpp__>

[heading Examples]
[table
[[Module][]]
    [
        [
            ```
            struct c {
                c(unique_ptr<i1> i1
                , unique_ptr<i2> i2
                , int i) : i1(move(i1)), i2(move(i2)), i(i)
                { }

                unique_ptr<i1> i1;
                unique_ptr<i2> i2;
                int i = 0;
            };

            struct module1 {
                auto configure() const noexcept {
                    return __di_make_injector__(
                        __di_bind__<i1, impl1>
                      , __di_bind__<int>.to(42)
                    );
                }
            };

            struct module2 {
                auto configure() const noexcept {
                    return __di_make_injector__(
                        __di_bind__<i2, impl2>
                    );
                };
            };

            auto injector = __di_make_injector__(
                module1{}, module2{}
            );
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<unique_ptr<c>>();
            assert(dynamic_cast<impl1*>(object->i1.get()));
            assert(dynamic_cast<impl2*>(object->i2.get()));
            assert(42 == object->i);

            auto up1 = injector.create<unique_ptr<i1>>();
            assert(dynamic_cast<impl1*>(up1.get()));

            auto up2 = injector.create<unique_ptr<i2>>();
            assert(dynamic_cast<impl2*>(up2.get()));
            ```
        ]
    ]
]

[table
[[Exposed type module][]]
    [
        [
            ```
            struct c {
                c(shared_ptr<i1> i1
                , shared_ptr<i2> i2
                , int i) : i1(i1), i2(i2), i(i)
                { }

                shared_ptr<i1> i1;
                shared_ptr<i2> i2;
                int i = 0;
            };

            struct module {
                __di_injector__<c> configure() const noexcept;

                int i = 0;
            };

            __di_injector__<c> // expose c
            module::configure() const noexcept {
                return __di_make_injector__(
                    __di_bind__<i1, impl1>
                  , __di_bind__<i2, impl2>
                  , __di_bind__<int>.to(i)
                );
            }

            auto injector = __di_make_injector__(
                module{42}
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<c>();
            assert(dynamic_cast<impl1*>(object.i1.get()));
            assert(dynamic_cast<impl2*>(object.i2.get()));
            asert(42 == object.i);

            // injector.create<unique_ptr<i1>>() // compile error
            // injector.create<unique_ptr<i2>>() // compile error
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Exposed many types module][]]
    [
        [
            ```
            struct module {
                __di_injector__<i1, i2> configure()
                const noexcept;

                int i = 0;
            };

            __di_injector__<i1, i2> // expose i1, i2
            module::configure() const noexcept {
                return __di_make_injector__(
                    __di_bind__<i1, impl1>
                  , __di_bind__<i2, impl2>
                );
            }

            auto injector = __di_make_injector__(
                module{}
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto up1 = injector.create<unique_ptr<i1>>();
            assert(dynamic_cast<impl1*>(up1.get()));

            auto up2 = injector.create<unique_ptr<i2>>();
            assert(dynamic_cast<impl2*>(up2.get()));
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Exposed type module with annotation][]]
    [
        [
            ```
            auto my = []{};

            struct c {
                __injections_boost_di_inject__(c
                  , (__annotations_named__ = my) unique_ptr<i1> up)
                  : up(up)
                { }

                unique_ptr<i1> up;
            };

            __di_injector__<i1> module =
                __di_make_injector__(
                    __di_bind__<i1, impl1>
                );

            auto injector = __di_make_injector__(
                __di_bind__<i1>.__annotations_named__(my).to(module)
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<unique_ptr<c>>();
            assert(dynamic_cast<impl1*>(object->up.get()));
                                                                                                                       .
            ```
        ]
    ]
]

[tip `__modules__/__bindings__` might be mixed whilst creating an injector, order is not important.]

[heading More Examples]
    ``__examples_modules__`` | ``__examples_modules_hpp_cpp__``

[heading See Also]

* __injector__
* __injector_make_injector__

[endsect]

