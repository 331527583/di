[/
 /
 / Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section Policies]

Policies are compile time components which operates on dependencies in order to limit allowed behaviour.
Policy has to have `assert_policy` method defined.

```
class policy {
public:
    template<typename TDependency>
    void assert_policy() const;
};
```

In order for `injector` to verify policies they have to be passed to `create` method call.
```
    di::make_injector().create<int>(policy1(), policy2(), ..., policyN());
```

[table
    [[Example policy: [@example.cpp]]]
]

Boost.DI is released with policies which verifies `parameter permission`, check for `circular dependencies`, assert `creation ownership` and allow `scope permission`.
[note No policies are enabled by default using Boost.DI]

[section Parameters Permission]

By default no parameters are allowed.

Synopsis
```
    di::scopes::parameter_permission<Allowances...>
```

* allow_smart_ptrs
* allow_copies
* allow_refs
* allow_const_refs
* allow_rvalue_refs
* allow_ptrs

```
    di::injector<parameters_permission<>>().create<int>(); // compile error
    di::injector<parameters_permission<allow_copies>>().create<int>(); // compile ok
    di::injector<parameters_permission<allow_copies, allow_ptrs>>().create<int*>(); // compile ok
```
[table
    [[Tests: [@test/ut/policies/parameters_permission_ut.cpp]]]
]
[warning Parameters Permission Policy is not supported by Microsoft Visual Studio]
[endsect]

[section Circular Dependencies]
`Circular Dependencies` policy verify if constructor parameters aren't overlapping.
```
    struct cd2;
    struct cd1 { cd1(cd2*); };
    struct cd2 { cd2(cd1*); };

    di::make_injector().create<cd1>(); // compile error
```
[note Requires BOOST_DI_CFG_EXAMINE_CALL_STACK to be defined]
[table
    [[Tests: [@test/ut/policies/circular_dependencies_ut.cpp]]]
]
[endsect]

[section Creation Ownership]
`Creation Ownership` policy limit creation types to copies/pointers/smart pointers and disallow references.
```
    di::make_injector().create<const int&>(); // compile error
    di::make_injector().create<int&>(); // compile error
    di::make_injector().create<int>(); // compile ok
```
[table
    [[Tests: [@test/ut/policies/creation_ownership_ut.cpp]]]
]
[endsect]

[section Scopes Permission]
`Creation Ownership` policy limit allowed scopes to be used whilst binding.
By default no scopes are allowed.

Synposis
```
    scopes_permission<allow_scope<Scope>...>
```

Allowed scopes:
    * allow_scope<scopes::unique<>>
    * allow_scope<scopes::shared<>>
    * allow_scope<scopes::session<>>
    * allow_scope<scopes::external<>>

[note Scope verfication happens after scope is deduced, therefore allow_scope<scopes::deduce> is not supported]

Example:

```
scopes_permission<>
bind<deduce<int>> // compile error

scopes_permission<allow_scope<scopes::unique>>
bind<unique<int>> // compile ok
```
[table
    [[Tests: [@test/ut/policies/scopes_permission_ut.cpp]]]
]
[endsect]

[endsect]

