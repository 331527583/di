[section Overview]

"Don't call us, we'll call you", Hollywood principle

DI is C++03/C++11 header only library providing compile time, macro free constructor dependency injection functionality.

Features

* Header only library
* Architecture independent (tested on x86/x86\_64)
* Supports all POSIX and Windows operating systems (tested on Linux/Windows/Mac/Darwin)
* Supports C++03/C++11 standard
* Exception safe guaranty
* Thread safe guaranty
* Constructor injection (macro free)
* Compile time creation guaranty
* Compile time policies (arguments permission, binding correctness, circular dependencies, creation ownership, scopes permission)
* Dependencies life time management (scopes: deduce, external, unique, shared, session + custom scopes)
* Scope deduction (shared\_ptr -> shared, unique\_ptr, lvalue -> unique, ...)
* Supports copies, references, pointers, boost and std smart pointers / rvalue references(C++11)
* Named parameters (named\<int, my\_int\>)
* Runtime visitor throughout created objects (useful for generation dependency diagrams)

Dependencies

* Boost.Bind
* Boost.Config
* Boost.Detail
* Boost.Function
* Boost.MPL
* Boost.Preprocessor
* Boost.Ref
* Boost.Smart_Ptr
* Boost.Typeof
* Boost.Type_Traits
* Boost.Utility

Configuration
    BOOST_MPL_LIMIT_VECTOR_SIZE
    BOOST_DI_CTOR_CFG_VA_ARGS || BOOST_DI_CTOR_CFG_BRACKET
    #define BOOST_DI_CONSTRUCTOR boost_di_constructor__
    #define BOOST_DI_CREATE boost_di_create__

Tested Compilers

[/
[link di.supported_compilers]
/]

[endsect]

