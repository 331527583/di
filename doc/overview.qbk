[section Overview]

[section Features]

What is so unique about this library?

* Compile time approach - no exceptions - if application compiles all dependencies will be be created accurately
* Macro free - no need to specify constructor traits or register anything (less intrusive)
* Scopes deduction - scopes are deduced based on type semantic
* Automatic conversion between std/boost smart pointers
* Compile time policies - ex. to detect circular dependencies or limit supported types only to specified
* Supports C++03 / C++11 / C++14 standards

Main features:

* Header only library
* Architecture independent (tested on x86/x86-64)
* Supports all POSIX and Windows operating systems (tested on Linux/Windows/Mac/Darwin)
* Supports C++03/C++11 standard
* Exception safe guaranty
* Thread safe guaranty
* Constructor injection (macro free)
* Compile time creation guaranty
* Compile time policies (arguments permission, binding correctness, circular dependencies, creation ownership, scopes permission)
* Dependencies life time management (scopes: deduce, external, unique, shared, session + custom scopes)
* Scope deduction (shared\_ptr -> shared, unique\_ptr, lvalue -> unique, ...)
* Supports copies, references, pointers, boost and std smart pointers / rvalue references(C++11)
* Named parameters (named\<int, my\_int\>)
* Runtime visitor throughout created objects (useful for generation dependency diagrams)

[endsect]

[section Dependencies]

* Boost.Bind
* Boost.Config
* Boost.Detail
* Boost.Function
* Boost.MPL
* Boost.Preprocessor
* Boost.Ref
* Boost.Smart_Ptr
* Boost.Typeof
* Boost.Type_Traits
* Boost.Utility

[endsect]

[section Supported Compilers]

Boost.DI was sucessfuly test on below compilers

* Linux (x86/x86-64)
   * Clang 3.2/3.3/3.4/3.4.1 (clean with Clang Static Analyzer and Valgrind)
   * GCC 4.7.3/4.8.2/4.9.0 (clean with Valgrind)
   * Intel C++ 14.0.3 (clean with Valgrind)

* Windows (x86/x86-64)
   * MinGW 4.7.3/4.8.2
   * Visual Studio 2013 (clean with DrMemory)

* Darwin/Mac OS (x86-64)
   * Clang 503.0.40 (Apple LLVM version 5.1)

[note Older compilers might be supported, but weren't tested and probably can't be tested properly due to requirements of C++ 11 features by the tests.]

[endsect]

[section Configuration]

The macros listed in the table below may be used to control the behaviour of Boost.DI.

[table
  [[Macro][Description]]
  [
    [`BOOST_DI_CFG_NO_PREPROCESSED_HEADERS`]
    [ default: `enabled` ]
  ]
  [

    [`BOOST_DI_CFG_CTOR_LIMIT_SIZE`]
    [ default: `10` ]
  ]

  [
    [`BOOST_DI_CFG_EXAMINE_CALL_STACK`]
    [ default: `disabled` ]
  ]

  [
    [`BOOST_DI_CFG_INJECT_VA_ARGS`]
    [ default: `enabled when C++11`]
  ]

  [
    [`BOOST_DI_CFG_INJECT_BRACKET`]
    [ default: `enabled when C++03`]
  ]

  [
    [`BOOST_DI_CFG_STD_SMART_PTR`]
    [ default: `enabled if supported by compiler`]
  ]

  [
    [`BOOST_DI_CFG_BOOST_SMART_PTR`]
    [ default: `enabled if std smart ptr aren't supported by compiler`]
  ]

  [
    [`BOOST_DI_INJECTOR`]
    [ default: `boost_di_injector__`]
  ]
]

[endsect]

[section Continuous Integration]

[@https://travis-ci.org/krzysztof-jusiak/di [$https://travis-ci.org/krzysztof-jusiak/di.svg?branch=master [format PNG]]]
[@https://ci.appveyor.com/project/krzysztof-jusiak/di [$https://ci.appveyor.com/api/projects/status/1il4knxh7tq9o5ic [format PNG]]]
[@https://coveralls.io/r/krzysztof-jusiak/di?branch=master [$https://coveralls.io/repos/krzysztof-jusiak/di/badge.png?branch=master [format PNG]]]

[endsect]

[endsect]

