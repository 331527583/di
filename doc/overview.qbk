[/
 /
 / Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section Overview]

`Boost.DI` is `C++03`/`C++11`/`C++14` header only, type safe, library providing compile time, macro free constructor dependency injection.

[h6 Features]

* Type safe
* Header only library
* Architecture independent (tested on x86/x86-64)
* Supports all POSIX and Windows operating systems (tested on Linux/Windows/Mac/Darwin)
* Supports `C++03`/`C++11`/`C++14` standards
* Exception safe guaranty
* Thread safe guaranty
* Constructor injection (macro free)
* Compile time creation guaranty
* Compile time policies (arguments permission, binding correctness, circular dependencies, creation ownership, scopes permission)
* Dependencies life time management (scopes: deduce, external, unique, shared, session + custom scopes)
* Scope deduction (shared\_ptr -> shared, unique\_ptr, lvalue -> unique, ...)
* Supports copies, references, pointers, boost and std smart pointers / rvalue references(C++11)
* Named parameters (named\<int, my\_int\>)
* Runtime visitor throughout created objects (useful for generation dependency diagrams)

Although library supports `C++03` and `C++11`, only `C++14` shows the full potential of `Boost.DI`.
To achieve the same behaviour with previous standards sometimes will just require a bit more hassle.

[h6 Dependencies]

* Boost.Bind
* Boost.Config
* Boost.Detail
* Boost.Function
* Boost.MPL
* Boost.Preprocessor
* Boost.Ref
* Boost.Smart_Ptr
* Boost.Typeof
* Boost.Type_Traits
* Boost.Utility

[h6 Supported Compilers]

`Boost.DI` was successfully test on below compilers

* Linux (x86/x86-64)
   * Clang 3.2/3.3/3.4/3.4.2 (clean with Clang Static Analyzer and Valgrind)
   * GCC 4.7.3/4.8.2/4.9.0 (clean with Valgrind)
   * Intel C++ 14.0.3 (clean with Valgrind)

* Windows (x86/x86-64)
   * MinGW 4.7.3/4.8.2
   * Visual Studio 2013 (clean with DrMemory)

* Darwin/Mac OS (x86-64)
   * Clang 503.0.40 (Apple LLVM version 5.1)

[note Older compilers might be supported, but weren't tested and probably can't be tested properly due to requirements of C++11 features by the tests.]

[h6 Restrictions]

See [link Notes] for further information.

[table
  [[Issue][GCC][Clang][Intel][Visual Studio]]
  [[Rvalue References][supported][supported][supported][not supported]]
  [[std::function/boost::function][supported][supported][supported][supported (boost::function supported when pass by const reference)]]
  [[Arguments Permission Policy][supported][supported][supported][not supported]]
]

[table
  [[Feature][`C++03`][`C++11`][`C++14`]]
  [[Automatic Constructor Injection][supported, except constructor with 1 parameter][supported][supported]]
  [[`BOOST_DI_INJECT`/`BOOST_DI_INJECT_TRAITS`/`ctor_traits`][supported][supported][supported]]
]

[h6 Recommendations]

`Boost.DI` supports variety of compilers and standards. Not all features are supported the same way or in general
by all of them. Below table shows recommendations (based on testing) what to be careful about whilst using
a specific combination.

[table
  [[Standard][Compiler][Recommendation]]
  [[`C++14`][`Visual Studio 12.0`]
  [
    * `Modules::configure()` harder syntax
    * Rvalue references aren't supported
    * Policy `arguments_permission` not supported
  ]]
  [[`C++03`][`GCC >= 4.7`, `Clang >= 3.2`]
  [
    * `Boost.Typeof` has to be used
    * `Modules::configure()` harder syntax
    * `Automatic Constructor Injection` doesn't work with 1 parameter constructors
  ]]
  [[`C++11`][`GCC >= 4.7`, `Clang >= 3.2`]
  [
    * `Modules::configure()` harder syntax
  ]]
  [[`C++14`][`Clang >= 3.4`, `GCC >= 4.9`]
  [
    * Go for it!
  ]]
]

[h6 Installation]
`Boost.DI` is header only library and doesn't require building.
To start using library just include `Boost.DI` header.
```
    #include <boost/di.hpp>
```

[h6 Configuration]

The macros listed in the table below may be used to control the behaviour of `Boost.DI`.

[table
  [[Macro][Description]]
  [
    [`BOOST_DI_CFG_NO_PREPROCESSED_HEADERS`]
    [
        `Boost.DI` by default uses preprocessed headers. See `Compilation time` for further specification.
        To explicitly disable preprocessed headers `BOOST_DI_CFG_NO_PREPROCESSED_HEADERS` has to be defined.

        default: `enabled`
    ]
  ]

  [
    [`BOOST_DI_CFG_STD`]
    [
        Defines which compiler features will be used. When `cpp_11` below features will be used:
        [pre
* variadic templates
* function template default arguments
* rvalue references and perfet forwarding
* decltype
        ]
        Configuration affects `preprocessed headers`, which are generated for both configurations.
        default: `cpp_11 when C++11 cpp_03 otherwise`
    ]
  ]

  [
    [`BOOST_DI_CFG_CTOR_LIMIT_SIZE`]
    [
        Constructor injection is limited by `BOOST_DI_CFG_CTOR_LIMIT_SIZE`, which means that constructor can't
        have more parameters then defined in order for `Boost.DI` to works correctly. Value might be redefined
        to any number, the only repercussion will be longer compilation times. Might be used as well to limit
        clients from having long parameter list constructors.

        default: `10`
    ]
  ]

  [
    [`BOOST_DI_CFG_EXAMINE_CALL_STACK`]
    [
        Context concepts (`when` syntax) have to be explicitly turned on using `BOOST_DI_CFG_EXAMINE_CALL_STACK`. Reason being
        much longer compilation times.

        default: `disabled`
    ]
  ]

  [
    [`BOOST_DI_CFG_INJECT_VA_ARGS`]
    [
        `BOOST_DI_INJECT(ctor, arg1, arg2, ..., argN)`

        default: `enabled when C++11`
    ]
  ]

  [
    [`BOOST_DI_CFG_INJECT_BRACKET`]
    [
        `BOOST_DI_INJECT(ctor, (arg1, arg2, ..., argN))`

        default: `enabled when C++03`
    ]
  ]

  [
    [`BOOST_DI_CFG_STD_SMART_PTR`]
    [
        Default `smart pointer` type is set accordingly to compiler support, but
        might standard smart pointers might be forced by `BOOST_DI_CFG_STD_SMART_PTR`.
        Then `Boost.DI` internally will use standard smart pointers instead of boost smart
        pointers. Additionally conversion to weak_ptr is only allowed from default `smart pointer type`.

        default: `enabled if supported by compiler`
    ]
  ]

  [
    [`BOOST_DI_CFG_BOOST_SMART_PTR`]
    [
        Analogously as `BOOST_DI_CFG_STD_SMART_PTR`, but with boost smart pointers to be chosen.

        default: `enabled if std smart ptr are not supported by compiler`
    ]
  ]

  [
    [`BOOST_DI_INJECTOR`]
    [
        Named used internally by `Boost.DI` when `BOOST_DI_INJECT` or `BOOST_DI_INJECT_TRAITS` is used
        to define constructor traits.

        default: `boost_di_injector__`
    ]
  ]

  [
    [`BOOST_MPL_LIMIT_VECTOR_SIZE`]
    [
        Number of allowed bindings is limited by Boost.MPL vector size.

        default: 20 (defined by Boost.MPL)
    ]
  ]

]

[h6 Notes]

[#Notes]
* Ambiguous constructors with the same - longest - number of parameters
[table
    [[Issue][Solution]]
    [
        [
            ```
                                                                      .
            struct example {
                explicit example(int);
                example(int, double);
                example(int, double, float); // ambiguity
                example(int, float, double); // ambiguity
            };
            ```
        ]
        [
            ```
                                                                                                         .
            use BOOST_DI_INJECT to point which constructor should be chosen by Boost.DI
                struct example {
                    explicit example(int);
                    example(int, double);
                    example(int, double, float);
                    BOOST_DI_INJECT(example, int, float, double);
                };
            ```
        ]
    ]
]

* Constructor with variadic number of parameters
[table
    [[Issue][Solution]]
    [
        [
            ```
                                                                      .
            struct example {
                template<typename... TArgs>
                explicit example(TArgs&&...);
            };
            ```
        ]
        [
            ```
                                                                                                         .
            use BOOST_DI_INJECT_TRAITS to define the constructor
                namespace boost { namespace di {
                    template<>
                    struct ctor_traits<example> {
                        BOOST_DI_INJECT_TRAITS(int, double); // or in definition of the class
                    };
                }} // boost::di
            ```
        ]
    ]
]


* Copy constructors
[table
    [[Issue][Solution]]
    [
        [
            ```
                                                                      .
            struct example {
                example(const example&);
                example(int); // ambiguous in c++03
            };
            ```
        ]
        [
            ```
                                                                                                         .
            In C++11 copy constructors ambiguity might be disabled using default template parameters
                template<
                    typename U
                  , typename = typename disable_if<is_same_base_of<T, U>>::type
                >
                operator U();

            In C++03 constructor has to be explicitly pointed out
            struct example {
                example(const example&);
                BOOST_DI_INJECT(example, (int)); // ok in c++03
            };

            Or by adding dummy parameter to the constructor
            struct example {
                example(const example&);
                example(int, int = 0); // ok in c++03
            };
            ```
        ]
    ]
]

* Constructor with non-copyable types
[table
    [[Issue][Solution]]
    [
        [
            ```
                                                                      .
            struct example {
                 // moveable types are supported
                example(std::auto_ptr<int>, std::unique_ptr<int>);
            };
            ```
        ]
        [
            ```
                                                                                                         .
            struct any_type {
                template<typename U> operator U();
                template<typename U> operator aux::auto_ptr<U>&(); // for std::auto_ptr
            };
            ```
        ]
    ]
]

* Constructor with types which have `conversion constructor`
[table
    [[Issue][Solution]]
    [
        [
            ```
                                                                      .
            template<typename>
            struct example {
                template<typename T>
                example(T);
            };

            struct app {
                app(example<int>);
            };
            ```
        ]
        [
            ```
                                                                                                         .
            use BOOST_DI_INJECT to explicitly point out the constructor parameters
                struct app {
                    BOOST_DI_INJECT(app, example<int>);
                };

            make example constructor explicit if possible
                template<typename>
                struct example {
                    template<typename T>
                    explicit example(T);
                };

            if conversion constructor might be disabled, might be worth to do so
            boost::function has a conversion constructor from any type but integral types
                template<>
                struct is_integral<any_type>
                    : mpl::true_
                { };
            ```
        ]
    ]
]

* Inheriting constructors
[table
    [[Issue][Solution]]
    [
        [
            ```
                                                                      .
            struct a {
                a(int, double);
                a(int, double, float);
            };

            struct b : a {
                using a::a;
            };

            struct app {
                app(b);
            };
            ```
        ]
        [
            ```
                                                                                                         .
            Support without any workarounds
            ```
        ]
    ]
]

* `BOOST_DI_INJECT` and default parameters
[table
    [[Issue][Solution]]
    [
        [
            ```
                                                                      .
            struct example {
                BOOST_DI_INJECT(explicit example
                              , int = 0
                              , double = 0.0);
            };
            ```
        ]
        [
            ```
                                                                                                         .
            BOOST_DI_INJECT creates a function instead of direct traits
                struct example {
                    static void boost_di_injector__(int = 0, double = 0.0);
                    explicit example(int = 0, double = 0.0);
                };

                paramter_types<decltype(&example::boost_di_injector__)>::type -> mpl::vector<int, double>
            ```
        ]
    ]
]

* `BOOST_DI_INJECT` with inheritance
[table
    [[Issue][Solution]]
    [
        [
            ```
                                                                      .
            struct a {
                BOOST_DI_INJECT(a, int, double);
            };

            struct b : a { };

            std::make_unique<b>(); // error b doesn't have
                                   // constructor with 2 parameters
            ```
        ]
        [
            ```
                                                                                                         .
            use BOOST_DI_INJECT or BOOST_DI_INJECT_TRAITS to explicitly point that constructor is empty

            struct a {
                BOOST_DI_INJECT(a, int, double);
            };

            struct b : a {
                BOOST_DI_INJECT_TRAITS(); // or BOOST_DI_INJECT(b);
            };

            std::make_unique<b>();
            ```
        ]
    ]
]

* Function parameters evaluation order with shared binding
[table
    [[Issue][Solution]]
    [
        [
            ```
                                                                      .
            struct a { a(int); };
            struct b { b(aux::shared_ptr<a>); };

            // parameters evaluation order is not specified
            struct c { c(aux::shared_ptr<a>, aux::shared_ptr<b>); };

            di::make_injector(
                bind<int>::when<call_stack<a>>::to(42)
              , shared<a>
            );
            ```
        ]
        [
            ```
                                                                                                         .
            be aware and avoid binding which may be affected by parameters evaluation order
            ```
        ]
    ]
]

[table
    [[Tests: [@test/vt/compiler_support_vt.cpp]]]
]

[warning GCC/Clang/MSVC/Intel compilers differ with they way template conversion operator is handled.]

[h6 Tests]
`Boost.DI` is released with many levels of tests

* Unit tests (ut)
* Module/Integration tests (mt)
* Functional tests (ft)
* Performance tests (pt)
* Compilation fail tests (ft)
* Verification tests (vt) - verify compiler support

To run tests go to `boost/di/test` directory and run.
```
    bjam
```

[h6 Similar libraries]

* [@https://bitbucket.org/cheez/dicpp dicpp]
* [@https://code.google.com/p/infectorpp infectorpp]
* [@https://github.com/phs/sauce sauce]
* [@https://code.google.com/p/wallaroo wallaroo]
* [@https://code.google.com/p/hypodermic hypodermic]
* [@https://github.com/admiyo/CppInject CppInject]
* [@http://qtioccontainer.sourceforge.net qtioccontainer]
* [@https://code.google.com/p/autumnframework autumnframework]
* [@http://sourceforge.net/projects/cpp-resolver cpp-resolver]
* [@https://code.google.com/p/pococapsule pococapsule]
* [@https://code.google.com/p/spring-cpp spring-cpp]
* [@http://www.cs.utah.edu/~arichard/inject.html inject]
* [@http://bobah.net/d4d/source-code/misc/cpp-dependency-injection cpp-dependency-injection]
* [@https://code.google.com/p/ffead-cpp ffead-cpp]
* [@http://codebros.github.io/DiLite DiLite]
* [@https://code.google.com/p/kindi kindi]

[h6 FAQ]

# Is configuration via XML supported by `Boost.DI`?

    * Short answer is NO. `Boost.DI` dependencies are configured in the source code using C++ features which allows compile time checking.
    Long story short, fluent configuration you don't have to remember of changing the configuration file, compiler will take care of it for you.
Usually lazy binding requires exceptions handling and is a performance killer, but obviously it depends on a projects needs.
Although it might be hard it is possible to achieve it with `Boost.DI`.
The question which should be asked though - how often configuration is dynamically changed via XML?

# Why `Boost.DI` doesn't support `setter/member`` injection?

    * Constructor injection is the most powerful and the preferable injection method which avoid uninitialized state of members.
`Setter/Member` injection should be avoided at all costs in order to keep the solutions as clean as possible. Therefore `Boost.DI`
doesn't support it by default.

# Why `Boost.DI` doesn't have `singleton` scope?

    * Singleton pattern is usually overused and makes code really hard to test. Thread safety has to be considered as well whilst using it.
`Boost.DI` provides `shared` scope which behaves like non-multi threaded singleton.
`Singleton` scope might be implemented using `Boost.DI` `scope` functionality.

# How many constructors parameters are supported and how many bindings I can have?
    * `Boost.DI` by default supports up to 10 constructor parameters. Configuration might be changed by `BOOST_DI_CFG_CTOR_LIMIT_SIZE`.
The number of allowed bindings is limited by `BOOST_MPL_LIMIT_VECTOR_SIZE` value.

# How injection works since there is no registration/reflection/traits ?
    * See __rationale_ for further explanations.

[h6 Continuous Integration]

[@https://travis-ci.org/krzysztof-jusiak/di [$https://travis-ci.org/krzysztof-jusiak/di.svg?branch=master [format PNG]]]
[@https://ci.appveyor.com/project/krzysztof-jusiak/di [$https://ci.appveyor.com/api/projects/status/1il4knxh7tq9o5ic [format PNG]]]
[@https://coveralls.io/r/krzysztof-jusiak/di?branch=master [$https://coveralls.io/repos/krzysztof-jusiak/di/badge.png?branch=master [format PNG]]]

[endsect]

