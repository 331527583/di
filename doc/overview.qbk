[/
 /
 / Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section Overview]

[section Features]

What is so unique about this library?

* Compile time approach - no exceptions - if application compiles all dependencies will be be created accurately
* Macro free - no need to specify constructor traits or register anything (less intrusive)
* Scopes deduction - scopes are deduced based on type semantic
* Automatic conversion between std/boost smart pointers
* Compile time policies - ex. to detect circular dependencies or limit supported types only to specified
* Supports `C++03` / `C++11` / `C++14` standards

Main features:

* Header only library
* Architecture independent (tested on x86/x86-64)
* Supports all POSIX and Windows operating systems (tested on Linux/Windows/Mac/Darwin)
* Supports `C++03` / `C++11` / `C++14` standards
* Exception safe guaranty
* Thread safe guaranty
* Constructor injection (macro free)
* Compile time creation guaranty
* Compile time policies (arguments permission, binding correctness, circular dependencies, creation ownership, scopes permission)
* Dependencies life time management (scopes: deduce, external, unique, shared, session + custom scopes)
* Scope deduction (shared\_ptr -> shared, unique\_ptr, lvalue -> unique, ...)
* Supports copies, references, pointers, boost and std smart pointers / rvalue references(C++11)
* Named parameters (named\<int, my\_int\>)
* Runtime visitor throughout created objects (useful for generation dependency diagrams)

Although library supports `C++03` and `C++11`, only `C++14` shows the full potential of Boost.DI.
To achieve the same behaviour with previous standards sometimes will just require a bit more hassle.

[endsect]

[section Dependencies]

* Boost.Bind
* Boost.Config
* Boost.Detail
* Boost.Function
* Boost.MPL
* Boost.Preprocessor
* Boost.Ref
* Boost.Smart_Ptr
* Boost.Typeof
* Boost.Type_Traits
* Boost.Utility

[endsect]

[section Supported Compilers]

Boost.DI was sucessfuly test on below compilers

* Linux (x86/x86-64)
   * Clang 3.2/3.3/3.4/3.4.1 (clean with Clang Static Analyzer and Valgrind)
   * GCC 4.7.3/4.8.2/4.9.0 (clean with Valgrind)
   * Intel C++ 14.0.3 (clean with Valgrind)

* Windows (x86/x86-64)
   * MinGW 4.7.3/4.8.2
   * Visual Studio 2013 (clean with DrMemory)

* Darwin/Mac OS (x86-64)
   * Clang 503.0.40 (Apple LLVM version 5.1)

[note Older compilers might be supported, but weren't tested and probably can't be tested properly due to requirements of C++ 11 features by the tests.]

[h6 Restrictions]

see `Design.Problematic Cases`:

[table
  [[Issue][GCC][Clang][Intel][Visual Studio]]
  [[Rvalue References][supported][supported][supported][not supported]]
  [[std/boost function][supported][supported][supported][supported (has to be pass by const reference)]]
  [[Arguments Permission Policy][supported][supported][supported][not supported]]
]

[endsect]

[section Configuration]

The macros listed in the table below may be used to control the behaviour of Boost.DI.

[table
  [[Macro][Description]]
  [
    [`BOOST_DI_CFG_NO_PREPROCESSED_HEADERS`]
    [
        Boost.DI by default uses preprocessed headers. See `Compilation time` for further specification.
        To explicitly disable preprocessed headers `BOOST_DI_CFG_NO_PREPROCESSED_HEADERS` has to be defined.

        default: `enabled`
    ]
  ]

  [
    [`BOOST_DI_CFG_STD`]
    [
        Defines which compilator features will be used. When `cpp_11` below features will be used:
        * variadic templates
        * function template default arguments
        * rvalue references and perfet forwarding
        * decltype

        Configuration affects preprocessed headers, which are generated for both configurations.
        default: `cpp_11 when C++11 cpp_03 otherwise`
    ]
  ]

  [
    [`BOOST_DI_CFG_CTOR_LIMIT_SIZE`]
    [
        Constructor injection is limited by `BOOST_DI_CFG_CTOR_LIMIT_SIZE`, which means that constructor can't
        have more parameters then defined in order for Boost.DI to works correctly. Value might be redefined
        to any number, the only repercussion will be longer compilation times. Might be used as well to limit
        clients from having long parameter list constructors.

        default: `10`
    ]
  ]

  [
    [`BOOST_DI_CFG_EXAMINE_CALL_STACK`]
    [
        Context concepts (`when` syntax) have to be explicitly turned on using `BOOST_DI_CFG_EXAMINE_CALL_STACK`. Reason being
        much longer compilation times.

        default: `disabled`
    ]
  ]

  [
    [`BOOST_DI_CFG_INJECT_VA_ARGS`]
    [
        `BOOST_DI_INJECT(ctor, arg1, arg2, ..., argN)`

        default: `enabled when C++11`
    ]
  ]

  [
    [`BOOST_DI_CFG_INJECT_BRACKET`]
    [
        `BOOST_DI_INJECT(ctor, (arg1, arg2, ..., argN))`

        default: `enabled when C++03`
    ]
  ]

  [
    [`BOOST_DI_CFG_STD_SMART_PTR`]
    [
        Default `smart pointer` type is set accordingly to compiler support, but
        might standard smart pointers might be forced by `BOOST_DI_CFG_STD_SMART_PTR`.
        Then Boost.DI internally will use standard smart pointers instead of boost smart
        pointers. Additionally conversion to weak_ptr is only allowed from default `smart pointer type`.

        default: `enabled if supported by compiler`
    ]
  ]

  [
    [`BOOST_DI_CFG_BOOST_SMART_PTR`]
    [
        Analogously as `BOOST_DI_CFG_STD_SMART_PTR`, but with boost smart pointers to be chosen.

        default: `enabled if std smart ptr are not supported by compiler`
    ]
  ]

  [
    [`BOOST_DI_INJECTOR`]
    [
        Named used internally by Boost.DI when `BOOST_DI_INJECT` or `BOOST_DI_INJECT_TRAITS` is used
        to define constructor traits.

        default: `boost_di_injector__`
    ]
  ]

  [
    [`BOOST_MPL_LIMIT_VECTOR_SIZE`]
    [
        Number of allowed bindings is limited by Boost.MPL vector size.

        default: 20 (defined by Boost.MPL)
    ]
  ]

]

[endsect]

[section Continuous Integration]

[@https://travis-ci.org/krzysztof-jusiak/di [$https://travis-ci.org/krzysztof-jusiak/di.svg?branch=master [format PNG]]]
[@https://ci.appveyor.com/project/krzysztof-jusiak/di [$https://ci.appveyor.com/api/projects/status/1il4knxh7tq9o5ic [format PNG]]]
[@https://coveralls.io/r/krzysztof-jusiak/di?branch=master [$https://coveralls.io/repos/krzysztof-jusiak/di/badge.png?branch=master [format PNG]]]

[endsect]

[endsect]

