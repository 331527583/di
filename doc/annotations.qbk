[/
 /
 / Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section Annotations]

[heading Description]
Annotations are intrusive, additional informations specified along with the type in order to refer to given type by the annotation instead of type it self.
Useful, when there are more than one of the same parameters type in constructor parameters.
`Boost.DI` provides concept of __annotations_named__ parameters.

[section:named (named = name)]
Named parameters are useful when constructor has more parameters of the same type.
```
    ctor(int value1, int value2);
```
In order to inject proper values into `value1` and `value2` they have to be distinguished somehow.
`Boost.DI` solution for that problem are annotations.

[note Annotations might be set only when constructor is selected using __injections_boost_di_inject__ or __injections_boost_di_inject_traits__.]

[heading Synopsis]
    auto value_1 = []{};
    auto value_2 = []{};

    __injections_boost_di_inject__(ctor, (named = Name) type type_name [= default_value], ...);

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`Name`][None][Instance represents object name]]
]

[heading Example]
    __injections_boost_di_inject__(ctor, (named = value_1) int value1, (named = value_2) int value2);

[tip Implementation of constructor doesn't require annotations, which means implementation won't be affected by annotations.] 

[heading Header]
    #include <__di_hpp__>

[heading Examples]
[table
[[Annotated constructor injection][]]
    [
        [
            ```
            auto int1 = []{};
            auto int2 = []{};

            struct c {
                __injections_boost_di_inject__(c
                    , (__annotations_named__ = int1) int a
                    , (__annotations_named__ = int2) int b)
                    : a(a), b(b)
                { }

                int a = 0;
                int b = 0;
            };

            auto injector = __di_make_injector__(
                __di_bind__<int>.__annotations_named__(int1).to(42)
              , __di_bind__<int>.__annotations_named__(int2).to(87)
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<c>();
            assert(42 == c.a);
            assert(87 == c.b);
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Annotated constructor injection with the same names for different parameters][]]
    [
        [
            ```
            auto n1 = []{};
            auto n2 = []{};

            struct c {
                __injections_boost_di_inject__(c
                    , (__annotations_named__ = n1) int a
                    , (__annotations_named__ = n1) int b
                    , (__annotations_named__ = n2) int c
                    , int d
                    , (__annotations_named__ = n1) string s)
                    : a(a), b(b), c(c), d(d), s(s)
                { }

                int a = 0;
                int b = 0;
                int c = 0;
                int d = 0;
                string s;
            };

            auto injector = __di_make_injector__(
                __di_bind__<int>.__annotations_named__(n1).to(42)
              , __di_bind__<int>.__annotations_named__(n2).to(87)
              , __di_bind__<string>.__annotations_named__(n1).to("str")
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<c>();
            assert(42 == c.a);
            assert(42 == c.b);
            assert(87 == c.c);
            assert(0 == c.d);
            assert("str" == c.s);
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Annotated constructor injection with separate constructor definition  ][]]
    [
        [
            ```
            auto int1 = []{};
            auto int2 = []{};

            struct c {
                __injections_boost_di_inject__(c
                    , (__annotations_named__ = int1) int a
                    , (__annotations_named__ = int2) int b);

                int a = 0;
                int b = 0;
            };

            c::c(int a, int b) : a(a), b(b) { }

            auto injector = __di_make_injector__(
                __di_bind__<int>.__annotations_named__(int1).to(42)
              , __di_bind__<int>.__annotations_named__(int2).to(87)
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<c>();
            assert(42 == c.a);
            assert(87 == c.b);
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Annotated constructor injection with __injections_ctor_traits__][Test]]
    [
        [
            ```
            auto int1 = []{};
            auto int2 = []{};

            struct c {
                c(int a, int b) : a(a), b(b) { }

                int a = 0;
                int b = 0;
            };

            namespace boost { namespace di {
            template<>
            struct ctor_traits<c> {
                __injections_boost_di_inject_traits__(
                    (__annotations_named__ = int1) int
                  , (__annotations_named__ = int2) int);
            };
            }} // boost::di

            auto injector = __di_make_injector__(
                __di_bind__<int>.__annotations_named__(int1).to(42)
              , __di_bind__<int>.__annotations_named__(int2).to(87)
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<c>();
            assert(42 == c.a);
            assert(87 == c.b);
                                                                                                                       .
            ```
        ]
    ]
]

[heading More Examples]
    ``__examples_annotations__``

[heading See Also]

* __annotations__

[endsect]

[endsect]

