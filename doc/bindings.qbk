[/
 /
 / Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section Bindings]

[heading Description]
Bindings in `Boost.DI` are done using [@http://en.wikipedia.org/wiki/Domain-specific_language Domain Specific Language].
The main purpose of bindings DSL is to make easy things as easy
as possible whilst giving possibility to accomplish solutions for more complicated problems.
The glue between DSL and the core is __dependency_model__, so if you would like to write your own front end
the only thing which has to be in mind is to return `mpl::vector` of __dependency_model__.

[heading Synopsis]
    template<
        typename TScope
      , typename TExpected
      , typename TGiven
      , typename TBind
    >
    class dependency {
        typedef dependency type;
        typedef TScope scope;
        typedef TExpected expected;
        typedef TGiven given;
        typedef TBind bind;

        template<typename>
        struct rebind;

        template<typename T>
        explicit dependency(const T&);

        template<typename T>
        static dependency to(const T&);
    };

[table Parameters
    [[Parameter][Requirement][Description][Returns][Throw]]
    [[`TScope`][__scope_model__ type][Scope to be used]]
    [[`TExpected`][None][Type to be returned]]
    [[`TGiven`][None][Type to be created]]
    [[`TBind`][Boolean expression][Expression to be evaluated in order o verify dependency match during resolving]]
    [[`dependency(T)`][None][Intialize dependency from type `T`][][Does not throw]]
    [[`to(T)`][None][Returns new __dependency_model__ with associated `T` value][__dependency_model__][Does not throw]]
]

[heading Header]
    #include <__di_hpp__>

[heading Examples]
    template<typename TIinterface typename TImplementation>
    struct bind
        : __di_dependency__<__di_scopes_deduce__, TInterface, TImplementation>
    { };

    __di_make_injector__(
        __di_bind__<interface, implementation>()
    );

[heading More Examples]
    ``__examples_binding__`` | ``__examples_dynamic_binding__``

[heading Tests]
    ``[@test/ut/bindings_ut.cpp]``

[heading See Also]

* __bindings_bind__
* __bindings_scope__
* __bindings_when__
* __bindings_named__

[section bind]

[heading Description]
Allows to bind interface to implementation and associate value with __dependency_model__.

[heading Synopsis]
    template<typename TInterface, typename TImplementation>
    struct bind {
        template<typename T>
        static __dependency_model__ to(const T&);
    };

[table Parameters
    [[Parameter][Requirement][Description][Retruns][Throw]]
    [[`TInterface`][None][Interface type]]
    [[`TImplementation`][None][Implementation type]]
    [[`T`][`POD`/`reference_wrapper`/`shared_ptr`][Value type]]
    [[`to(T)`][None][Returns new __dependency_model__ with associated `T` value][__dependency_model__][Does not throw]]
]

[heading Expression Semantics]
    di::bind<interface, implementation>()
    di::bind<int>::to(int())

[*Return type]: __dependency_model__

[heading Header]
    #include <__di_hpp__>

[heading Examples]
[table
    [[Binding][Description]]
    [[```di::bind<interface, implementation>())```][Bind `interface` to `implementation`]]
    [[```di::bind<implementation>())```][Bind to `implementation` with deduced `interface`]]
    [[```di::bind<int>::to(42)```][Bind `int` parameters to `42`]]
    [[```di::bind<std::string>::to("text")```][Bind `std::string` parameters to "text"]]
    [[```di::bind<example>::to(cref(example_))```][Bind `example` parameters to const reference instance]]
    [[```di::bind<example>::to(ref(example_))```][Bind `example` parameters to to reference instance]]
    [[```di::bind<interface>::to(make_shared<implementation>())```][Bind `interface` to shared_ptr instance]]
    [[```di::bind<int>::to([]{ return 42; })```][Bind `int` parameters to lambda expression returning `42`]]
    [[```di::bind<function<int()>>::to([]{ return 42; })```][Bind `int` to lambda expression returning `42`]]
    [[```di::bind<function<int()>>::to(bind(&return_int, 42))```][Bind `int` to functor expression returning `42`]]
    [[```di::bind<interface, implementation>::__di_bind_named__<my_interface>```][Bind annotated `interface` to `implementation` named with `my_interface`]]
]
    auto injector = __di_make_injector__(
        di::bind<interface, implementation>()
      , di::bind<int>::to(42)
    );

    assert(dynamic_cast<implementation*>(injector.__di_injector_create__<unique_ptr<interface>>().get()));
    assert(42 == injector.__di_injector_create__<int>());

[note Values bind with `bind<T>::to(T)` always have higher priority than other bindings. See __scopes_external__ for further information.]

[heading More Examples]
    ``__examples_binding__`` | ``__examples_dynamic_binding__``

[heading Tests]
    ``[@test/ut/bindings_ut.cpp]`` | ``[@test/ut/core/binder_ut.cpp]``

[heading See Also]

* __bindings__
* __bindings_bind_any_of__
* __bindings_bind_bind_bool__
* __bindings_bind_bind_int__
* __bindings_bind_bind_string__

[section any_of]
Allows to bind multiple interfaces to one instance.

[heading Synopsis]
    template<typename... TArgs>
    struct any_of;

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`TArgs...`][Polymorphic types][Interfaces to be binded to one instance]]
]

[heading Expression Semantics]
    di::any_of<interface1, interface2, ..., interfaceN>()

[*Return type]: `mpl::vector`

[heading Header]
    #include <__di_hpp__>

[heading Examples]
[table
    [[Binding][Description]]
    [[```__di_bind__<di::any_of<interface1, interface2>, implementation>())```][Bind `interface1`, `interface2` to `implementation` using one instance]]
]

    auto injector = __di_make_injector__(
        __di_bind__<di::any_of<interface1, interface2>, implementation1>()
    );

    assert(dynamic_cast<implementation1*>(injector.__di_injector_create__<unique_ptr<interface1>>().get()));
    assert(injector.__di_injector_create__<unique_ptr<interface1>>() == injector.__di_injector_create__<unique_ptr<interface2>>());

[tip The same result might be achieved with `di::bind<implementation1>()`, but list of interfaces will be deduced instead.]

[heading More Examples]
    ``__more_examples_multiple_interfaces__`` | ``__examples_binding__``

[heading Tests]
    ``[@test/ut/bindings_ut.cpp]`` | ``[@test/ut/core/binder_ut.cpp]``

[heading See Also]

* __bindings__
* __bindings_bind__
* __bindings_bind_bind_bool__
* __bindings_bind_bind_int__
* __bindings_bind_bind_string__

[endsect]

[section bind_bool]

[heading Description]
Allows to bind compile time bool values.

[heading Synopsis]
    template<bool Value>
    struct bind_bool;

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`Value`][Boolean value][Value to be binded to `bool` parameters]]
]

[heading Expression Semantics]
    di::bind_bool<true>()

[*Return type]: __dependency_model__

[heading Header]
    #include <__di_hpp__>

[heading Examples]
[table
    [[Binding][Description]]
    [[```di::bind_bool<true>())```][Bind `true` value to `bool` parameters]]
    [[```di::bind_bool<true>::__di_bind_named__<my_bool>())```][Bind `true` value to `bool` parameters named `my_bool`]]
]

    auto injector = __di_make_injector__(
        di::bind_bool<true>()
    );

    assert(true == injector.__di_injector_create__<bool>());

[heading More Examples]
    ``__examples_binding__``

[heading Tests]
    ``[@test/ut/bindings_ut.cpp]`` | ``[@test/ut/core/binder_ut.cpp]``

[heading See Also]

* __bindings__
* __bindings_bind__
* __bindings_bind_any_of__
* __bindings_bind_bind_int__
* __bindings_bind_bind_string__

[endsect]

[section bind_int]

[heading Description]
Allows to bind compile time integer values.

[heading Synopsis]
    template<int N>
    struct bind_int;

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`N`][Integer number][Value to be binded to `int` parameters]]
]

[heading Expression Semantics]
    di::bind_int<42>()

[*Return type]: __dependency_model__

[heading Header]
    #include <__di_hpp__>

[heading Examples]
[table
    [[Binding][Description]]
    [[```di::bind_int<42>())```][Bind `42` to `int` parameters]]
    [[```di::bind_int<42>::__di_bind_named__<my_int>()```][Bind `42` value to `int` parameters named `my_int`]]
]

    auto injector = __di_make_injector__(
        di::bind_int<42>()
    );

    assert(42 == injector.__di_injector_create__<int>());

[heading More Examples]
    ``__examples_binding__``

[heading Tests]
    ``[@test/ut/bindings_ut.cpp]`` | ``[@test/ut/core/binder_ut.cpp]``

[heading See Also]

* __bindings__
* __bindings_bind__
* __bindings_bind_any_of__
* __bindings_bind_bind_bool__
* __bindings_bind_bind_string__

[endsect]

[section bind_string]

[heading Description]
Allows to bind compile time string values.

[heading Synopsis]
    template<typename T>
    struct bind_string;

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`T`][`mpl::string` type][Value to be binded to `std::string` parameters]]
]

[heading Expression Semantics]
    di::bind_string<mpl::string<'str'>>()

[*Return type]: __dependency_model__

[heading Header]
    #include <__di_hpp__>

[heading Examples]
[table
    [[Binding][Description]]
    [[```di::bind_string<mpl::string<'str'>>())```][Bind `str` to `std::string` parameters]]
    [[```di::bind_string<mpl::string<'str'>>::__di_bind_named__<my_string>()```][Bind `str` value to `std::string` parameters named `my_string`]]
]

    auto injector = __di_make_injector__(
        di::bind_string<mpl::string<'str'>>()
    );

    assert("str" == injector.__di_injector_create__<std::string>());

[heading More Examples]
    ``__examples_binding__``

[heading Tests]
    ``[@test/ut/bindings_ut.cpp]`` | ``[@test/ut/core/binder_ut.cpp]``

[heading See Also]

* __bindings__
* __bindings_bind__
* __bindings_bind_any_of__
* __bindings_bind_bind_bool__
* __bindings_bind_bind_int__

[endsect]

[endsect]

[section scope]

[heading Description]
Allows to bind other bindings to defined/custom scope. If not used `deduce` scope is assumed.

[heading Synopsis]
    template<typename TScope>
    struct scope {
        template<typename... TArgs>
        struct bind;
    };

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`TScope`][__scope_model__ type][scope to be binded]]
    [[`TArgs...`][__binding_model__ type][types to be binded in `TScope`]]
]

[heading Expression Semantics]
    di::scope<TScope>::bind<TArgs...>()

[*Return type]: __dependency_model__

[heading Header]
    #include <__di_hpp__>

[heading Examples]
[table
    [[Binding][Description]]
    [[```di::scope<__di_scopes_unique__<>>::bind<__di_bind__<interface, implementation>>```][Bind `interface` to `implementation` in `unique` scope]]
    [[```di::scope<__di_scopes_shared__<>>::bind<__di_bind__<interface, implementation>>```][Bind `interface` to `implementation` in `shared` scope]]
    [[```di::scope<__di_scopes_session__<>>::bind<__di_bind__<interface, implementation>>```][Bind `interface` to `implementation` in `session` scope]]
]

    auto injector = __di_make_injector__(
        di::scope<__di_scopes_unique__<>>::bind<
            __di_bind__<interface, implementation>
        >()
    );

    assert(injector.__di_injector_create__<shared_ptr<interface>>() != injector.__di_injector_create__<shared_ptr<interface>>());

[note `external` scope can be only binded using `bind<T>::to(T)` semantic.]

[heading More Examples]
    ``__examples_binding__``

[heading Tests]
    ``[@test/ut/bindings_ut.cpp]`` | ``[@test/ut/core/binder_ut.cpp]``

[heading See Also]

* __bindings__
* __bindings_scope_deduce__
* __bindings_scope_unique__
* __bindings_scope_shared__
* __bindings_scope_session__

[section deduce]

[heading Description]
Allows to bind other bindings in __scopes_deduce__. Interface type will be deduced, if not given.
Scoped will be deduced accordingly to constructor parameter type. See __scopes_deduce__ for further information.

[heading Synopsis]
    template<typename... TArgs>
    struct deduce
        : __di_bind_scope__<scopes::deduce>::bind<TArgs...>
    { };

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`TArgs...`][__binding_model__ type][Bindings to be binded in `deduce` scope]]
]

[heading Expression Semantics]
    di::deduce<__di_bind__<interface, implementation>>()

[*Return type]: __dependency_model__

[heading Header]
    #include <__di_hpp__>

[heading Examples]
[table
    [[Binding][Description]]
    [[```di::deduce<implementation>()```][Bind deduced interface to `implementation`]]
    [[```di::deduce<__di_bind__<interface, implementation>>()```][Bind `interface` to `implementation`]]
]

    auto injector = __di_make_injector__(
        di::deduce<implementation>()
    );

    assert(injector.__di_injector_create__<unique_ptr<implementation>>() != injector.__di_injector_create__<unique_ptr<implementation>>());

[heading More Examples]
    ``__examples_deduce_scope__``

[heading Tests]
    ``[@test/ut/bindings_ut.cpp]`` | ``[@test/ut/core/binder_ut.cpp]``

[heading See Also]

* __bindings__
* __bindings_scope__
* __bindings_scope_unique__ | __scopes_unique__
* __bindings_scope_shared__ | __scopes_shared__
* __bindings_scope_session__ | __scopes_session__

[endsect]

[section unique]

[heading Description]
Allows to bind other bindings in __scopes_unique__.

[heading Synopsis]
    template<typename... TArgs>
    struct unique
        : __di_bind_scope__<__di_scopes_unique__<>>::bind<TArgs...>
    { };

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`TArgs...`][__binding_model__ type][Bindings to be used in __scopes_unique__]]
]

[heading Expression Semantics]
    di::unique<__di_bind__<interface, implementation>>()

[*Return type]: __dependency_model__

[heading Header]
    #include <__di_hpp__>

[heading Examples]
[table
    [[Binding][Description]]
    [[```di::unique<__di_bind__<interface, implementation>>()```][Bind `interface` to `implementation` in __scopes_unique__]]
]

    auto injector = __di_make_injector__(
        di::unique<
            __di_bind__<interface, implementation>
        >()
    );

    assert(injector.__di_injector_create__<shared_ptr<implementation>>() != injector.__di_injector_create__<shared_ptr<implementation>>());

[heading More Examples]
    ``__examples_binding__``

[heading Tests]
    ``[@test/ut/bindings_ut.cpp]`` | ``[@test/ut/core/binder_ut.cpp]``

[heading See Also]

* __bindings__
* __bindings_scope__
* __bindings_scope_deduce__ | __scopes_deduce__
* __bindings_scope_shared__ | __scopes_shared__
* __bindings_scope_session__ | __scopes_session__

[endsect]

[section shared]

Allows to bind other bindings in __scopes_shared__.

[heading Synopsis]
    template<typename... TArgs>
    struct shared
        : __di_bind_scope__<__di_scopes_shared__<>::bind<TArgs...>
    { };

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`TArgs...`][__binding_model__ type][Bindings to be used in __scopes_shared__]]
]

[heading Expression Semantics]
    di::shared<__di_bind__<interface, implementation>>()

[*Return type]: __dependency_model__

[heading Header]
    #include <__di_hpp__>

[heading Examples]
[table
    [[Binding][Description]]
    [[```di::shared<__di_bind__<interface, implementation>>()```][Bind `interface` to `implementation` in __scopes_shared__]]
]

    auto injector = __di_make_injector__(
        di::shared<
            __di_bind__<interface, implementation>
        >()
    );

    assert(injector.__di_injector_create__<shared_ptr<implementation>>() == injector.__di_injector_create__<shared_ptr<implementation>>());

[heading More Examples]
    ``__examples_binding__``

[heading Tests]
    ``[@test/ut/bindings_ut.cpp]`` | ``[@test/ut/core/binder_ut.cpp]``

[heading See Also]

* __bindings__
* __bindings_scope__
* __bindings_scope_deduce__ | __scopes_deduce__
* __bindings_scope_unique__ | __scopes_unique__
* __bindings_scope_session__ | __scopes_session__

[endsect]

[section session]

Allows to bind other bindings in __scopes_session__.

[heading Synopsis]
    template<typename... TArgs>
    struct session
        : __di_bind_scope__<__di_scopes_session__<>>::bind<TArgs...>
    { };

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`TArgs...`][__binding_model__ type][Bindings to be binded in __scopes_session__]]
]

[heading Expression Semantics]
    di::session<__di_bind__<interface, implementation>>()

[*Return type]: __dependency_model__

[heading Header]
    #include <__di_hpp__>

[heading Examples]
[table
    [[Binding][Description]]
    [[```di::session<__di_bind__<interface, implementation>>()```][Bind `interface` to `implementation` in __scopes_session__]]
]

    auto injector = __di_make_injector__(
        di::session<
            __di_bind__<interface, implementation>
        >()
    );

    assert(!injector.__di_injector_create__<shared_ptr<implementation>>());

    injector.call(di::scopes::session_entry());
    assert(injector.__di_injector_create__<shared_ptr<implementation>>());

    injector.call(di::scopes::session_exit());
    assert(!injector.__di_injector_create__<shared_ptr<implementation>>());

[heading More Examples]
    ``__examples_binding__``

[heading Tests]
    ``[@test/ut/bindings_ut.cpp]`` | ``[@test/ut/core/binder_ut.cpp]``

[heading See Also]

* __bindings__
* __bindings_scope__
* __bindings_scope_deduce__ | __scopes_deduce__
* __bindings_scope_unique__ | __scopes_unique__
* __bindings_scope_shared__ | __scopes_shared__

[endsect]

[endsect]

[section when]

[heading Description]
`Boost.DI` bindings DSL allows to create context requirements, which might be applied with `when` syntax.
`when` allows to apply contextual binding. To implement custom requirement `apply` class with return compile time integer value has to be defined.
Given value will influence how dependencies will be resolved. Current algorithm might be found in __rationale_binding_resolution_algorithm__.

[heading Synopsis]
    struct when {
        template<typename T>
        struct apply
            : TResult
        { };
    }

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`T`][__data_model__ type][Type to be verified]]
    [[`TResult`][Integral value][Represents importance of binding (highest value = more important) - see __rationale_binding_resolution_algorithm__]]
]

[heading Header]
    #include <__di_hpp__>

[heading Examples]
    struct longer_call_stack_first {
        template<typename TDependency>
        struct apply
            : mpl::size<typename TDependency::call_stack>
        { };
    }

    auto injector = __di_make_injector__(
        __di_bind__<int>::to(1)
      , __di_bind__<int>::when<longer_call_stack_first>::to(42)
    );

    struct example {
        explicit example(int i) : i(i) { };
        int i = 0;
    };

    assert(1 == injector.__di_injector_create__<int>());
    assert(42 == injector.__di_injector_create__<example>().i);

[heading Tests]
    ``[@test/ut/bindings_ut.cpp]`` | ``[@test/ut/core/binder_ut.cpp]``

[heading See Also]

* __bindings__
* __bindings_when_call_stack__
* __bindings_named__

[section call_stack]

[heading Description]
Allows to choose binding accordingly to the call stack object was created in.

[heading Synopsis]
    template<typename... TArgs>
    struct call_stack {
        template<typename T>
        struct apply;
    };

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`T`][__data_model__ type][Type to be verified]]
    [[`TArgs...`][None][Represents objection creation `call stack` requirement]]
]

[heading Expression Semantics]
    di::call_stack<c1, c2, ..., cN>

[*Semantics]: only last N objects are taken into account during `call stack` resolution, where N represents number of elements in `di::call_stack`.

[*Return type]: `mpl::vector`

[heading Header]
    #include <__di_hpp__>

[heading Examples]
[table
    [[`call stack`][`context`][Resolution]]

    [
        [
            ```
                di::call_stack<c1, c2>
            ```
        ]
        [
            ```
                c1
            ```
        ]
        [
            ```
                -
            ```
        ]
    ]

    [
        [
            ```
                di::call_stack<c1, c2>
            ```
        ]
        [
            ```
                c1, c2
            ```
        ]
        [
            ```
                di::call_stack<c1, c2>
            ```
        ]
    ]

    [
        [
            ```
                di::call_stack<c3>
            ```
        ]
        [
            ```
                c1, c2, c3
            ```
        ]
        [
            ```
                di::call_stack<c3>
            ```
        ]
    ]

    [
        [
            ```
                di::call_stack<c2, c3>
                di::call_stack<c1, c2, c3>
            ```
        ]
        [
            ```
                c2, c3
            ```
        ]
        [
            ```
                di::call_stack<c2, c3>
            ```
        ]
    ]
]

[table
    [[Binding][Description]]
    [[```__di_bind_int__<42>::__di_bind_when__<di::call_stack<c1, c2>>()```][Bind `int` parameter to `42` when class was created with `..., c1, c2` context]]
    [[```__di_bind__<interface, implementation>::__di_bind_named__<my_interface>::__di_bind_when__<di::call_stack<c1, c2>>()```][Bind `interface` to `implementation` when parameter named `my_interface` is called within `c1, c2` context]]
    [[```__di_bind__<interface, implementation>::__di_bind_when__<di::call_stack<c1, c2>>::__di_bind_named__<my_interface>()```][Same as above]]
]

    struct c2 {
        c2(int i)
            : i(i)
        { }

        int i = 0;
    };

    struct c1 {
        c1(int i, c2 c)
            : i(i), c(c)
        { }

        int i = 0;
        c2 c;
    };

    auto injector = __di_make_injector__(
        __di_bind__<interface, implementation>::__di_bind_when__<di::call_stack<c1, c2>>()
    );

    assert(0 == injector.__di_injector_create__<c1>().i);
    assert(42 == injector.__di_injector_create__<c1>().c.i);

[note [link di.overview.configuration BOOST_DI_CFG_EXAMINE_CALL_STACK] has to be defined to enable __bindings_when_call_stack__ feature.]
[note First type passed to `call_stack` should be type to be created.]
[warning Types passed to `call_stack` should reflects constructor parameters - __di_named__ is not supported.]
[tip __bindings_named__ and __bindings_when__ might be used alternately - order is not specified.]

[heading More Examples]
    ``__examples_binding__``

[heading Tests]
    ``test/ut/concepts/call_stack_ut.cpp`` | ``[@test/ut/bindings_ut.cpp]`` | ``[@test/ut/core/binder_ut.cpp]``

[heading See Also]

* __bindings__
* __bindings_when__

[endsect]

[endsect]

[section named]

[heading Description]
Allows to connect __annotations_named__ annotation parameters with binding configuration.

[heading Synopsis]
    template<typename TName>
    struct named;

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`TName`][None][Given name type]]
]

[heading Header]
    #include <__di_hpp__>

[heading Examples]

[table
    [[Binding][Description]]
    [[```__di_bind_int__<42>::__di_bind_named__<my_int>()```][Bind named with `my_int` name `int` parameter to `42`]]
    [[```__di_bind__<interface, implementation>::__di_bind_named__<my_implementation>()```][Bind named with `my_impementation` name `interface` to `implementation`]]
]
    struct my_int { };

    class example {
    public:
        example(__di_named__<int, my_int> i)
            : i(i)
        { }

        int i = 0;
    };

    auto injector = __di_make_injector__(
        __di_bind_int__<42>::__di_bind_named__<my_int>()
    );

    assert(42 == injector.__di_injector_create__<example>().i);

[heading More Examples]
    ``__more_examples_named__`` | ``__examples_binding__``

[heading Tests]
    ``[@test/ut/bindings_ut.cpp]`` | ``[@test/ut/core/binder_ut.cpp]``

[heading See Also]

* __bindings__
* __bindings_when__

[endsect]

[endsect]

