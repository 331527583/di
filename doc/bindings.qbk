[/
 /
 / Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section Bindings]

[heading Description]
Bindings in `Boost.DI` are done using specially defined Domain Specific Language (DSL).
The main purpose of binding DSL is to make easy things as easy
as possible whilst giving possibility to accomplish solutions for more complicated problems.
The glue between DSL and the core is `dependency`, so if you would like to write your own front end
the only thing which has to be in mind is to return list of dependencies.

[heading Synopsis]
    template<
        typename TScope
      , typename TExpected
      , typename TGiven
      , typename TBind
    >
    class dependency;

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`TScope`][__scope_model__ type][Scope to be used]]
    [[`TExpected`][None][Type to be returned]]
    [[`TGiven`][None][Type to be created]]
    [[`TBind`][Boolean expression][Expression to be evaluated in order o verify dependency match during resolving]]
]

[heading Header]
    #include <boost/di.hpp>

[heading Examples]
    template<typename TIinterface typename TImplementation>
    struct bind
        : bindings::dependency<scopes::deduce, TInterface, TImplementation>
    { };

    di::make_injector(
        bind<interface, implementation>()
    );

[heading More Examples]
    ``__examples_binding__`` | ``__examples_dynamic_binding__``

[heading Tests]
    ``[@test/ut/bindings_ut.cpp]``

[heading See Also]

* __bindings_bind__
* __bindings_scope__
* __bindings_when__

[section bind]

[heading Description]
Allows bind interface to implementation and associate value with `dependency`.

[heading Synopsis]
    template<typename TInterface, typename TImplementation>
    struct bind
        : bindings::dependency<scopes::deduce, TInterface, TImplementation>
    {
        template<typename T>
        static dependency to(const T&);
    };

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`TInterface`][None][Interface type]]
    [[`TImplementation`][None][Implementation type]]
    [[`T`][`POD`/`reference_wrapper`/`shared_ptr`][Value type]]
    [[`x.to(...)`][None][Returns new `dependency` with associated `T` value]]
]

[heading Expression Semantics]
    bind<interface, implementation>()
    bind<int>::to(int())

[*Return type]: `dependency`

[heading Header]
    #include <boost/di.hpp>

[heading Examples]
[table
    [[Binding][Description]]
    [[```di::bind<interface, implementation>())```][bind interface to implementation]]
    [[```di::bind<implementation>())```][bind to implementation with deduced interface]]
    [[```di::bind<int>::to(42)```][bind to number]]
    [[```di::bind<std::string>::to("text")```][bind to text value]]
    [[```di::bind<example>::to(cref(example_))```][bind to const reference]]
    [[```di::bind<example>::to(ref(example_))```][bind to reference]]
    [[```di::bind<interface>::to(make_shared<implementation>())```][bind to shared_ptr]]
    [[```di::bind<int>::to([]{ return 42; })```][bind value to functor expression]]
    [[```di::bind<function<int()>>::to([]{ return 42; })```][bind to lambda expression]]
    [[```di::bind<function<int()>>::to(boost::bind(&return_int, 42))```][bind to functor expression]]
    [[```di::bind<interface, implementation>::named<my_interface>```][bind annotated interface to implementation named with `my_interface`]]
]
    auto injector = di::make_injector(
        di::bind<interface, implementation>()
      , di::bind<int>::to(42)
    );

    assert(dynamic_cast<implementation*>(injector.create<unique_ptr<interface>>().get()));
    assert(42 == injector.create<int>());

[note Values bind with `bind<...>::to(...)` always have higher priority than other bindings. See `External scope` for further information.]

[heading More Examples]
    ``__examples_binding__`` | ``__examples_dynamic_binding__``

[heading Tests]
    ``[@test/ut/bindings_ut.cpp]`` | ``[@test/ut/core/binder_ut.cpp]``

[heading See Also]

* __bindings__
* __bindings_bind_any_of__
* __bindings_bind_bind_bool__
* __bindings_bind_bind_int__
* __bindings_bind_bind_string__

[section any_of]
Allows to bind multiple interfaces to one instance.

[heading Synopsis]
    template<typename... TArgs>
    struct any_of
        : mpl::vector<TArgs...>
    { };

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`TArgs`][Polymorphic types][Interfaces to be binded to one instance]]
]

[heading Expression Semantics]
    any_of<interface1, interface2, ..., interfaceN>()

[*Return type]: `mpl::vector`

[heading Header]
    #include <boost/di.hpp>

[heading Examples]
[table
    [[Binding][Description]]
    [[```di::bind<di::any_of<interface1, interface2>, implementation>())```][bind `interface1`, `interface2` to `implementation`]]
]

    auto injector = di::make_injector(
        di::bind<di::any_of<interface1, interface2>, implementation1>()
    );

    assert(dynamic_cast<implementation1*>(injector.create<unique_ptr<interface1>>().get()));
    assert(injector.create<unique_ptr<interface1>>() == injector.create<unique_ptr<interface2>>());

[tip The same result might be achieved with `di::bind<implementation1>()`, but list of interfaces will be deduced instead.]

[heading More Examples]
    ``__more_examples_multiple_interfaces__`` | ``__examples_binding__``

[heading Tests]
    ``[@test/ut/bindings_ut.cpp]`` | ``[@test/ut/core/binder_ut.cpp]``

[heading See Also]

* __bindings__
* __bindings_bind__
* __bindings_bind_bind_bool__
* __bindings_bind_bind_int__
* __bindings_bind_bind_string__

[endsect]

[section bind_bool]

[heading Description]
Allows to bind compile time bool value.

[heading Synopsis]
    template<bool Value>
    struct bind_bool
        : bind<bool, mpl::bool_<Value>>
    { };

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`Value`][Boolean value][Value to be binded to `bool` parameters]]
]

[heading Expression Semantics]
    bind_bool<true>();

[*Return type]: `dependency`

[heading Header]
    #include <boost/di.hpp>

[heading Examples]
[table
    [[Binding][Description]]
    [[```di::bind_bool<true>())```][bind `true` value to `bool` parameters]]
    [[```di::bind_bool<true>::named<my_bool>())```][bind `true` value to `bool` parameters named `my_bool`]]
]

    auto injector = di::make_injector(
        di::bind_bool<true>()
    );

    assert(true == injector.create<bool>());

[heading More Examples]
    ``__examples_binding__``

[heading Tests]
    ``[@test/ut/bindings_ut.cpp]`` | ``[@test/ut/core/binder_ut.cpp]``

[heading See Also]

* __bindings__
* __bindings_bind__
* __bindings_bind_any_of__
* __bindings_bind_bind_int__
* __bindings_bind_bind_string__

[endsect]

[section bind_int]

[heading Description]
Allows to bind compile time integer value.

[heading Synopsis]
    template<int N>
    struct bind_int
        : bind<int, mpl::int_<N>>
    { };

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`N`][Integer number][Value to be binded to `int` parameters]]
]

[heading Expression Semantics]
    bind_int<42>();

[*Return type]: `dependency`

[heading Header]
    #include <boost/di.hpp>

[heading Examples]
[table
    [[Binding][Description]]
    [[```di::bind_int<42>())```][bind `42` to `int` parameters]]
    [[```di::bind_int<42>::named<my_int>()```][bind `42` value to `int` parameters named `my_int`]]
]

    auto injector = di::make_injector(
        di::bind_int<42>()
    );

    assert(42 == injector.create<int>());

[heading More Examples]
    ``__examples_binding__``

[heading Tests]
    ``[@test/ut/bindings_ut.cpp]`` | ``[@test/ut/core/binder_ut.cpp]``

[heading See Also]

* __bindings__
* __bindings_bind__
* __bindings_bind_any_of__
* __bindings_bind_bind_bool__
* __bindings_bind_bind_string__

[endsect]

[section bind_string]

[heading Description]
Allows to bind compile time string value.

[heading Synopsis]
    template<typename T>
    struct bind_string
        : bind<std::string, T>
    { };

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`T`][`mpl::string` type][Value to be binded to `std::string` parameters]]
]

[heading Expression Semantics]
    bind_string<mpl::string<'str'>>();

[*Return type]: `dependency`

[heading Header]
    #include <boost/di.hpp>

[heading Examples]
[table
    [[Binding][Description]]
    [[```di::bind_string<mpl::string<'str'>>())```][bind `str` to `std::string` parameters]]
    [[```di::bind_string<mpl::string<'str'>>::named<my_string>()```][bind `str` value to `std::string` parameters named `my_string`]]
]

    auto injector = di::make_injector(
        di::bind_string<mpl::string<'str'>>()
    );

    assert("str" == injector.create<std::string>());

[heading More Examples]
    ``__examples_binding__``

[heading Tests]
    ``[@test/ut/bindings_ut.cpp]`` | ``[@test/ut/core/binder_ut.cpp]``

[heading See Also]

* __bindings__
* __bindings_bind__
* __bindings_bind_any_of__
* __bindings_bind_bind_bool__
* __bindings_bind_bind_int__

[endsect]

[endsect]

[section scope]

[heading Description]
Allows to bind other bindings to defined/custom scope. If not used `deduce` scope is assumed.

[heading Synopsis]
    template<typename TScope>
    struct scope
        : bindings::scope<TScope>
    { };

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`TScope`][__scope_model__ type][scope to be binded]]
]

[heading Expression Semantics]
    scope<Scope>::bind<...>()

[*Return type]: `dependency`

[heading Header]
    #include <boost/di.hpp>

[heading Examples]
[table
    [[Binding][Description]]
    [[```di::scope<scopes::unique<>::bind<di::bind<interface, implementation>>```][bind `interface` to `implementation` in `unique` scope]]
    [[```di::scope<scopes::shared<>::bind<di::bind<interface, implementation>>```][bind `interface` to `implementation` in `shared` scope]]
    [[```di::scope<scopes::session<>::bind<di::bind<interface, implementation>>```][bind `interface` to `implementation` in `session` scope]]
]

    auto injector = di::make_injector(
        di::scope<scopes::unique<>>::bind<
            bind<interface, implementation>
        >()
    );

    assert(injector.create<shared_ptr<interface>>() != injector.create<shared_ptr<interface>>());

[note `external` scope can be only binded using `bind<...>::to(...)` semantic.]

[heading More Examples]
    ``__examples_binding__``

[heading Tests]
    ``[@test/ut/bindings_ut.cpp]`` | ``[@test/ut/core/binder_ut.cpp]``

[heading See Also]

* __bindings__
* __bindings_scope_deduce__
* __bindings_scope_unique__
* __bindings_scope_shared__
* __bindings_scope_session__

[section deduce]

[heading Description]
Allows to bind other bindings to __scopes_deduce__ scope. Interface type will be deduced, if not given.
Scoped will be deduced accordingly to constructor parameter type. See `Deduce Scope` for further information.

[heading Synopsis]
    template<typename... TArgs>
    struct deduce
        : scope<scopes::deduce>::bind<TArgs...>
    { };

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`TArgs...`][__binding_model__ type][Bindings to be binded with `deduce` scope]]
]

[heading Expression Semantics]
    deduce<bind<i, impl>>()

[*Return type]: `dependency`

[heading Header]
    #include <boost/di.hpp>

[heading Examples]
[table
    [[Binding][Description]]
    [[```di::deduce<implementation>()```][bind deduced interface to `implementation`]]
    [[```di::deduce<bind<interface, implementation>>()```][bind `interface` to `implementation`]]
]

    auto injector = di::make_injector(
        di::deduce<implementation>()
    );

    assert(injector.create<unique_ptr<implementation>>() != injector.create<unique_ptr<implementation>>());

[heading More Examples]
    ``__examples_deduce_scope__``

[heading Tests]
    ``[@test/ut/bindings_ut.cpp]`` | ``[@test/ut/core/binder_ut.cpp]``

[heading See Also]

* __bindings__
* __bindings_scope__
* __bindings_scope_unique__ (__scopes_unique__)
* __bindings_scope_shared__ (__scopes_shared__)
* __bindings_scope_session__ (__scopes_session__)

[endsect]

[section unique]

[heading Description]
Allows to bind other bindings to __scopes_unique__ scope.

[heading Synopsis]
    template<typename... TArgs>
    struct unique
        : scope<scopes::unique>::bind<TArgs...>
    { };

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`TArgs...`][__binding_model__ type][Bindings to be binded with `unique` scope]]
]

[heading Expression Semantics]
    unique<bind<i, impl>>()

[*Return type]: `dependency`

[heading Header]
    #include <boost/di.hpp>

[heading Examples]
[table
    [[Binding][Description]]
    [[```di::unique<bind<interface, implementation>>()```][bind `interface` to `implementation` with `unique` scope]]
]

    auto injector = di::make_injector(
        di::unique<
            di::bind<interface, implementation>
        >()
    );

    assert(injector.create<shared_ptr<implementation>>() != injector.create<shared_ptr<implementation>>());

[heading More Examples]
    ``__examples_binding__``

[heading Tests]
    ``[@test/ut/bindings_ut.cpp]`` | ``[@test/ut/core/binder_ut.cpp]``

[heading See Also]

* __bindings__
* __bindings_scope__
* __bindings_scope_deduce__ (__scopes_deduce__)
* __bindings_scope_shared__ (__scopes_shared__)
* __bindings_scope_session__ (__scopes_session__)

[endsect]

[section shared]

Allows to bind other bindings to __scopes_shared__ scope.

[heading Synopsis]
    template<typename... TArgs>
    struct shared
        : scope<scopes::shared>::bind<TArgs...>
    { };

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`TArgs...`][__binding_model__ type][Bindings to be binded with `unique` scope]]
]

[heading Expression Semantics]
    shared<bind<i, impl>>()

[*Return type]: `dependency`

[heading Header]
    #include <boost/di.hpp>

[heading Examples]
[table
    [[Binding][Description]]
    [[```di::shared<bind<interface, implementation>>()```][bind `interface` to `implementation` with `shared` scope]]
]

    auto injector = di::make_injector(
        di::shared<
            di::bind<interface, implementation>
        >()
    );

    assert(injector.create<shared_ptr<implementation>>() == injector.create<shared_ptr<implementation>>());

[heading More Examples]
    ``__examples_binding__``

[heading Tests]
    ``[@test/ut/bindings_ut.cpp]`` | ``[@test/ut/core/binder_ut.cpp]``

[heading See Also]

* __bindings__
* __bindings_scope__
* __bindings_scope_deduce__ (__scopes_deduce__)
* __bindings_scope_unique__ (__scopes_unique__)
* __bindings_scope_session__ (__scopes_session__)

[endsect]

[section session]

Allows to bind other bindings to __scopes_session_ scope.

[heading Synopsis]
    template<typename... TArgs>
    struct session
        : scope<scopes::session>::bind<TArgs...>
    { };

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`TArgs...`][__binding_model__ type][Bindings to be binded with `unique` scope]]
]

[heading Expression Semantics]
    session<bind<i, impl>>()

[*Return type]: `dependency`

[heading Header]
    #include <boost/di.hpp>

[heading Examples]
[table
    [[Binding][Description]]
    [[```di::session<bind<interface, implementation>>()```][bind `interface` to `implementation` with `session` scope]]
]

    auto injector = di::make_injector(
        di::session<
            di::bind<interface, implementation>
        >()
    );

    assert(!injector.create<shared_ptr<implementation>>());

    injector.call(di::scopes::session_entry());
    assert(injector.create<shared_ptr<implementation>>());

    injector.call(di::scopes::session_exit());
    assert(!injector.create<shared_ptr<implementation>>());

[heading More Examples]
    ``__examples_binding__``

[heading Tests]
    ``[@test/ut/bindings_ut.cpp]`` | ``[@test/ut/core/binder_ut.cpp]``

[heading See Also]

* __bindings__
* __bindings_scope__
* __bindings_scope_deduce__ (__scopes_deduce__)
* __bindings_scope_unique__ (__scopes_unique__)
* __bindings_scope_shared__ (__scopes_shared__)

[endsect]

[endsect]

[section when]

[heading Description]
`Boost.DI` bindings DSL allows to create context requirement, which might be applied with `when` syntax.
`when` allows to apply contextual binding. To implement custom requirement `apply` class with return compile time integer value has to be defined.
Given value will influence how dependencies will be resolved. Current algorithm might be found in __rationale_binding_resolution_algorithm__.

[heading Synopsis]
    struct unspecified {
        template<typename TDependency>
        struct apply
            : TResult
        { };
    }

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`TDependency`][__dependency_model__ type][Dependency type]]
    [[`TResult`][Integral value][Returns integer value represents importance of binding]]
]

[heading Header]
    #include <boost/di.hpp>

[heading Examples]
    struct longer_call_stack_first {
        template<typename TDependency>
        struct apply
            : mpl::size<typename TDependency::call_stack>
        { };
    }

    auto injector = di::make_injector(
        di::bind<int>::to(1)
      , di::bind<int>::when<longer_call_stack_first>::to(42)
    );

    struct example {
        explicit example(int i) : i(i) { };
        int i = 0;
    };

    assert(1 == injector.create<int>());
    assert(42 == injector.create<example>().i);

[heading Tests]
    ``[@test/ut/bindings_ut.cpp]`` | ``[@test/ut/core/binder_ut.cpp]``

[heading See Also]

* __bindings__
* __bindings_when_call_stack__

[section call_stack]

[heading Description]
Allows to choose binding regards the contextual call stack object was created with.

[heading Synopsis]
    template<typename... TArgs>
    struct call_stack {
        template<typename TDependency>
        struct apply;
    };

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`TDependency`][__dependency_model__ type][Dependency type]]
    [[`TArgs...`][None][Represents objection creation call stack requirement]]
]

[heading Expression Semantics]
    call_stack<c1, c2, ..., cN>

[*Semantics]: only last N objects are taken into account during `call stack` resolution, where N represents number of elements in `call_stack`.

[*Return type]: `mpl::vector`

[heading Header]
    #include <boost/di.hpp>

[heading Examples]
[table
    [[`call_stack`][`context`][Resolution]]

    [
        [
            ```
                call_stack<c1, c2>
            ```
        ]
        [
            ```
                c1
            ```
        ]
        [
            ```
                -
            ```
        ]
    ]

    [
        [
            ```
                call_stack<c1, c2>
            ```
        ]
        [
            ```
                c1, c2
            ```
        ]
        [
            ```
                call_stack<c1, c2>
            ```
        ]
    ]

    [
        [
            ```
                call_stack<c3>
            ```
        ]
        [
            ```
                c1, c2, c3
            ```
        ]
        [
            ```
                call_stack<c3>
            ```
        ]
    ]

    [
        [
            ```
                call_stack<c2, c3>
                call_stack<c1, c2, c3>
            ```
        ]
        [
            ```
                c2, c3
            ```
        ]
        [
            ```
                call_stack<c2, c3>
            ```
        ]
    ]
]

[table
    [[Binding][Description]]
    [[```di::bind_int<42>::when<di::call_stack<c1, c2>>()```][bind `int` parameter to `42` when class was created with `..., c1, c2` context]]
    [[```di::bind<interface, implementation>::named<my_interface>::when<call_stack<c1, c2>>()```][bind `interface` to `implementation` when parameter named `my_interface` is called within `c1, c2` context]]
    [[```di::bind<interface, implementation>::when<call_stack<c1, c2>>::named<my_interface>()```][same as above]]
]

    struct c2 {
        c2(int i)
            : i(i)
        { }

        int i = 0;
    };

    struct c1 {
        c1(int i, c2 c)
            : i(i), c(c)
        { }

        int i = 0;
        c2 c;
    };

    auto injector = di::make_injector(
        di::bind<interface, implementation>::when<di::call_stack<c1, c2>>()
    );

    assert(0 == injector.create<c1>().i);
    assert(42 == injector.create<c1>().c.i);

[note `BOOST_DI_CFG_EXAMINE_CALL_STACK` has to be defined to enable this feature.]

[heading More Examples]
    ``__examples_binding__``

[heading Tests]
    ``test/ut/concepts/call_stack_ut.cpp`` | ``[@test/ut/bindings_ut.cpp]`` | ``[@test/ut/core/binder_ut.cpp]``

[heading See Also]

* __bindings__
* __bindings_when__

[endsect]

[endsect]

[endsect]

