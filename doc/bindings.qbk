[/
 /
 / Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section Bindings]

[heading Description]
Bindings define dependencies configuration, which basically means what to types will be created and what values will be passed into them.
The glue between bindings and the core is __dependency_model__.

[heading Synopsis]
    template<
        class TScope
      , class TExpected
      , class TGiven
      , class TName
    > class dependency {
        using scope = TScope;
        using expected = TExpected;
        using given = TGiven;
        using name = TName;

        template<class T>
        explicit dependency(const T&);

        template<class T> auto to(const T&) const noexcept;
        template<class Scope> auto in(const Scope&) const noexcept;
        template<class Name> auto named(const Name&) const noexcept;
    };

[table Parameters
    [[Parameter][Requirement][Description][Returns][Throw]]
    [[`TScope`][__concepts_scopable__][Scope to be used]]
    [[`TExpected`][None][Type to be returned]]
    [[`TGiven`][None][Type to be created]]
    [[`TName`][None][Type annotation]]
    [[`dependency(T)`][None][Initialize dependency from type `T`][][Does not throw]]
    [[`to(T)`][None][Returns new __dependency_model__ with associated `T` value][__dependency_model__][Does not throw]]
    [[`in(Scope)`][__concepts_scopable__][Returns new __dependency_model__ using given scope][__dependency_model__][Does not throw]]
    [[`named(T)`][None][Returns new __dependency_model__ with given type annotation][__dependency_model__][Does not throw]]
]

[heading Header]
    #include <__di_hpp__>

[heading Examples]
    ``__examples_bindings__`` | ``__examples_dynamic_bindings__``

[heading See Also]

* __bindings_bind__

[section bind]

[heading Description]
Allows to bind interface to implementation and associate value with __dependency_model__.

[heading Synopsis]
    template<class TExpected, class TGiven = TExpected> requires __concepts_boundable__<TExpected, TGiven>
    __dependency_model__<__di_scopes_deduce__, TExpected, TGiven> bind{};

    template<class T1, class T2, class... Ts>
    using any_of;

    struct override { }; // use to override bindings with `di::bind<...> [di::override]`

[warning MSVC requires to use with brackets when using `di::bind<...>()`, due to lack of variable templates.]

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`TInterface`][None][Interface type]]
    [[`TImplementation`][None][Implementation type]]
    [[`T1, T2, Ts...`][None][List of interfaces]]
]

[heading Expression Semantics]
    di::bind<interface, implementation>
    di::bind<di::any_of<interface1, interface2>, implementation>

[*Return type]: __dependency_model__

[heading Header]
    #include <__di_hpp__>

[heading Examples]
[table
[[Bind interface to implementation][Test]]
    [
        [
            ```
            auto injector = __di_make_injector__(
                __di_bind__<i1, impl1>
            );
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<unique_ptr<i1>>();
            assert(dynamic_cast<impl1*>(object.get()));
            ```
        ]
    ]
]

[table
[[Bind interface to implementation / override][Test]]
    [
        [
            ```
            auto injector = __di_make_injector__(
                __di_bind__<i1, impl1_1>
              , __di_bind__<i1, impl1_2> [di::override]
            );
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<unique_ptr<i1>>();
            assert(dynamic_cast<impl1_2*>(object.get())); // binding overridden
            ```
        ]
    ]
]

[table
[[Bind different interfaces to one][Test]]
    [
        [
            ```
            auto injector = __di_make_injector__(
                __di_bind__<__di_any_of__<i1, i2>, impl>
            );
            ```
        ]
        [
            ```
            auto object1 = injector.__di_injector_create__<shared_ptr<i1>>();
            auto object2 = injector.__di_injector_create__<shared_ptr<i2>>();
            assert(dynamic_cast<impl*>(object1.get()));
            assert(dynamic_cast<impl*>(object2.get()));
            ```
        ]
    ]
]

[table
[[Bind type to compile time value][Test]]
    [
        [
            ```
            template<int N> using int_ = integral_constant<int, N>;

            auto injector = __di_make_injector__(
                __di_bind__<int, int_<42>>
            );
            ```
        ]
        [
            ```
            assert(42 == injector.__di_injector_create__<int>());
            ```
        ]
    ]
]

[table
[[Bind type to value (see __scopes_external__)][Test]]
    [
        [
            ```
            auto injector = __di_make_injector__(
                __di_bind__<int>.to(42)
            );
            ```
        ]
        [
            ```
            assert(42 == injector.__di_injector_create__<int>());
            ```
        ]
    ]
]

[heading More Examples]
    ``__examples_bindings__`` | ``__examples_dynamic_bindings__`` | ``__examples_multiple_interfaces__``

[heading See Also]

* __bindings__

[endsect]

[endsect]

