[/
 /
 / Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section FAQ]

# Is configuration via XML supported by Boost.DI?

    * Short answer will be NO. Boost.DI configuration is configured in the source code using C++ features.
According to my experience configuration driven by XML seems to be a bit smelly and not giving as many benefits.
Usually lazy binding requires exceptions and destroy performance, but obviously it depends on projects needs.
Although it might be hard it is possible to achieve it with Boost.DI, but no approach was taken so far.
The main question should be though - in real life projects how often configuration was actually changed via XML?

# Why Boost.DI doesn't support setter/member injection?

    * Constructor injection is the most powerful and the preferable injection method which avoid uninitialized state of members.
According to author `setter/member` injection should be avoided at all costs in order to keep the solutions as clean as possible.

# Why Boost.DI doesn't have `singleton` scope?

    * Singleton pattern is usually overused and makes code really hard to test. Thread safety has to be considered as well whilst using it.
Boost.DI provides `shared` scope which behaves like non-multi threaded singleton. `Singleton` scope might be implemented using Boost.DI `scope` functionality.

# HOw many construtors arguments are supporrted and how many dependnecies i can use?

# How injection works since there is no registraction/reflection/traits ?
    * See

[endsect]

