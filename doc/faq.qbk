[/
 /
 / Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section FAQ]

# Is configuration via XML supported by Boost.DI?

    * Short answer is NO. Boost.DI dependencies are configured in the source code using C++ features which allows compile time checking.
    Long story short, fluent configuration you don't have to remember of changing the configuration file, compiler will take care of it for you.
Usually lazy binding requires exceptions handling and is a performance killer, but obviously it depends on a projects needs.
Although it might be hard it is possible to achieve it with Boost.DI.
The question which should be asked though - how often configuration is dynamically changed via XML?

# Why Boost.DI doesn't support `setter/member`` injection?

    * Constructor injection is the most powerful and the preferable injection method which avoid uninitialized state of members.
`Setter/Member` injection should be avoided at all costs in order to keep the solutions as clean as possible. Therefore Boost.DI
doesn't support it by default.

# Why Boost.DI doesn't have `singleton` scope?

    * Singleton pattern is usually overused and makes code really hard to test. Thread safety has to be considered as well whilst using it.
Boost.DI provides `shared` scope which behaves like non-multi threaded singleton.
`Singleton` scope might be implemented using Boost.DI `scope` functionality.

# How many constructors parameters are supported and how many bindings I can have?
    * Boost.DI by default supports up to 10 constructor parameters. Configuration might be changed by `BOOST_DI_CFG_CTOR_LIMIT_SIZE`.
The number of allowed bindings is limited by `BOOST_MPL_LIMIT_VECTOR_SIZE` value.

# How injection works since there is no registration/reflection/traits ?
    * See [link boost_di.design Design Rationale] for further explanations.

[endsect]

