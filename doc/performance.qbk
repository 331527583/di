[/
 /
 / Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[h6 Performance]

[h6 Compilation time]

`Boost.DI` uses heavy template meta programming, therefore compilation time was a big concern
whilst creating the library. Library was optimised in terms of compilation times as long as
changes haven't influence runtime performance.

`Boost.DI` contains a set of features improving compilation times.

* Preprocessed Headers
    * Contains `Boost.DI` library in one file after preprocessing stage
    * Preprocessed Headers are generated for [link di.overview.configuration BOOST_DI_CFG_CTOR_LIMIT_SIZE] equals 10 and for [link di.overview.configuration BOOST_MPL_LIMIT_VECTOR_SIZE] equals 10, 20, 30, 40, 50
    * To disable it [link di.overview.configuration BOOST_DI_CFG_NO_PREPROCESSED_HEADERS] has to be defined
    * Enabled by default

* Precompiled Headers
    * Modern compilers feature to cache headers in precompiled stage

```
    //pch.hpp

    #include <boost/di.hpp>
    //... others headers
```

```
    CXX pch.hpp
```

```
    CXX -include pch.hpp example.cpp
```

* Examine __bindings_when_call_stack__
    * Enables context (call stack) to be used for binding
    * This feature slow down the compilation, so it has to be turn on by defining [link di.overview.configuration BOOST_DI_CFG_EXAMINE_CALL_STACK]
    * Disabled by default

[h6 Runtime execution speed]

Runtime execution speed was one of the concerns taken into account whilst implementing the library.
Compile time approach was chosen not only, because of the safety (non exception driven) reasons,
but also because of the runtime performance.
`Boost.DI` library obviously introduces overhead on creating objects, but the effort was taken to make the overhead as small as possible.

