[/
 /
 / Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section Performance]

* [h6 Run-time]

    * Environment
        * x86_64 Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz GenuineIntel GNU/Linux
        * clang++3.4 -O2 / `gdb -batch -ex 'file ./a.out' -ex 'disassemble main'`

[table
[[Create type wihtout bindings][Asm x86-64 (same as `return 0`)]]
    [
        [
            [c++] ```
            int main() {
                auto injector = di::make_injector();
                return injector.create<int>();
            }
                                                                                  .
            ```
        ]
        [
            [teletype] ```
            xor %eax,%eax
            retq
                                                                                  .
            ```
        ]
    ]
]


[table
[[Create type with bound instance][Asm x86-64 (same as `return 42`)]]
    [
        [
            [c++] ```
            int main() {
                auto injector = di::make_injector(
                    di::bind<int>.to(42)
                );

                return injector.create<int>();
            }
                                                                                  .
            ```
        ]
        [
            [teletype] ```
            mov $0x2a,%eax
            retq
                                                                                  .
            ```
        ]
    ]
]


[table
[[Create named type][Asm x86-64 (same as `return 42`)]]
    [
        [
            [c++] ```
            auto my_int = []{};

            struct c {
                BOOST_DI_INJECT(c
                    , (named = my_int) int i)
                    : i(i)
                { }

                int i = 0;
            };

            int main() {
                auto injector = di::make_injector(
                    di::bind<int>.named(my_int).to(42)
                );

                return injector.create<c>().i;
            }
                                                                                  .
            ```
        ]
        [
            [teletype] ```
            mov $0x2a,%eax
            retq
                                                                                  .
            ```
        ]
    ]
]


[table
[[Create bound interface][Asm x86-64 (same as `make_unique`)]]
    [
        [
            [c++] ```
            int main() {
                auto injector = di::make_injector(
                    di::bind<i1, impl1>
                );

                auto ptr = injector.create<
                    unique_ptr<i1>
                >();

                return ptr.get() != nullptr;
            }
                                                                                  .
            ```
        ]
        [
            [teletype] ```
            push   %rax
            mov    $0x8,%edi
            callq  0x4007b0 <_Znwm@plt>
            movq   $0x400a30,(%rax)
            mov    $0x8,%esi
            mov    %rax,%rdi
            callq  0x400960 <_ZdlPvm>
            mov    $0x1,%eax
            pop    %rdx
            retq
                                                                                  .
            ```
        ]
    ]
]


[table
[[Create bound interface via module][Asm x86-64 (same as `make_unique`)]]
    [
        [
            [c++] ```
            struct module {
                auto configure() const noexcept {
                    return di::make_injector(
                        di::bind<i1, impl1>
                    );
                }
            };

            int main() {
                auto injector = di::make_injector(
                    module{}
                );

                auto ptr = injector.create<
                    unique_ptr<i1>
                >();

                return ptr != nullptr;
            }
                                                                                  .
            ```
        ]
        [
            [teletype] ```
            push   %rax
            mov    $0x8,%edi
            callq  0x4007b0 <_Znwm@plt>
            movq   $0x400a10,(%rax)
            mov    $0x8,%esi
            mov    %rax,%rdi
            callq  0x400960 <_ZdlPvm>
            mov    $0x1,%eax
            pop    %rdx
            retq
                                                                                  .
            ```
        ]
    ]
]


[table
[[Create bound interface via exposed module][Asm x86-64]]
    [
        [
            [c++] ```
            struct module {
                di::injector<i1> configure() const {
                    return di::make_injector(
                        di::bind<i1, impl1>
                    );
                }
            };

            int main() {
                auto injector = di::make_injector(
                    module{}
                );

                auto ptr = injector.create<
                    unique_ptr<i1>
                >();

                return ptr != nullptr;
            }
                                                                               .
            ```
        ]
        [
            [teletype] ```
        push   %rbp                               mov    (%rax),%ecx
        push   %rbx                               lea    -0x1(%rcx),%edx
        sub    $0x38,%rsp                         mov    %edx,(%rax)
        lea    0x10(%rsp),%rdi                    cmp    $0x1,%ecx
        lea    0x8(%rsp),%rsi                     jne    0x400bcd <main+173>
        callq  0x400bf0 <_ZN5boost2di7exposed>    mov    (%rbx),%rax
        mov    0x18(%rsp),%rdi                    mov    %rbx,%rdi
        mov    (%rdi),%rax                        callq  *0x10(%rax)
        lea    0x30(%rsp),%rsi                    lea    0xc(%rbx),%rax
        callq  *0x10(%rax)                        mov    $0x0,%ecx
        test   %rax,%rax                          test   %rcx,%rcx
        setne  %bpl                               je     0x400bb8 <main+152>
        je     0x400b57 <main+55>                 mov    $0xffffffff,%ecx
        mov    (%rax),%rcx                        lock   xadd %ecx,(%rax)
        mov    %rax,%rdi                          mov    %ecx,0x30(%rsp)
        callq  *0x8(%rcx)                         mov    0x30(%rsp),%ecx
        mov    0x20(%rsp),%rbx                    jmp    0x400bbf <main+159>
        test   %rbx,%rbx                          mov    (%rax),%ecx
        je     0x400bcd <main+173>                lea    -0x1(%rcx),%edx
        lea    0x8(%rbx),%rax                     mov    %edx,(%rax)
        mov    $0x0,%ecx                          cmp    $0x1,%ecx
        test   %rcx,%rcx                          jne    0x400bcd <main+173>
        je     0x400b82 <main+98>                 mov    (%rbx),%rax
        mov    $0xffffffff,%ecx                   mov    %rbx,%rdi
        lock   xadd %ecx,(%rax)                   callq  *0x18(%rax)
        mov    %ecx,0x30(%rsp)                    movzbl %bpl,%eax
        mov    0x30(%rsp),%ecx                    add    $0x38,%rsp
        jmp    0x400b89 <main+105>                pop    %rbx
        pop    %rbp                               retq
            ```
        ]
    ]
]

* [h6 Compile-time]

    * Environment
        * x86_64 Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz GenuineIntel GNU/Linux
        * clang++3.4 -O2
[table
[[Boost.DI header][Time [s]]]
    [
        [
            [c++] ```
            #include <boost/di.hpp>
            int main() { }
                                                                               .
            ```
        ]
        [
            ```
            0.165
                                                                               .
            ```
        ]
    ]
]

```
Legend:
    ctor    = raw constructor: c(int i, double d);
    inject  = inject constructor: BOOST_DI_INJECT(c, int i, double d);
    all     = all types exposed from module: auto configure();
    exposed = one type exposed from module: di::injector<c> configure();
```

[table
    [[Test source code: [@test/pt/di.cpp]]]
]

[@images/small_complexity.png [$images/small_complexity.png]]
```
* 4248897537 instances created
* 132 different types
* 10 modules
```

[@images/medium_complexity.png [$images/medium_complexity.png]]
```
* 1862039751439806464 instances created
* 200 different types
* 10 modules
```

[@images/big_complexity.png [$images/big_complexity.png]]
```
* 5874638529236910091 instances created
* 310 different types
* 100 different interfaces
* 10 modules
```

[note To run compile time performance tests go to `test/pt` directory and run `./pt.sh` script.]

[heading See Also]
* [link di.concepts Concepts]
* [link di.examples Examples]
* [link di.rationale Rationale]

[endsect]

