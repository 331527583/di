[section Configuration]

`Boost.DI` design distinguish few building blocks (above), which might be configured using [link di.user_guide.configuration BOOST_DI_CFG].

[heading Synopsis]
    template<class>
    class config {
    public:
        auto policies() const;
        auto provider() const;
    };

    template<class... TArgs> requires __concepts_callable__<TArgs>...
    inline auto make_policies(const TArgs&... args) noexcept;

[table Parameters
    [[Parameter][Requirement][Description][Returns][Throw]]
    [[TArgs...][__concepts_callable__][Creates policies][__policy_model__ list][Does not throw]]
    [[`policies()`][__concepts_callable__][Configure default policies][__policy_model__ list][Does not throw]]
    [[`provider()`][__concepts_providable__][Configure default provider][__provider_model__][Does not throw]]
]

The macros listed in the table below may be used to control the behaviour of `Boost.DI`.

[table
  [[Macro][Description]]

  [
    [`BOOST_DI_CFG_CTOR_LIMIT_SIZE`]
    [
        Constructor injection is limited by `BOOST_DI_CFG_CTOR_LIMIT_SIZE`, which means that constructor can't
        have more parameters then defined in order for `Boost.DI` to works correctly. Value might be redefined
        to any number between 0 and 10. Might be used as well to limit clients from having long parameter list constructors.

        default: `10`
    ]
  ]

  [
    [`BOOST_DI_CFG`]
    [
        Global configuration allows to customize provider and policies.

        default: __di_config__
    ]
  ]

  [
    [`BOOST_DI_INJECTOR`]
    [
        Named used internally by `Boost.DI` when `__injections_boost_di_inject__` or `__injections_boost_di_inject_traits__` is used
        to define constructor traits.

        default: `boost_di_injector__`
    ]
  ]

  [
    [`BOOST_DI_CFG_NO_PREPROCESSED_HEADERS`]
    [
        `Boost.DI` by default uses preprocessed headers. To explicitly disable preprocessed headers `BOOST_DI_CFG_NO_PREPROCESSED_HEADERS` has to be defined.

        default: `enabled`
    ]
  ]

]

[heading Header]
    #include <__di_hpp__>

[heading Examples]
[table
    [
        [
            ```
            template<class>
            class my_config : public __di_config__<> {
            public:
                auto provider() const noexcept {
                    return __providers_stack_over_heap__{};
                }

                auto policies() const noexcept {
                    return __di_make_policies__(
                        [](auto type) { }
                      , [](auto type, auto dependency, auto... ctor) { }
                      , __policies_constructible__(std::is_same<int, di::_>{})
                    );
                }
            };
            ```
        ]
        [
            ```
            // per injector policy
            auto injector = __di_make_injector__<my_config>();
            assert(0 == injector.__di_injector_create__<int>());

            // global policy
            #define BOOST_DI_CFG my_provider
            auto injector = __di_make_injector__();
            assert(0 == injector.__di_injector_create__<int>());
            ```
        ]
    ]
]

[heading More Examples]
    ``__examples_custom_provider__`` | ``__examples_custom_policy__``

[heading See Also]

* __policies__
* __providers__

[endsect]

