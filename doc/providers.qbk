[/
 /
 / Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section Providers]

[heading Description]
Providers are responsible for creating objects using given configuration and parameters.
Boot.DI is released with 2 providers.

* __providers_stack_over_heap__ (default)
* __providers_heap__

[heading Synopsis]
    class provider {
    public:
        template<class I, class T, class TInitalization, class TMemory, class... TArgs>
        auto get(const TInitalization&, const TMemory&, TArgs&&...) const;
    };

[table Parameters
    [[Parameter][Requirement][Description][Returns][Throw]]
    [[`I`][None][Interface type]]
    [[`T`][Is convertible to `I`][Type to be created]]
    [[`TInitalization`][direct/uniform][Describes how object should be created, using `()` when `direct` or `{}` when `uniform`]]
    [[`TMemory`][stack/heap][Describes where in memory object might be created, on stack when `stack` or heap when `heap`]]
    [[`TArgs...`][None][List of parameters to be passed to constructor]]
    [[`get()`][None][Returns constructed object `T`][`T` when on stack, `I`* when on heap][Does not throw]]
]

[heading Header]
    #include <__di_hpp__>

[heading Namespace]
    boost::di::providers

[heading Examples]
[table
    [
        [
            ```
            class heap_no_throw {
            public:
                template<
                  class I // interface
                , class T // implementation
                , class TInit // direct()/uniform{}
                , class TMemory // heap/stack
                , class... TArgs>
                auto get(const TInit&, const TMemory&, TArgs&&... args) const noexcept {
                    return new (nothrow) T{forward<TArgs>(args)...};
                }
            };

            class my_provider : public __di_config__ {
            public:
                auto provider() const noexcept {
                    return heap_no_throw{};
                }
            };
                                                                                               .
            ```
        ]
        [
            ```
            // per injector policy
            auto injector = __di_make_injector__<my_provider>();
            assert(0 == injector.__di_injector_create__<int>());

            // global policy
            #define BOOST_DI_CFG my_provider
            auto injector = __di_make_injector__();
            assert(0 == injector.__di_injector_create__<int>());
                                                                                                                       .
            ```
        ]
    ]
]

[heading More Examples]
    ``__examples_custom_provider__``

[heading See Also]

* __providers_heap__
* __providers_stack_over_heap__

[section stack_over_heap (default)]

[heading Description]
Creates objects on stack whenever possible, otherwise on heap.

[heading Synopsis]
    class stack_over_heap {
    public:
        template<class I, class T, class TInitalization, class TMemory, class... TArgs>
        auto get(const TInitalization&, const TMemory&, TArgs&&...) const;
    };

[table Parameters
    [[Parameter][Requirement][Description][Returns][Throw]]
    [[`I`][None][Interface type]]
    [[`T`][is same or base of `I`][Type to be created]]
    [[`TInitalization`][direct/uniform][Describes how object should be created, using `()` when `direct` or `{}` when `uniform`]]
    [[`TMemory`][stack/heap][Describes where in memory object might be created, on stack when `stack` or heap when `heap`]]
    [[`TArgs...`][None][List of parameters to be passed to constructor]]
    [[`get()`][None][Returns constructed object `T`][T when request scope is __di_scopes_unique__ accordingly to `Memory Conversion` table, `I`* when `I` is an interface or requested scope is different than __di_scopes_unique__][Does not throw]]
]

[table Memory Conversion
    [[Type][Scope]]
    [[T][stack]]
    [[T&][stack]]
    [[const T&][stack]]
    [[T*][heap]]
    [[const T*][heap]]
    [[T&&][stack]]
    [[unique_ptr<T>][heap]]
    [[shared_ptr<T>][heap]]
    [[weak_ptr<T>][heap]]
    [[is_polymorphic<T>][heap]]
]

[heading Header]
    #include <__di_hpp__>

[heading Namespace]
    boost::di::providers

[heading Examples]
    class use_stack_over_heap_provider : public __di_config__ {
    public:
        auto provider() const noexcept {
            return stack_over_heap{};
        }
    };

    // per injector policy
    auto injector = __di_make_injector__<use_stack_over_heap_provider>();
    assert(0 == injector.__di_injector_create__<int>());

    // global policy
    #define BOOST_DI_CFG use_stack_over_heap_provider
    auto injector = __di_make_injector__();
    assert(0 == injector.__di_injector_create__<int>());

[heading More Examples]
    ``__examples_custom_provider__``

[heading See Also]

* __providers_heap__
* __providers__

[endsect]

[section heap]

[heading Description]
Basic provider creates objects on heap.

[heading Synopsis]
    class heap {
    public:
        template<class I, class T, class TInitalization, class TMemory, class... TArgs>
        auto get(const TInitalization&, const TMemory&, TArgs&&...) const -> decltype(I*);
    };

[table Parameters
    [[Parameter][Requirement][Description][Returns][Throw]]
    [[`I`][None][Interface type]]
    [[`T`][Is convertible to `I`][Type to be created]]
    [[`TInitalization`][direct/uniform][Describes how object should be created, using `()` when `direct` or `{}` when `uniform`]]
    [[`TMemory`][stack/heap][Describes where in memory object might be created, on stack when `stack` or heap when `heap`]]
    [[`TArgs...`][None][List of parameters to be passed to constructor]]
    [[`get()`][None][Returns constructed object `T`][`I`*][Does not throw]]
]

[heading Header]
    #include <__di_hpp__>

[heading Namespace]
    boost::di::providers

[heading Examples]
    class use_heap_provider : public __di_config__ {
    public:
        auto provider() const noexcept {
            return heap{};
        }
    };

    // per injector policy
    auto injector = __di_make_injector__<use_heap_provider>();
    assert(0 == injector.__di_injector_create__<int>());

    // global policy
    #define BOOST_DI_CFG use_heap_provider
    auto injector = __di_make_injector__();
    assert(0 == injector.__di_injector_create__<int>());

[heading More Examples]
    ``__examples_custom_provider__``

[heading See Also]

* __providers_stack_over_heap__
* __providers__

[endsect]

[endsect]

