[/
 /
 / Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section Examples]

[section Hello World]
[import ../example/hello_world.cpp]
[hello_world]
[table
    [[Full code example: [@example/hello_world.cpp]]]
]
[endsect]

[section Constructor Injection]
[import ../example/cpp_11/constructor_injection.cpp]
[constructor_injection_cpp_11]
[table
    [[Full code example: [@example/cpp_11/constructor_injection.cpp]]]
]
[endsect]

[section Constructor Signature]
[import ../example/cpp_11/constructor_signature.cpp]
[constructor_signature_cpp_11]
[table
    [[Full code example: [@example/cpp_11/constructor_signature.cpp]]]
]
[endsect]

[section Binding]
[import ../example/cpp_11/binding.cpp]
[binding_cpp_11]
[endsect]

[section Dynamic Binding]
[import ../example/cpp_14/dynamic_binding.cpp]
[dynamic_binding_cpp_14]
[table
    [[Full code example: [@example/cpp_14/dynamic_binding.cpp]]]
]
[endsect]

[section Modules]
[import ../example/cpp_14/modules.cpp]
[modules_cpp_14]
[table
    [[Full code example: [@example/cpp_14/modules.cpp]]]
]
[import ../example/cpp_03/modules.cpp]
[modules_cpp_03]
[table
    [[Full code example: [@example/cpp_03/modules.cpp]]]
]
[endsect]

[section Deduce Scope]
[import ../example/cpp_11/deduce_scope.cpp]
[deduce_scope_cpp_11]
[table
    [[Full code example: [@example/cpp_11/deduce_scope.cpp]]]
]
[endsect]

[section Custom Scope]
[import ../example/cpp_11/custom_scope.cpp]
[custom_scope_cpp_11]
[table
    [[Full code example: [@example/cpp_11/custom_scope.cpp]]]
]
[endsect]

[section Custom Allocator]
[import ../example/cpp_11/custom_allocator.cpp]
[custom_allocator_cpp_11]
[table
    [[Full code example: [@example/cpp_11/custom_allocator.cpp]]]
]
[endsect]

[section Custom Policy]
[import ../example/cpp_11/custom_policy.cpp]
[custom_policy_cpp_11]
[table
    [[Full code example: [@example/cpp_11/custom_policy.cpp]]]
]
[endsect]

[section UML Visitor]
[import ../example/cpp_11/uml_visitor.cpp]
[uml_visitor_cpp_11]
[table
    [[Full code example: [@example/uml_visitor.cpp]]]
]
[endsect]

[include integration.qbk]

[include testing.qbk]

[section Constructor Traits Generator]

[heading Description]
Python script based on lib clang generating constructor traits. Useful for third party libraries, which can't be changed.

[heading Usage]
    Usage: di_ctor_traits.py [options] files...

    Options:
      -h, --help                    show this help message and exit
      -o OUTPUT, --output=OUTPUT    output file (default='di_ctor_traits.hpp')
      -l LIMIT, --limit=LIMIT       limit to constructors within declaration (default='')

[heading Example]
    ./di_ctor_traits.py -o di_ctor_traits.hpp -l "namespace::class" files...

[heading Output]
    /*
     * file generated by di_ctor_traits: di_ctor_traits.hpp
     */
    #ifndef DI_CTOR_TRAITS_HPP
    #define DI_CTOR_TRAITS_HPP

    #include <boost/di/ctor.hpp>
    #include <__di_hpp__>

    namespace boost {
    namespace di {

    template<>
    struct ctor_traits< ::n::a >
    {
        BOOST_DI_CTOR_TRAITS(int);
    };

    template<>
    struct ctor_traits< ::n::n1::b >
    {
        BOOST_DI_CTOR_TRAITS(int, double, const std::string &);
    };

    template<>
    struct ctor_traits< ::n::c >
    {
        BOOST_DI_CTOR_TRAITS(int, double, float);
    };

    } // namespace di
    } // namespace boost

    #endif // DI_CTOR_TRAITS_HPP


[table
    [[Download: [@https://github.com/krzysztof-jusiak/di_ctor_traits.git]]]
]

[endsect]

[include more_examples.qbk]

[endsect]

