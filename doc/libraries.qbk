[/
 /
 / Copyright (c) 2012-2015 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section Dependency Injection libraries]

[table C++ Dependency Injection Libraries
    [[Library][Boost.DI][dicpp][Google Fruit]]
    [[Language][C++14][C++11][C++11]]
    [[License][Boost License][Boost License][Apache 2.0]]
    [[Linkage][header only][header only][library]]
    [[Approach][compile-time][run-time][compile/run-time]]
    [[Test - bind value]
    [
        ```
        #include <boost/di.hpp>

        namespace di = boost::di;

        auto module = [] {
            return di::bind<int>.to(42);
        };

        int main() {
            auto injector = di::make_injector(module());
            return injector.create<int>() != 42;
        }
        ```
    ]
    [
        ```
        #include <di/registry.hpp>
        #include <di/injector.hpp>

        void module(di::registry& r) {
            r.add(r.type<int>().instance(new int{42}));
        }

        int main() {
            di::injector injector;
            injector.install(module);
            return injector.construct<int>() != 42;
        }

        ```
    ]
    [
        ```
        #include <fruit/fruit.h>

        auto i = 42; // bindInstance doesn't support l-value's

        fruit::Component<int> module() {
            return fruit::createComponent()
                .bindInstance(i);
        }

        int main() {
            fruit::Injector<int> injector{module()};
            return injector.get<int>() != 42;
        }
        ```
    ]
    ]
    [[[@# [Show Results]]]]
    [[Assember - x86-64]
    [
        ```
       xor    %eax,%eax
       retq
        ```
    ]
    [
        ```
        push   %rbx
        sub    $0xb0,%rsp
        lea    0x20(%rsp),%rbx
        xor    %esi,%esi
        mov    %rbx,%rdi
        callq  0x40b3d0 <_ZN2di8injectorC2ENS0_8localityE>
        movq   $0x404520,(%rsp)
        movq   $0x405e50,0x18(%rsp)
        movq   $0x405e60,0x10(%rsp)
        mov    %rbx,%rdi
        callq  0x404520 <_Z6moduleRN2di8registryE>
        mov    0x10(%rsp),%rax
        test   %rax,%rax
        je     0x4047b1 <main+81>
        lea    (%rsp),%rdi
        mov    $0x3,%edx
        mov    %rdi,%rsi
        callq  *%rax
        lea    0x20(%rsp),%rdi
        callq  0x405cf0 <_ZNK2di8registry9constructIiEENS_6traits13returned_typeIT_E4typeEv>
        cmp    $0x2a,%eax
        setne  %al
        movzbl %al,%ebx
        lea    0x20(%rsp),%rdi
        callq  0x40b7c0 <_ZN2di8registryD2Ev>
        mov    %ebx,%eax
        add    $0xb0,%rsp
        pop    %rbx
        retq
        mov    %rax,%rbx
        mov    0x10(%rsp),%rcx
        test   %rcx,%rcx
        je     0x404801 <main+161>
        lea    (%rsp),%rdi
        mov    $0x3,%edx
        mov    %rdi,%rsi
        callq  *%rcx
        jmp    0x404801 <main+161>
        mov    %rax,%rdi
        callq  0x405e40 <__clang_call_terminate>
        mov    %rax,%rbx
        lea    0x20(%rsp),%rdi
        callq  0x40b7c0 <_ZN2di8registryD2Ev>
        mov    %rbx,%rdi
        callq  0x404250 <_Unwind_Resume@plt>
        mov    %rax,%rdi
        callq  0x405e40 <__clang_call_terminate>
        ```
    ]
    [
        ```
	    push   %rbp
	    push   %rbx
	    sub    $0xc8,%rsp
	    lea    (%rsp),%rbx
	    mov    %rbx,%rdi
	    callq  0x4015b0 <_Z6modulev>
	    lea    0xc0(%rsp),%rdi
	    mov    %rbx,%rsi
	    callq  0x401a60 <_ZN5fruit8InjectorIJiEEC2ENS_9ComponentIJiEEE>
	    mov    0xa8(%rsp),%rdi
	    test   %rdi,%rdi
	    je     0x4017d7 <main+55>
	    callq  0x401260 <_ZdlPv@plt>
	    mov    0x90(%rsp),%rdi
	    test   %rdi,%rdi
	    je     0x4017e9 <main+73>
	    callq  0x401260 <_ZdlPv@plt>
	    mov    0x48(%rsp),%rdi
	    test   %rdi,%rdi
	    je     0x4017f8 <main+88>
	    callq  0x401260 <_ZdlPv@plt>
	    lea    0xc0(%rsp),%rdi
	    callq  0x401b00 <_ZN5fruit8InjectorIJiEE3getIiEENS_4impl4meta17RemoveAnnotations5applyIT_E4typeEv>
	    cmp    $0x2a,%eax
	    setne  %al
	    movzbl %al,%ebp
	    mov    0xc0(%rsp),%rbx
	    test   %rbx,%rbx
	    je     0x40182b <main+139>
	    mov    %rbx,%rdi
	    callq  0x401eb0 <_ZN5fruit4impl15InjectorStorageD2Ev>
	    mov    %rbx,%rdi
	    callq  0x401260 <_ZdlPv@plt>
	    mov    %ebp,%eax
	    add    $0xc8,%rsp
	    pop    %rbx
	    pop    %rbp
	    retq
	    mov    %rax,%rbx
	    mov    0xa8(%rsp),%rdi
	    test   %rdi,%rdi
	    je     0x40184c <main+172>
	    callq  0x401260 <_ZdlPv@plt>
	    mov    0x90(%rsp),%rdi
	    test   %rdi,%rdi
	    je     0x40185e <main+190>
	    callq  0x401260 <_ZdlPv@plt>
	    mov    0x48(%rsp),%rdi
	    test   %rdi,%rdi
	    je     0x4018a1 <main+257>
	    callq  0x401260 <_ZdlPv@plt>
	    mov    %rbx,%rdi
	    callq  0x401410 <_Unwind_Resume@plt>
	    mov    %rax,%rbx
	    mov    0xc0(%rsp),%rbp
	    test   %rbp,%rbp
	    je     0x401895 <main+245>
	    mov    %rbp,%rdi
	    callq  0x401eb0 <_ZN5fruit4impl15InjectorStorageD2Ev>
	    mov    %rbp,%rdi
	    callq  0x401260 <_ZdlPv@plt>
	    movq   $0x0,0xc0(%rsp)
	    mov    %rbx,%rdi
	    callq  0x401410 <_Unwind_Resume@plt>
        ```
    ]
    ]
]

[table Dependency Injection Libraries
    [[Library][Boost.DI][Google Guice][Dagger2][Ninject]]
    [[Language][C++14][Java 6][Java][C#]]
    [[License][Boost License][Apache 2.0][Apache 2.0][Apache 2.0]]
    [[Linkage][header only][jar][jar][dll]]
    [[Approach][compile-time][run-time][compile-time (annottation processor)][run-time]]
    [[[@# [Show Results]]]]
    [[Test - bind value]
    [
        ```
        #include <boost/di.hpp>

        namespace di = boost::di;

        auto module = [] {
            return di::bind<int>.to(42);
        };

        int main() {
            auto injector = di::make_injector(module());
            return injector.create<int>() != 42;
        }
        ```
    ]
    [
        ```
        import com.google.inject.*;

        class Module extends AbstractModule {
            @Override
            protected void configure() {
                bind(int.class).toInstance(42);
            }
        }

        public class guice {
            public static void main(String[] args) {
                Injector injector =
                Guice.createInjector(new Module());
                System.exit(injector.getInstance(int.class) != 42 ? 1 : 0);
            }
        }
        ```
    ]
    [
        ```
        import dagger.*;

        @Module
        class AppModule {
            @Provides int provideint() { return 42; }
        }

        @Component(modules = AppModule.class)
        interface AppComponent {
            int build();
        }

        public class dagger2 {
            public static void main(String[] args) {
                System.exit(Dagger_AppComponent.create().build() != 42 ? 1 : 0);
           }
        }
        ```
    ]
    [
        ```
        using Ninject;

        class Module : Ninject.Modules.NinjectModule {
            public override void Load() {
                Bind<int>().To(42);
            }
        }

        class ninject {
            static void Main(string[] args) {
                Ninject.IKernel kernel = new StandardKernel(new Module());
                kernel.Get<int>();
            }
        }
        ```
    ]
    ]
]

[endsect]

