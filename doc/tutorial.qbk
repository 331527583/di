[/
 /
 / Copyright (c) 2012-2016 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section Tutorial]

For the purposes of this tutorial we are going to implement simple application which will print
"hello_world" using simple logger implementation when first command line argument is not equal 0.

[table
    [[Logger/Fake logger implementation: [@example/tutorial/ilogger.hpp] | [@example/tutorial/logger.hpp]]]
]

Having logger in place let's write basic implementation. Let's assume we have test written already, so let's
focus on the `app` then.

So, the first step would be to define `app` class. Let's make it as simple as possible then.
There is nothing special about it which is required by `Boost.DI`, no macros, no registration, nothing.

```
class app {
public:
    app(const std::string& text, int value)
        : text_(text), value_(value)
    { }

    void run() const {
        if (value_) {
            std::cout << text_ << std::endl;
        }
    }

private:
    std::string text_;
    int value_ = 0;
};
```

After this is completed we would like to create and run our `app`. This step will be different than usual, because
we are going to use dependency injection framework to create our dependencies for us.
We are going to apply composition root in our example application and run the app class.

Remember to include `Boost.DI` header and alias the `di` namespace for convenience.
```
#include <__di_hpp__>

namespace di = boost::di;
```

$example_begin example/tutorial/tutorial1.cpp$
```
#include <boost/di.hpp>

namespace di = boost::di;

int main() {
    auto injector = __di_make_injector__(); // injector configuration
    injector.__di_injector_create__<app>().run(); // composition root

    return 0;
}
```
$example_end$

Thats all, our application should compile and don't print anything.
`value` should be `false` and `text` should be an `empty string`.

So far everything seems to be really easy, so the next step will be
to configure our dependencies, meaning what exactly will be passed
to the application. We will do it using __di_make_injector__ functionality.
To remind our requirements - we would like to print "hello world" if first command line argument
is not equal 0.

First step will be to configure the text and value. To demonstrate different
between compile time values and externals (given by user - __bindings_bind__) we set
the value to `1` for now.

$example_begin example/tutorial/tutorial2.cpp$
```
auto injector = __di_make_injector__(
    __di_bind__<int, std::integral_constant<int, 1>> // compile-time value
  , __di_bind__<std::string>.to("hello world") // run-time value
);
```
$example_end$

So, right now we have [link di.user_guide.injector injector] configured and the output of our example application
should always be "hello world".

Let's continue then with our requirement that text should be displayed if first command
line argument is not equal 0.

$example_begin example/tutorial/tutorial3.cpp$
```
int main(int argc, char** argv) {
    auto injector = __di_make_injector__(
        __di_bind__<int>.to(argc > 1 ? std::atoi(argv[1]) : 0)
      , __di_bind__<std::string>.to("hello world")
    );
    injector.__di_injector_create__<app>().start();
}
```
$example_end$

Great! Seems like our example application is working the way was required.

But well, we aren't happy with that example, are we? We haven't used our `logger` implementation yet and because of that tests are hard to write.
So, let's try again with our `logger` instead.

[import ../example/tutorial/ilogger.hpp]
[ilogger]

[import ../example/tutorial/logger.hpp]
[logger]

Having a `logger` implementation, we just have to add it to our example application:

```
class app
{
public:
    app(int value, const std::string& text, std::unique_ptr<logger> logger)
        : value_(value), text_(text), logger_(std::move(logger))
    { }

    void run() const {
        if (value_) {
            logger_->log(text_);
        }
    }

private:
    int value_ = 0;
    std::string text;
    std::unique_ptr<logger> logger_;
};
```

So what we have to do in order to `logger` to be created by `Boost.DI`.
Absolutely nothing actually! `Boost.DI` will find out that `logger` is needed and create appropriate
instance. So our main function remains the same. Isn't that great?

But wait a minute, shouldn't we pass interface instead? Of course we should, we wanted to
easy test it, so we have to be able to fake `logger` behavior. Let's do some changes then.

```
app(int value, const std::string& text, std::unique_ptr<ilogger> logger)
...
std::unique_ptr<ilogger> logger_;
```

Hmm, right now our example project isn't compiling, because `ilogger` can't be instantiated due
to pure virtual method `log` not being implemented. Well, we have to configure `Boost.DI` the way `ilogger`
will be actually instantiated by `logger`. There is nothing easier, we just have to bind `ilogger` interface to `logger` implementation.

$example_begin example/tutorial/tutorial4.cpp$
```
    auto injector = __di_make_injector__(
        __di_bind__<ilogger, logger>
      , __di_bind__<int>.to(argc > 1 ? std::atoi(argv[1]) : 0)
      , __di_bind__<std::string>.to("hello world")
    );
    injector.__di_injector_create__<std::unique_ptr<app>>()->start(); // unique_ptr is not copyable
```
$example_end$


Yay, everything is working again. But oh, we wanted to use mock framework for tests, but we can't to do it,
due to `unique_ptr` stilling our pointer :/ Well, let's say we will switch to `shared_ptr` instead for now and later in this tutorial we will solve this issue in a better way - without limiting ourselves.
Our application code will looks like that:

```
app(int value, const std::string& text, std::shared_ptr<ilogger> logger)
    : value_(value), text_(text), logger_(logger)
{ }
...
std::shared_ptr<ilogger> logger_;
```

Again, we don't have to change anything with the `Boost.DI` configuration, it will be figured out automatically for us.

[note `Boost.DI` will by default __scopes_deduce__ based on parameter type, therefore `shared_ptr` will be shared between many instances.]
[warning If we pass raw pointer anywhere it always be our responsibility to delete it, `Boost.DI` will NEVER do it for us!]

Finally we were able to test our example application easier :)

Yea, but this example is really easy, writing whole configuration within the main function is a bit smelly, what to do?
Well, we can define module for our configuration. Module is a class with `configure` method returning dependencies configuration - see __modules__ for further information.
So, let's do it.

```
class module {
public:
    explicit module(int value)
        : value_(value)
    { }

    auto configure() const {
        return __di_make_injector__(
            __di_bind__<ilogger, ilogger>
          , __di_bind__<int>.to(value_)
          , __di_bind__<std::string>.to("hello world")
        );
    }

private:
    int value_ = 0;
};
```

and the main function

$example_begin example/tutorial/tutorial5.cpp$
```
int main(int argc, char** argv) {
    auto injector = __di_make_injector__(module{argc > 1 ? std::atoi(argv[1]) : 0});
    injector.__di_injector_create__<app>().run();

    return 0;
}

```
$example_end$

But using `auto` force us to write module only in a header file. Such approach might not be suitable for large projects. In order to be able to write
implementation in cpp file we are going to use module with explicit exposed type.
The only thing we have to change is declaration of configure method and obviously write the definition as well.

$example_begin example/tutorial/tutorial6.cpp$
```
class module {
public:
    explicit module(int value)
        : value_(value)
    { }

    di::injector<app> configure() const {
        return __di_make_injector__(
            __di_bind__<ilogger, ilogger>
          , __di_bind__<int>.to(value_)
          , __di_bind__<std::string>.to("hello world")
        );
    }

private:
    int value_ = 0;
};
```
$example_end$

Our main function is not going to change, we still create `app`.

[note Many types might be exposed using __di_injector__<...>.]

But in our company we have our `string` implementation, but we still want to support `std::string` as well, how to achieve that?
For purpose of this tutorial let's assume our `custom_string` converts to `std::string`.
Well, we will have to add second constructor accepting custom string, but then we will have 2 constructors
taking 3 parameters, that will be ambiguous. How `Boost.DI` will be able to figure out which one to use? Short answer - it won't, we will have
to point which constructor we want to be used by `Boost.DI`. We do it using __injections_boost_di_inject__ macro. Let's do it!

```
class app {
public:
    __injections_boost_di_inject__(app, int value, const std::string& text, std::shared_ptr<ilogger> logger) // inform Boost.DI to inject dependencies using this constructor
        : value_(value), text_(text), logger_(logger)
    { }

    app(int value, const custom_string& text, std::shared_ptr<ilogger> logger)
        : value_(value), text_(text), logger_(logger)
    { }

    void run() const {
        if (value_) {
            logger_->log(text_);
        }
    }

private:
    int value_ = 0;
    std::string text_;
};
```

[note We don't need to specify __injections_boost_di_inject__ if there is a constructor with more parameters, `Boost.DI` will always use the constructor with the longest parameter list.]

Hmm, so what if I have two command line parameters passed by user, how to distinguish them?
We have few options in order to do so, some of them are more intrusive and some are less. First
we can define different types for both of them. We can use __annotations_named__ parameters provided by `Boost.DI`.

```
    auto first = []{};
    auto second = []{};
...
    __injections_inject__(app, (__annotations_named__ = first) int value1, (__annotations_named__ = second) int value2, const std::string& text, std::shared_ptr<ilogger> logger)
```

[note __annotations_named__ is just an annotation in constructor declaration and is not changing constructor parameters itself.]

```
    app::app(int value1, int value2, const std::string& text, std::shared_ptr<ilogger> logger)
```

```
    __injections_inject__(app, (__annotations_named__ = first) int value1, (__annotations_named__ = second) int value2, const std::string& text, std::shared_ptr<ilogger> logger)
```

Or no intrusive way - when we can't change [link di.examples.constructor_signature constructor signature] for example - by using __injections_ctor_traits__ to achieve __annotations_named__ parameters.

```
    app(int value1, int value2, const std::string& text, std::shared_ptr<ilogger> logger)
```

```
    namespace boost {
    namespace di {

    template<>
    struct ctor_traits<app> {
        __injections_boost_di_inject_traits__((__annotations_named__ = first) int, (__annotations_named__ = second) int, const std::string&, std::shared_ptr<ilogger> logger);
    };

    }} //boost::di
```

[tip __injections_boost_di_inject_traits__ might be defined within a class as well.]

Right now, if we want to bind `value1` and `value2` we just need to use __annotations_named__ property of __bindings_bind__.

$example_begin example/tutorial/tutorial7.cpp$
```
    auto configure() const {
        return __di_make_injector__(
            __di_bind__<ilogger, logger>
          , __di_bind__<int>.__annotations_named__(first).to(i_) // bind int named first to i_ member
          , __di_bind__<int>.__annotations_named__(second).to(0) // bind int named second to 0
          , __di_bind__<std::string>.to("hello world")
        );
    }
```
$example_end$

With such configuration `value1` will be set to first `int` command line argument and `value2` to `0`.

That's pretty much it. Hope this tutorial helped you a bit with understanding
basics concept of dependency injection framework and that creation of dependencies won't be
a problem for you anymore.

[heading See Also]
* [link di.quick_user_guide Quick User Guide]
* [link di.overview.diagnostic_messages Diagnostic messages]
* [link di.overview.performance Performance]
* [link di.user_guide User Guide]
* [link di.examples Examples]

[endsect]

