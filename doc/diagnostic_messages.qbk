[/
 /
 / Copyright (c) 2012-2015 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section Diagnostic messages]

Error messages were produced using [link di.user_guide.concepts concepts].

$example_begin example/errors/create_interface_without_bound_implementation.cpp$
[table
[[Create interface without bound implementation][Error message]]
    [
        [
            ```
            auto injector = __di_make_injector__();
            injector.__di_injector_create__<unique_ptr<i1>>();
            ```
        ]
        [
            ```
            error: allocating an object of abstract class type 'i1' return new (nothrow) T{forward<TArgs>(args)...};
            ```
        ]
    ]
]
$example_end$

$example_begin example/errors/ambigious_binding.cpp$
[table
[[Ambiguous binding][Error message]]
    [
        [
            ```
            __di_make_injector__(
                __di_bind__<int>.to(42)
              , __di_bind__<int>.to(87) // [di::override]]
            );
            ```
        ]
        [
            ```
            error: base class 'pair<int, no_name>' specified more than once as a direct base class
            ```
        ]
    ]
]
$example_end$

$example_begin example/errors/create_not_bound_object_with_all_bound_policy.cpp$
[table
[[Create not bound object with all bound policy][Error message]]
    [
        [
            ```
            class must_be_bound : public __di_config__ {
            public:
                static auto policies(...) {
                    using namespace di::policies;
                    return __di_make_policies__(
                        constructible(is_bound<_>{})
                    );
                }
            };

            auto injector = __di_make_injector__<must_be_bound>();
            injector.__di_injector_create__<int>();
            ```
        ]
        [
            ```
            error: static_assert failed "Type T is not allowed"
            ```
        ]
    ]
]
$example_end$

$example_begin example/errors/expose_type_without_bound_implementation.cpp$
[table
[[Expose type without bound implementation][Error message]]
    [
        [
            ```
            struct example {
                example(unique_ptr<interface>) { }
            };

            __di_injector__<example> injector = __di_make_injector__();
            ```
        ]
        [
            ```
            error: static_assert failed "Type T is not allowed"
            ```
        ]
    ]
]
$example_end$


[heading See Also]
* [link di.overview.performance Performance]
* [link di.user_guide User Guide]
* [link di.examples Examples]

[endsect]

