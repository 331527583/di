[/
 /
 / Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section:injections Constructor Injections]

[*Constructor Injection] is the most powerful of the available injections.
It guarantees initialized state of data members. `Boost.DI` [link di.concepts.injections.automatic constructor injection] is achieved without any additional work from the user except defining the constructor.

```
    class example {
    public:
        example() { }
        example(int i) : i(i) { }
        example(int i, double d) // will be deduced by `Boost.DI` and int, double will be injected
            : i(i), d(d)
        { }

        int i = 0;
        double d = 0.0;
    };

    auto example_ = __di_make_injector__().__di_injector_create__<example>();
    assert(0 == example_.i);
    assert(0.0 == example_.d);
```

[heading See Also]

* __injections_automatic__
* __injections_boost_di_inject__
* __injections_boost_di_inject_traits__
* __injections_ctor_traits__

[section:automatic automatic (default)]

[heading Description]
`Boost.DI` will deduce the best available constructor to be used for injection - unique constructor with [*the longest parameter list] - see __rationale_constructor_parameters_deduction__ for further reading.
If the default behavior should be changed constructor have to be explicitly marked with __injections_boost_di_inject__ or __injections_boost_di_inject_traits__.

[heading Synopsis]
    class example {
    public:
        example(parameter1, parameter2, ..., parameterN);
    };

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`parameterX`][None][Constructor parameter]]
]

[heading Header]
    #include <__di_hpp__>

[heading Example]
    class example {
    public:
        example(int) : params(1) { }
        example(int, double) : params(2) { }
        example(int, double, float) : params(3) { } // will be deduced by Boost.DI

        int params = 0;
    };

    class example_with_different_constructor_signature {
    public:
        example_with_different_constructor_signature(int) : params(1) { }
        example_with_different_constructor_signature(int, double) : params(2) { }
        example_with_different_constructor_signature(float, double, int) : params(3) { } // will be deduced by Boost.DI

        int params = 0;
    };

    auto injector = __di_make_injector__(); // use the same configuration to create different `example` objects

    assert(3 == injector.__di_injector_create__<example>().params);
    assert(3 == injector.__di_injector_create__<example_with_different_constructor_signature>().params);

[note Automatic constructor parameters deduction is limited to [link di.overview.configuration BOOST_DI_CFG_CTOR_LIMIT_SIZE], which by defaults is set to `10`.]
[note `Boost.DI` is not able to distinguish between ambiguous constructors with the same ([*longest]) amount of parameters, then __injections_boost_di_inject__ has to be used to point which constructor should be deduced.]
[warning In `C++03` constructors with one argument might be ambiguous with copy constructor, therefore is advised to always use __injections_boost_di_inject__ for 1 argument constructors in `C++03`.]

[heading More Examples]
    ``__examples_constructor_injection__`` | ``__examples_constructor_signature__``

[heading Tests]
    ``[@test/vt/compiler_support_vt.cpp]``

[heading See Also]

* __injections__
* __injections_automatic__
* __injections_boost_di_inject__
* __injections_boost_di_inject_traits__
* __injections_ctor_traits__

[endsect]

[section BOOST_DI_INJECT]

[heading Description]
`BOOST_DI_INJECT` is a macro definition used to explicitly say `Boost.DI` which constructor should be used.
When class has more than one constructor `Boost.DI` will by default choose the one with
[*the longest parameter list]. In case of constructors ambiguity `Boost.DI` is not able to choose the best one.
Then `BOOST_DI_INJECT` become handy to point which constructor should be used.

[heading Synopsis]
    #define BOOST_DI_INJECT(type, ...)
        static void BOOST_DI_INJECTOR(__VA_ARGS__);
        type(__VA_ARGS__)

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`type`][None][Class type]]
    [[`...`][None][Constructor parameters]]
]

[heading Expression Semantics]
    BOOS_DI_INJECT(explicit example, int = 0, double = 0.0);

[*Preprocessed type]:
```
    void boost_di_injector__(int = 0, double = 0.0);
    explicit example(int = 0, double = 0.0);
```

[heading Header]
    #include <__di_inject_hpp__>

[heading Example]
    class example {
    public:
        example(int);
        BOOS_DI_INJECT(example, int, double); // will be chosen by Boost.DI
        example(int, double, float);
    };

    __di_make_injector__().__di_injector_create__<example>(); // compile clean

[note In `C++03` additional brackets are needed: `BOOST_DI_INJECT(example, (int, double))`.]
[tip Requirement of brackets in `BOOST_DI_INJECT` might be switched with [link di.overview.configuration BOOST_DI_CFG_INJECT_VA_ARGS] and [link di.overview.configuration BOOST_DI_CFG_INJECT_BRACKET].]

[heading More Examples]
    ``__examples_constructor_injection__``

[heading Tests]
    ``[@test/ut/inject_va_args_ut.cpp]`` | ``[@test/ut/inject_bracket_ut.cpp]``

[heading See Also]

* __injections__
* __injections_automatic__
* __injections_boost_di_inject_traits__
* __injections_ctor_traits__

[endsect]

[section BOOST_DI_INJECT_TRAITS]

[heading Description]
`BOOST_DI_INJECT_TRAITS` is a macro definition used to define constructor traits.

[heading Synopsis]
    #define BOOST_DI_INJECT_TRAITS(...)
        static void BOOST_DI_INJECTOR(__VA_ARGS__)

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`...`][None][Constructor parameters]]
]

[heading Expression Semantics]
    BOOST_DI_INJECT_TRAITS(int, double, float);

[*Preprocessed type]:
```
    void boost_di_injector__(int, double, float);
```

[heading Header]
    #include <__di_inject_hpp__>

[heading Example]
    class example {
    public:
        BOOST_DI_INJECT_TRAITS(int, double);
        example(int, double);
        example(double, int);
    };

    __di_make_injector__().__di_injector_create__<example>(); // compile clean

[heading Example - default value]
    class example {
    public:
        BOOST_DI_INJECT_TRAITS(int);
        explicit example(int i, double d = 42.0)
            : i(i)
            , d(d)
        { }

        int i = 0;
        double d = 0.0;
    };

    auto example_ = __di_make_injector__().__di_injector_create__<example>();
    assert(0 == example_.i_);
    assert(42.0 == example_.d_)

[heading More Examples]
    ``__examples_constructor_injection__``

[heading Tests]
    ``[@test/ut/inject_va_args_ut.cpp]`` | ``[@test/ut/inject_bracket_ut.cpp]``

[heading See Also]

* __injections__
* __injections_automatic__
* __injections_boost_di_inject__
* __injections_ctor_traits__

[endsect]

[section ctor_traits]

[heading Description]
Constructor traits let explicitly specify constructor parameters in no intrusive way.
In case of third party libraries or to be less intrusive in case of ambiguous constructors `constructor traits`
might be defined in order to point which constructor should be used by `Boost.DI`.

[heading Synopsis]
    template<typename T>
    struct ctor_traits {
        __injections_boost_di_inject_traits__(parameter1, parameter2, ..., parameterN);
    };

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`parameterX`][None][`X` constructor parameter]]
]

[heading Header]
    #include <__di_hpp__>

[heading Example]
    class example {
    public:
        example(int, double, float);
    };

    namespace boost { namespace di {

    template<>
    struct ctor_traits<example> {
        __injections_boost_di_inject_traits__(int, double, float);
    };

    }} // boost::di

    __di_make_injector__().__di_injector_create__<example>(); // compile clean

[heading More Examples]
    ``__examples_constructor_injection__`` | ``__examples_constructor_traits_generator__``

[heading Tests]
    ``[@test/ut/type_traits/ctor_traits_ut.cpp]``

[heading See Also]

* __injections__
* __injections_automatic__
* __injections_boost_di_inject__
* __injections_boost_di_inject_traits__

[endsect]

[endsect]

