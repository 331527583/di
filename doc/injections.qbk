[/
 /
 / Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section:injections Injections]

[*Constructor Injection] is the most powerful of the available injections.
It guarantees initialized state of data members. `Boost.DI` [link di.user_guide.injections.automatic constructor injection] is achieved without any additional work from the user.

```
    class example {
    public:
        example() { }
        example(int i) : i(i) { }
        example(int i, double d) // will be deduced by `Boost.DI` and int, double will be injected
            : i(i), d(d)
        { }

        int i = 0;
        double d = 0.0;
    };

    auto example_ = __di_make_injector__().__di_injector_create__<example>();
    assert(0 == example_.i);
    assert(0.0 == example_.d);
```

[heading See Also]

* __injections_automatic__
* __injections_inject__
* __injections_ctor_traits__

[section:automatic automatic (default)]

[heading Description]
`Boost.DI` will deduce the best available constructor to be used for injection - unique constructor with [*the longest parameter list].
If the default behavior should be changed constructor has to be explicitly marked with __injections_boost_di_inject__ or __injections_boost_di_inject_traits__.

[heading Synopsis]
    class ctor {
    public:
        ctor(parameter1, parameter2, ..., parameterN);
    };

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`parameterN`][None][`N` constructor parameter]]
]

[heading Header]
    #include <__di_hpp__>

[heading Example]
[table
[[Direct constructor injection][]]
    [
        [
            ```
            struct c {
                c(int a, double d) : a(a), d(d) { }

                int a = 0;
                double d = 0.0;
            };

            auto injector = __di_make_injector__(
                __di_bind__<int>.to(42)
              , __di_bind__<double>.to(87.0)
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<c>();
            assert(42 == object.a);
            assert(87.0 == object.d);
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Aggregate constructor injection][]]
    [
        [
            ```
            struct c {
                int a = 0;
                double d = 0.0;
            };

            auto injector = __di_make_injector__(
                __di_bind__<int>.to(42)
              , __di_bind__<double>.to(87.0)
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<c>();
            assert(42 == object.a);
            assert(87.0 == object.d);
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Direct constructor injection with many constructors
  (longest parameters list constructor will be chosen)][]]
    [
        [
            ```
            struct c {
                c();
                c(int a) : a(a) { }
                c(int a, double d) : a(a), d(d) { }

                int a = 0;
                double d = 0.0;
            };

            auto injector = __di_make_injector__(
                __di_bind__<int>.to(42)
              , __di_bind__<double>.to(87.0)
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<c>();
            assert(42 == object.a);
            assert(87.0 == object.d);
                                                                                                                       .
            ```
        ]
    ]
]

[note Automatic constructor parameters deduction is limited to [link di.overview.configuration BOOST_DI_CFG_CTOR_LIMIT_SIZE], which by defaults is set to `10`.]
[note `Boost.DI` is not able to distinguish between ambiguous constructors with the same ([*longest]) amount of parameters, then __injections_boost_di_inject__ has to be used to point which constructor should be deduced.]

[heading More Examples]
    ``__examples_constructor_injection__`` | ``__examples_constructor_signature__``

[heading See Also]

* __injections__
* __injections_inject__
* __injections_ctor_traits__

[endsect]

[section inject]

[heading BOOST_DI_INJECT]

[heading Description]
`BOOST_DI_INJECT` is a macro definition used to explicitly say `Boost.DI` which constructor should be used as well as in order to annotate types - see __annotations__ for further reding.
When class has more than one constructor `Boost.DI` will by default choose the one with
[*the longest parameter list]. In case of constructors ambiguity `Boost.DI` is not able to choose the best one.
Then `BOOST_DI_INJECT` become handy to point which constructor should be used.

[heading Synopsis]
    BOOST_DI_INJECT(Type, ...)

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`Type`][None][Class type]]
    [[`...`][None][Constructor parameters]]
]

[heading Expression Semantics]
    BOOST_DI_INJECT(explicit example, int i = 0, double 0 = 0.0);

[heading Header]
    #include <__di_inject_hpp__>

[heading Example]
[table
[[Direct constructor injection with ambiguous constructors][]]
    [
        [
            ```
            struct c {
                c(double d, int a) : a(a), d(d) { }
                __injections_boost_di_inject__(c, int a, double d)
                    : a(a), d(d) { }

                int a = 0;
                double d = 0.0;
            };

            auto injector = __di_make_injector__(
                __di_bind__<int>.to(42)
              , __di_bind__<double>.to(87.0)
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<c>();
            assert(42 == object.a);
            assert(87.0 == object.d);
                                                                                                                       .
            ```
        ]
    ]
]

[note BOOST_DI_INJECT is limited by [link di.overview.configuration BOOST_DI_CFG_CTOR_LIMIT_SIZE], which by default is set to `10` and might be between 0 and 10. In order to support more constructor parameters __injections_boost_di_inject_traits_no_limits__ has to be used.]

[heading More Examples]
    ``__examples_constructor_injection__``

[heading BOOST_DI_INJECT_TRAITS]

[heading Description]
`BOOST_DI_INJECT_TRAITS` is a macro definition used to define constructor traits.

[heading Synopsis]
    BOOST_DI_INJECT_TRAITS(...)

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`...`][None][Constructor parameters]]
]

[heading Expression Semantics]
    BOOST_DI_INJECT_TRAITS(int, double, float);

[heading Header]
    #include <__di_inject_hpp__>

[heading Example]
[table
[[Direct constructor injection with ambiguous constructors][]]
    [
        [
            ```
            struct c {
                __injections_boost_di_inject_traits__(int, double);
                c(double d, int a) : a(a), d(d) { }
                c(int a, double d) : a(a), d(d) { }

                int a = 0;
                double d = 0.0;
            };

            auto injector = __di_make_injector__(
                __di_bind__<int>.to(42)
              , __di_bind__<double>.to(87.0)
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<c>();
            assert(42 == object.a);
            assert(87.0 == object.d);
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Direct constructor injection with selected constructor][]]
    [
        [
            ```
            struct example {
                __injections_boost_di_inject_traits__(int);
                example(int) : i(i) { }
                example(int, double) : i(i), d(d) { }

                int i = 0;
                double d = 0.0;
            };
                                                                                               .
            ```
        ]
        [
            ```
            auto object = __di_make_injector__().__di_injector_create__<example>();
            assert(0 == object.i);
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Direct constructor injection with default value][]]
    [
        [
            ```
            class example {
            public:
                __injections_boost_di_inject_traits__(int);
                explicit example(int i, double d = 42.0)
                    : i(i) , d(d)
                { }

                int i = 0;
                double d = 0.0;
            };
                                                                                               .
            ```
        ]
        [
            ```
            auto object = __di_make_injector__().__di_injector_create__<example>();
            assert(0 == object.i);
            assert(42.0 == object.d)
                                                                                                                       .
            ```
        ]
    ]
]

[heading More Examples]
    ``__examples_constructor_injection__``

[heading BOOST_DI_INJECT_TRAITS_NO_LIMITS]

[heading Description]
`BOOST_DI_INJECT_TRAITS_NO_LIMITS` is similar to __injections_boost_di_inject_traits__, but it's not limited by [link di.overview.configuration BOOST_DI_CFG_CTOR_LIMIT_SIZE]
and doesn't support __annotations__. Useful for generated constructors.

[heading Synopsis]
    BOOST_DI_INJECT_TRAITS_NO_LIMITS(...)

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`...`][None][Constructor parameters]]
]

[heading Expression Semantics]
    BOOST_DI_INJECT_TRAITS_NO_LIMITS(int i = 0, double 0 = 0.0);

[heading Header]
    #include <__di_inject_hpp__>

[heading Example]
[table
[[Constructor with long parameters list][]]
    [
        [
            ```
            struct c {
                __injections_boost_di_inject_traits_no_limits__(
                    int, int, int, int, int, int, int, int, int, int
                  , int, int, int, int, int, int, int, int, int, int
                  , int, int, int, int, int, int, int, int, int, int
                );

                c(int, int, int, int, int, int, int, int, int, int
                , int, int, int, int, int, int, int, int, int, int
                , int, int, int, int, int, int, int, int, int, int);
            };

            auto injector = __di_make_injector__();
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<c>(); // compile clean
                                                                                                                       .
            ```
        ]
    ]
]

[heading More Examples]
    ``__examples_constructor_injection__``

[heading See Also]

* __injections__
* __injections_automatic__
* __injections_ctor_traits__

[endsect]

[section ctor_traits]

[heading Description]
Constructor traits let explicitly specify constructor parameters in no intrusive way.
In case of third party libraries or to be less intrusive in case of ambiguous constructors `constructor traits`
might be defined in order to point which constructor should be used by `Boost.DI`.

[heading Synopsis]
    template<typename T>
    struct ctor_traits {
        __injections_boost_di_inject_traits__(parameter1, parameter2, ..., parameterN);
    };

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`parameterN`][None][`N` constructor parameter]]
]

[heading Header]
    #include <__di_hpp__>

[heading Example]
[table
[[Direct constructor injection with ambiguous constructors][]]
    [
        [
            ```
            struct c {
                c(double d, int a) : a(a), d(d) { }
                c(int a, double d) : a(a), d(d) { }

                int a = 0;
                double d = 0.0;
            };

            namespace boost { namespace di {
            template<>
            struct __injections_ctor_traits__<c> {
                __injections_boost_di_inject_traits__(int, double);
            };
            }} // boost::di

            auto injector = __di_make_injector__(
                __di_bind__<int>.to(42)
              , __di_bind__<double>.to(87.0)
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<c>();
            assert(42 == object.a);
            assert(87.0 == object.b);
                                                                                                                       .
            ```
        ]
    ]
]
[table
[[Direct constructor injection with annotations][]]
    [
        [
            ```
            auto int_a = []{};
            auto int_b = []{};

            struct c {
                c(int a, int b) : a(a), b(b) { }

                int a = 0;
                int b = 0;
            };

            namespace boost { namespace di {
            template<>
            struct __injections_ctor_traits__<c> {
                __injections_boost_di_inject_traits__((named = int_a) int, (named = int_b) int);
            };
            }} // boost::di

            auto injector = __di_make_injector__(
                __di_bind__<int>.named(a).to(42)
              , __di_bind__<int>.named(b).to(87)
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<c>();
            assert(42 == object.a);
            assert(87 == object.b);
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Direct constructor injection with no limits injection][]]
    [
        [
            ```
            struct c {
                c(int, int, int, int, int, int, int, int, int, int
                , int, int, int, int, int, int, int, int, int, int
                , int, int, int, int, int, int, int, int, int, int);
            };


            namespace boost { namespace di {
            template<>
            struct __injections_ctor_traits__<c> {
                __injections_boost_di_inject_traits_no_limits__(
                    int, int, int, int, int, int, int, int, int, int
                  , int, int, int, int, int, int, int, int, int, int
                  , int, int, int, int, int, int, int, int, int, int
                );

            };
            }} // boost::di

            auto injector = __di_make_injector__();
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<c>(); // compile clean
                                                                                                                       .
            ```
        ]
    ]
]

[heading More Examples]
    ``__examples_constructor_injection__``

[heading See Also]

* __injections__
* __injections_automatic__
* __injections_inject__

[endsect]

[endsect]

