[/
 /
 / Copyright (c) 2012-2015 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section Quick User Guide]

Let's assume all examples below include `boost/di.hpp` header and define `di` namespace alias.
```
#include <__di_hpp__>

namespace di = boost::di;

struct i1 { virtual ~i1() = default; virtual void dummy1() = 0; };
struct i2 { virtual ~i2() = default; virtual void dummy2() = 0; };
struct impl1 : i1 { void dummy1() override { } };
struct impl2 : i2 { void dummy2() override { } };
struct impl : i1, i2 { void dummy1() override { } void dummy2() override { } };
```

* __injector__

[table
[[create empty injector][Test]]
    [
        [
            ```
            auto injector = __di_make_injector__();
                                                                                               .
            ```
        ]
        [
            ```
            assert(0 == injector.__di_injector_create__<int>());
                                                                                                                       .
            ```
        ]
    ]
]

* __bindings__

[table
[[Bind interface to implementation][Test]]
    [
        [
            ```
            auto injector = __di_make_injector__(
                __di_bind__<i1, impl1>
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<unique_ptr<i1>>();
            assert(dynamic_cast<impl1*>(object.get()));
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Bind different interfaces to one][Test]]
    [
        [
            ```
            auto injector = __di_make_injector__(
                __di_bind__<__bindings_any_of__<i1, i2>, impl>
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object1 = injector.__di_injector_create__<shared_ptr<i1>>();
            auto object2 = injector.__di_injector_create__<shared_ptr<i2>>();
            assert(dynamic_cast<impl*>(object1.get()));
            assert(dynamic_cast<impl*>(object2.get()));
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Bind type to compile time value][Test]]
    [
        [
            ```
            template<int N> using int_ = integral_constant<int, N>;

            auto injector = __di_make_injector__(
                __di_bind__<int, int_<42>>
            );
                                                                                               .
            ```
        ]
        [
            ```
            assert(42 == injector.__di_injector_create__<int>());
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Bind type to value (see __scopes_external__)][Test]]
    [
        [
            ```
            auto injector = __di_make_injector__(
                __di_bind__<int>.to(42)
            );
                                                                                               .
            ```
        ]
        [
            ```
            assert(42 == injector.__di_injector_create__<int>());
                                                                                                                       .
            ```
        ]
    ]
]

* __injections__

[table
[[Direct constructor injection][Test]]
    [
        [
            ```
            struct c {
                c(int a, double d) : a(a), d(d) { }

                int a = 0;
                double d = 0.0;
            };

            auto injector = __di_make_injector__(
                __di_bind__<int>.to(42)
              , __di_bind__<double>.to(87.0)
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<c>();
            assert(42 == object.a);
            assert(87.0 == object.d);
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Aggregate constructor injection][Test]]
    [
        [
            ```
            struct c {
                int a = 0;
                double d = 0.0;
            };

            auto injector = __di_make_injector__(
                __di_bind__<int>.to(42)
              , __di_bind__<double>.to(87.0)
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<c>();
            assert(42 == object.a);
            assert(87.0 == object.d);
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Direct constructor injection with many constructors][Test]]
[[Longest parameters list constructor will be chosen][]]
    [
        [
            ```
            struct c {
                c();
                c(int a) : a(a) { }
                c(int a, double d) : a(a), d(d) { }

                int a = 0;
                double d = 0.0;
            };

            auto injector = __di_make_injector__(
                __di_bind__<int>.to(42)
              , __di_bind__<double>.to(87.0)
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<c>();
            assert(42 == object.a);
            assert(87.0 == object.d);
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Direct constructor injection with ambiguous constructors (__injections_boost_di_inject__)][Test]]
    [
        [
            ```
            struct c {
                c(double d, int a) : a(a), d(d) { }
                __injections_boost_di_inject__(c, int a, double d)
                    : a(a), d(d) { }

                int a = 0;
                double d = 0.0;
            };

            auto injector = __di_make_injector__(
                __di_bind__<int>.to(42)
              , __di_bind__<double>.to(87.0)
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<c>();
            assert(42 == object.a);
            assert(87.0 == object.d);
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Direct constructor injection with ambiguous constructors (__injections_boost_di_inject_traits__)][Test]]
    [
        [
            ```
            struct c {
                __injections_boost_di_inject_traits__(int, double);
                c(double d, int a) : a(a), d(d) { }
                c(int a, double d) : a(a), d(d) { }

                int a = 0;
                double d = 0.0;
            };

            auto injector = __di_make_injector__(
                __di_bind__<int>.to(42)
              , __di_bind__<double>.to(87.0)
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<c>();
            assert(42 == object.a);
            assert(87.0 == object.d);
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Direct constructor injection with ambiguous constructors (__injections_ctor_traits__)][Test]]
    [
        [
            ```
            struct c {
                c(double d, int a) : a(a), d(d) { }
                c(int a, double d) : a(a), d(d) { }

                int a = 0;
                double d = 0.0;
            };

            namespace boost { namespace di {
            template<>
            struct __injections_ctor_traits__<c> {
                __injections_boost_di_inject_traits__(int, double);
            };
            }} // boost::di

            auto injector = __di_make_injector__(
                __di_bind__<int>.to(42)
              , __di_bind__<double>.to(87.0)
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<c>();
            assert(42 == object.a);
            assert(87.0 == object.d);
                                                                                                                       .
            ```
        ]
    ]
]

* __annotations__

[table
[[Annotated constructor injection][Test]]
    [
        [
            ```
            auto int1 = []{};
            auto int2 = []{};

            struct c {
                __injections_boost_di_inject__(c
                    , (__annotations_named__ = int1) int a
                    , (__annotations_named__ = int2) int b)
                    : a(a), b(b)
                { }

                int a = 0;
                int b = 0;
            };

            auto injector = __di_make_injector__(
                __di_bind__<int>.__annotations_named__(int1).to(42)
              , __di_bind__<int>.__annotations_named__(int2).to(87)
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<c>();
            assert(42 == object.a);
            assert(87 == object.b);
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Annotated constructor injection with the same names for different parameters][Test]]
    [
        [
            ```
            auto n1 = []{};
            auto n2 = []{};

            struct c {
                __injections_boost_di_inject__(c
                    , (__annotations_named__ = n1) int i1
                    , (__annotations_named__ = n1) int i2
                    , (__annotations_named__ = n2) int i3
                    , int i4
                    , (__annotations_named__ = n1) string s)
                    : i1(i1), i2(i2), i3(i3), i4(i4), s(s)
                { }

                int i1 = 0;
                int i2 = 0;
                int i3 = 0;
                int i4 = 0;
                string s;
            };

            auto injector = __di_make_injector__(
                __di_bind__<int>.__annotations_named__(n1).to(42)
              , __di_bind__<int>.__annotations_named__(n2).to(87)
              , __di_bind__<string>.__annotations_named__(n1).to("str")
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<c>();
            assert(42 == object.i1);
            assert(42 == object.i2);
            assert(87 == object.i3);
            assert(0 == object.i3);
            assert("str" == c.s);
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Annotated constructor injection with separate constructor definition  ][Test]]
    [
        [
            ```
            auto int1 = []{};
            auto int2 = []{};

            struct c {
                __injections_boost_di_inject__(c
                    , (__annotations_named__ = int1) int a
                    , (__annotations_named__ = int2) int b);

                int a = 0;
                int b = 0;
            };

            c::c(int a, int b) : a(a), b(b) { }

            auto injector = __di_make_injector__(
                __di_bind__<int>.__annotations_named__(int1).to(42)
              , __di_bind__<int>.__annotations_named__(int2).to(87)
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<c>();
            assert(42 == object.a);
            assert(87 == object.b);
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Annotated constructor injection with __injections_ctor_traits__][Test]]
    [
        [
            ```
            auto int1 = []{};
            auto int2 = []{};

            struct c {
                c(int a, int b) : a(a), b(b) { }

                int a = 0;
                int b = 0;
            };

            namespace boost { namespace di {
            template<>
            struct ctor_traits<c> {
                __injections_boost_di_inject_traits__(
                    (__annotations_named__ = int1) int
                  , (__annotations_named__ = int2) int);
            };
            }} // boost::di

            auto injector = __di_make_injector__(
                __di_bind__<int>.__annotations_named__(int1).to(42)
              , __di_bind__<int>.__annotations_named__(int2).to(87)
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<c>();
            assert(42 == object.a);
            assert(87 == object.b);
                                                                                                                       .
            ```
        ]
    ]
]

* __scopes__

[table
[[Deduce scope (default)][Test]]
    [
        [
            ```
            struct c {
                shared_ptr<i1> sp; /*singleton*/
                unique_ptr<i2> up; /*unique*/
                int& i; /*external*/
                double d; /*unique*/
            };

            auto i = 42;

            auto injector = __di_make_injector__(
                __di_bind__<i1, impl1>
              , __di_bind__<i2, impl2>
              , __di_bind__<int>.to(i)
              , __di_bind__<double>.to(87.0)
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object1 = injector.__di_injector_create__<unique_ptr<c>>();
            auto object2 = injector.__di_injector_create__<unique_ptr<c>>();
            assert(object1->sp == object2->sp);
            assert(object1->up != object2->up);
            assert(42 == object1->i);
            assert(&i == &object1->i;
            assert(42 == object2->i);
            assert(&i == &object2->i);
            assert(87.0 == object1->d);
            assert(87.0 == object2->d);
                                                                                                                       .
            ```
        ]
    ]
]

[table Scope deduction
    [[Type][Scope]]
    [[T][__di_scopes_unique__]]
    [[T&][error - has to be bound as external]]
    [[const T&][__di_scopes_unique__ (temporary)]]
    [[T*][__di_scopes_unique__ (ownership transfer)]]
    [[const T*][__di_scopes_unique__ (ownership transfer)]]
    [[T&&][__di_scopes_unique__]]
    [[unique_ptr<T>][__di_scopes_unique__]]
    [[shared_ptr<T>][__di_scopes_singleton__]]
    [[weak_ptr<T>][__di_scopes_singleton__]]
]

[table
[[Unique scope][Test]]
    [
        [
            ```
            auto injector = __di_make_injector__(
                __di_bind__<i1, impl1>.in(__di_scopes_unique__)
            );

                                                                                               .
            ```
        ]
        [
            ```
            assert(injector.__di_injector_create__<shared_ptr<i1>>()
                   !=
                   injector.__di_injector_create__<shared_ptr<i1>>()
            );
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Shared scope (shared per one thread)][Test]]
    [
        [
            ```
            auto injector = __di_make_injector__(
                __di_bind__<i1, impl1>.in(__di_scopes_shared__)
            );

                                                                                               .
            ```
        ]
        [
            ```
            assert(injector.__di_injector_create__<shared_ptr<i1>>()
                   ==
                   injector.__di_injector_create__<shared_ptr<i1>>()
            );
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Singleton scope (shared between threads)][Test]]
    [
        [
            ```
            auto injector = __di_make_injector__(
                __di_bind__<i1, impl1>.in(__di_scopes_singleton__)
            );

                                                                                               .
            ```
        ]
        [
            ```
            assert(injector.__di_injector_create__<shared_ptr<i1>>()
                   ==
                   injector.__di_injector_create__<shared_ptr<i1>>()
            );
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Session scope][Test]]
    [
        [
            ```
            auto my_session = []{};

            auto injector = __di_make_injector__(
                __di_bind__<i1, impl1>.in(
                    __di_scopes_session__(my_session)
                )
            );
                                                                                               .
            ```
        ]
        [
            ```
            assert(nullptr == injector.__di_injector_create__<shared_ptr<i1>>());
            injector.call(di::session_entry(my_session));
            assert(injector.__di_injector_create__<shared_ptr<i1>>()
                   ==
                   injector.__di_injector_create__<shared_ptr<i1>>()
            );
            injector.call(di::session_exit(my_session));
            assert(nullptr == injector.__di_injector_create__<shared_ptr<i1>>());
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[External scope][Test]]
    [
        [
            ```
            auto l = 42l;
            auto b = false;

            auto injector = __di_make_injector__(
               __di_bind__<int>.to(0)
             , __di_bind__<int>.to(42) [di::override]
             , __di_bind__<i1>.to(make_shared<impl>())
             , __di_bind__<long>.to(l)
             , __di_bind__<short>.to([]{return 87;})
             , __di_bind__<i2>.to(
                    [&](const auto& injector) -> shared_ptr<i2> {
                        if (b) {
                            return injector.template
                                __di_injector_create__<shared_ptr<impl2>>();
                        }
                        return nullptr;
                    }
                )
            );
                                                                                               .
            ```
        ]
        [
            ```
            assert(42 == injector.__di_injector_create__<int>());
            assert(injector.__di_injector_create__<shared_ptr<i1>>()
                   ==
                   injector.__di_injector_create__<shared_ptr<i1>>()
            );
            assert(l == injector.__di_injector_create__<long&>());
            assert(&l == &injector.__di_injector_create__<long&>());
            assert(87 == injector.__di_injector_create__<short>());

            {
            auto object = injector.__di_injector_create__<shared_ptr<i2>>();
            assert(nullptr == object);
            }

            {
            b = true;
            auto object = injector.__di_injector_create__<shared_ptr<i2>>();
            assert(dynamic_cast<impl2*>(object.get()));
            }
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Custom scope][Test]]
    [
        [
            ```
            struct custom_scope {
                template<class TExpected, class>
                struct scope {
                    template<class T, class TProvider>
                    auto __di_injector_create__(const TProvider& provider) {
                        return shared_ptr<TExpected>{provider.get()};
                    }
                };
            };

            auto injector = __di_make_injector__(
                __di_bind__<i1, impl1>.in(custom_scope{})
            );
                                                                                               .
            ```
        ]
        [
            ```
            assert(injector.__di_injector_create__<shared_ptr<i1>>()
                   !=
                   injector.__di_injector_create__<shared_ptr<i1>>()
            );
                                                                                                                       .
            ```
        ]
    ]
]

[table Scope to type conversion
    [[Type]                     [unique]                [shared]    [singleton]                   [session]         [external]]
    [[T]                        [\u2714]                [-]         [-]                            [-]              [\u2714]]
    [[T&]                       [-]                     [-]         [-]                            [-]              [\u2714]]
    [[const T&]                 [\u2714 (temporary)]    [-]         [-]                            [-]              [\u2714]]
    [[T*]                       [\u2714]                [-]         [-]                            [-]              [\u2714]]
    [[const T*]                 [\u2714]                [-]         [-]                            [-]              [\u2714]]
    [[T&&]                      [\u2714]                [-]         [-]                            [-]              [-]]
    [[unique_ptr<T>]            [\u2714]                [-]         [-]                            [-]              [\u2714]]
    [[shared_ptr<T>]            [\u2714]                [\u2714]    [\u2714]                       [\u2714]         [\u2714]]
    [[weak_ptr<T>]              [-]                     [\u2714]    [\u2714]                       [\u2714]         [-]]
]

* __modules__

[table
[[Module][Test]]
    [
        [
            ```
            struct c {
                c(unique_ptr<i1> i1
                , unique_ptr<i2> i2
                , int i) : i1(move(i1)), i2(move(i2)), i(i)
                { }

                unique_ptr<i1> i1;
                unique_ptr<i2> i2;
                int i = 0;
            };

            struct module1 {
                auto configure() const noexcept {
                    return __di_make_injector__(
                        __di_bind__<i1, impl1>
                      , __di_bind__<int>.to(42)
                    );
                }
            };

            struct module2 {
                auto configure() const noexcept {
                    return __di_make_injector__(
                        __di_bind__<i2, impl2>
                    );
                };
            };

            auto injector = __di_make_injector__(
                module1{}, module2{}
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<unique_ptr<c>>();
            assert(dynamic_cast<impl1*>(object->i1.get()));
            assert(dynamic_cast<impl2*>(object->i2.get()));
            assert(42 == object->i);

            auto up1 = injector.create<unique_ptr<i1>>();
            assert(dynamic_cast<impl1*>(up1.get()));

            auto up2 = injector.create<unique_ptr<i2>>();
            assert(dynamic_cast<impl2*>(up2.get()));
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Exposed type module][Test]]
    [
        [
            ```
            struct c {
                c(shared_ptr<i1> i1
                , shared_ptr<i2> i2
                , int i) : i1(i1), i2(i2), i(i)
                { }

                shared_ptr<i1> i1;
                shared_ptr<i2> i2;
                int i = 0;
            };

            struct module {
                __di_injector__<c> configure() const noexcept;

                int i = 0;
            };

            __di_injector__<c> // expose c
            module::configure() const noexcept {
                return __di_make_injector__(
                    __di_bind__<i1, impl1>
                  , __di_bind__<i2, impl2>
                  , __di_bind__<int>.to(i)
                );
            }

            auto injector = __di_make_injector__(
                module{42}
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<c>();
            assert(dynamic_cast<impl1*>(object.i1.get()));
            assert(dynamic_cast<impl2*>(object.i2.get()));
            asert(42 == object.i);

            // injector.create<unique_ptr<i1>>() // compile error
            // injector.create<unique_ptr<i2>>() // compile error
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Exposed many types module][Test]]
    [
        [
            ```
            struct module {
                __di_injector__<i1, i2> configure()
                const noexcept;

                int i = 0;
            };

            __di_injector__<i1, i2> // expose i1, i2
            module::configure() const noexcept {
                return __di_make_injector__(
                    __di_bind__<i1, impl1>
                  , __di_bind__<i2, impl2>
                );
            }

            auto injector = __di_make_injector__(
                module{}
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto up1 = injector.create<unique_ptr<i1>>();
            assert(dynamic_cast<impl1*>(up1.get()));

            auto up2 = injector.create<unique_ptr<i2>>();
            assert(dynamic_cast<impl2*>(up2.get()));
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Exposed type module with annotation][Test]]
    [
        [
            ```
            auto my = []{};

            struct c {
                __injections_boost_di_inject__(c
                  , (__annotations_named__ = my) unique_ptr<i1> up)
                  : up(up)
                { }

                unique_ptr<i1> up;
            };

            __di_injector__<i1> module =
                __di_make_injector__(
                    __di_bind__<i1, impl1>
                );

            auto injector = __di_make_injector__(
                __di_bind__<i1>.__annotations_named__(my).to(module)
            );
                                                                                               .
            ```
        ]
        [
            ```
            auto object = injector.__di_injector_create__<unique_ptr<c>>();
            assert(dynamic_cast<impl1*>(object->up.get()));
                                                                                                                       .
            ```
        ]
    ]
]

* __providers__

[table
[[Heap no throw provider][Test]]
    [
        [
            ```
            class heap_no_throw {
            public:
                template<
                  class // interface
                , class T // implementation
                , class TInit // direct()/uniform{}
                , class TMemory // heap/stack
                , class... TArgs>
                auto get(const TInit&, const TMemory&, TArgs&&... args) const noexcept {
                    return new (nothrow) T{forward<TArgs>(args)...};
                }
            };

            class my_provider : public __di_config__ {
            public:
                auto provider() const noexcept {
                    return heap_no_throw{};
                }
            };
                                                                                               .
            ```
        ]
        [
            ```
            // per injector policy
            auto injector = __di_make_injector__<my_provider>();
            assert(0 == injector.__di_injector_create__<int>());

            // global policy
            #define BOOST_DI_CFG my_provider
            auto injector = __di_make_injector__();
            assert(0 == injector.__di_injector_create__<int>());
                                                                                                                       .
            ```
        ]
    ]
]

* __policies__

[table
[[Define policies configuration (dump types)][Test]]
    [
        [
            ```
            class print_types_policy : public __di_config__ {
            public:
                auto policies() const noexcept {
                    return __di_make_policies__(
                        [](auto type){
                            using T = decltype(type);
                            using arg = typename T::type;
                            cout << typeid(arg).name() << endl;
                        }
                    );
                }
            };
                                                                                               .
            ```
        ]
        [
            ```
            // per injector policy
            auto injector = __di_make_injector__<print_types_policy>();
            injector.__di_injector_create__<int>(); // output: int

            // global policy
            #define BOOST_DI_CFG my_policy
            auto injector = __di_make_injector__();
            injector.__di_injector_create__<int>(); // output: int
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[Define policies configuration (dump types extended)][Test]]
    [
        [
            ```
            class print_types_info_policy : public __di_config__ {
            public:
                auto policies() const noexcept {
                    return __di_make_policies__(
                        [](auto type, auto dep, auto... ctor) {
                            using T = decltype(type);
                            using arg = typename T::type;
                            using arg_name = typename T::name;
                            using D = decltype(dep);
                            using scope = typename D::scope;
                            using expected = typename D::expected;
                            using given = typename D::given;
                            using name = typename D::name;
                            auto ctor_s = sizeof...(ctor);

                            cout << ctor_s << endl
                                << typeid(arg).name() << endl
                                << typeid(arg_name).name() << endl
                                << typeid(scope).name() << endl
                                << typeid(expected).name() << endl
                                << typeid(given).name() << endl
                                << typeid(name).name() << endl;
                        }
                    );
                }
            };
                                                                                               .
            ```
        ]
        [
            ```
            // per injector policy
            auto injector = __di_make_injector__<print_types_info_policy>(
                __di_bind__<i1, impl1>
            );

            injector.__di_injector_create__<unique_ptr<i1>>();
                // output:
                0 // ctor_size of impl1
                unique_ptr<i1> // ctor arg
                di::no_name // ctor arg name
                __di_scopes_deduce__ // scope
                i1 // expected
                impl1 // given
                no_name // dependency

            // global policy
            #define BOOST_DI_CFG my_policy
            auto injector = __di_make_injector__(
                __di_bind__<i1, impl1>
            );

            injector.__di_injector_create__<unique_ptr<i1>>();
                // output:
                0 // ctor_size of impl1
                unique_ptr<i1> // cotr arg
                di::no_name // ctor arg name
                __di_scopes_deduce__ // scope
                i1 // expected
                impl1 // given
                no_name // dependency
                                                                                                                       .
            ```
        ]
    ]
]

[table
[[`constructible` policy][Test]]
    [
        [
            ```
            #include <boost/di/policies/constructible.hpp>

            class all_must_be_bound_unless_int : public __di_config__ {
            public:
                auto policies() const noexcept {
                    using namespace di::policies;
                    using namespace di::policies::operators;

                    return __di_make_policies__(
                        constructible(is_same<_, int>{} || is_bound<_>{})
                    );
                }
            };
                                                                                               .
            ```
        ]
        [
            ```
            // global policy
            #define BOOST_DI_CFG all_must_be_bound_unless_int
            assert(0 == __di_make_injector__.__di_injector_create__<int>());
            __di_make_injector__.__di_injector_create__<double>(); // compile error
            assert(42.0 == __di_make_injector__(
                               __di_bind__<double>.to(42.0)
                           ).__di_injector_create__<double>()
            );
                                                                                                                       .
            ```
        ]
    ]
]


[note All above examples might be found in: [@https://github.com/krzysztof-jusiak/di/tree/cpp14/example/quick_user_guide]]

[heading See Also]
* [link di.diagnostic_messages Diagnostic messages]
* [link di.performance Performance]
* [link di.user_guide User Guide]
* [link di.examples Examples]
* [link di.rationale Rationale]

[endsect]

