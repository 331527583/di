[/
 /
 / Copyright (c) 2012-2016 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section Injector]
Injector is a component used for creating dependencies configuration using [link di.user_guide.bindings bindings] and resolve requested types.
`Boost.DI` injector might be composed by mixing [link di.user_guide.bindings bindings], [link di.user_guide.modules modules] and other [link di.user_guide.injector injectors].

[heading Synopsis]
    template<class... TDeps>
    class injector {
    public:
        using deps = TDeps...;

        explicit injector(const TArgs&...);

        template<class T> requires __concepts_creatable__<T>
        T create() const noexcept;

        template<class TAction>
        void call(const TAction&) const noexcept;
    };

[table Parameters
    [[Parameter][Requirement][Description][Returns][Throw]]
    [[`TDeps...`][__concepts_boundable__][__bindings__ to be used as configuration]]
    [[`deps`][__concepts_boundable__][List of dependencies]]
    [[`T`][__concepts_creatable__][Object to be created]]
    [[`TAction`][None][Action to be called for scopes having `call(const TAction&)` method]]

    [[`injector(const TArgs&...))`][None][Create __injectors_injector__ with given bindings][][Does not throw]]
    [[`create<T>())`][__concepts_creatable__][Create object `T`][`T` instance][Does not throw]]
    [[`call(const TAction&)`][None][For all scopes which have `call(const TAction&)` call it with given action][][Does not throw]]
]

[heading Type Model]
[table
    [[Type]                     [Allowance]]
    [[T]                        [\u2714]]
    [[T*]                       [\u2714]]
    [[const T*]                 [\u2714]]
    [[T&]                       [\u2714]]
    [[const T&]                 [\u2714]]
    [[T&&]                      [\u2714]]
    [[std::unique_ptr<T>]       [\u2714]]
    [[std::shared_ptr<T>]       [\u2714]]
    [[std::weak_ptr<T>]         [\u2714]]
    [[boost::shared_ptr<T>]     [\u2714]]
]

[note If expected type is `T*` or `const T*` then responsibility to delete the object is on client side. `Boost.DI` won't delete it.]

[heading Expression Semantics]
    di::injector<TDeps...>{TDeps...}

[heading Header]
    #include <__di_hpp__>

[heading Examples]
$example_begin example/quick_user_guide/injector1.cpp$

    auto injector_exposed_empty = di::injector<>;
    auto injector_empty = di::make_injector();

    auto injector = __di_make_injector__(
        injector_exposed_empty
      , injector_empty
      , __di_make_injector__()
    );

    assert(0 == injector.__di_injector_create__<int>());
$example_end$

[heading More Examples]
    ``__examples_hello_world__`` | ``__examples_modules__`` | ``__extensions_uml_dumper__`` | ``__examples_custom_provider__`` | ``__examples_custom_scope__``

[heading See Also]

* __injector_make_injector__
* __modules__
* __policies__
* __providers__

[section make_injector]

[heading Description]
Creates [link di.user_guide.injector injector] type.

[heading Synopsis]
    template<
        class TConfig = __di_config__
      , class... TBindings
    > requires __concepts_boundable__<TBindings...> && __concepts_configurable__<TConfig>
    auto make_injector(const TBindings&...) noexcept;

[table Parameters
    [[Parameter][Requirement][Description][Returns][Throw]]
    [[`TConfig`][__concepts_configurable__][Configuration]]
    [[`TBindings...`][__concepts_boundable__][Bindings to be used as configuration]]
    [[`make_injector(TBindings...)`][None][Created __di_injector__ with bindings configuration][__di_injector__<TBindings...>][Does not throw]]
]

[heading Expression Semantics]
    di::make_injector(TBindings...)

[*Return type]: __di_injector__<TBindings...>

[heading Header]
    #include <__di_hpp__>

[heading Examples]
$example_begin example/quick_user_guide/injector1.cpp$
[table
[[create empty injector][]]
    [
        [
            ```
            auto injector = __di_make_injector__();
            ```
        ]
        [
            ```
            assert(0 == injector.__di_injector_create__<int>());
            ```
        ]
    ]
]
$example_end$

[heading More Examples]
    ``__examples_hello_world__`` | ``__examples_modules__`` | ``__extensions_uml_dumper__`` | ``__examples_custom_provider__`` | ``__examples_custom_scope__`` | ``__examples_custom_policy__``

[heading See Also]

* __injector__
* __modules__
* __policies__
* __providers__

[endsect]

[endsect]

