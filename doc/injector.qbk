[/
 /
 / Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section Injector]
Injector is a component used for creating dependencies configuration using [link di.concepts.bindings bindings] and resolve requested types.
`Boost.DI` injector might be composed by mixing [link di.concepts.bindings bindings], [link di.modules modules] and other [link di.concepts.injectors.injector injectors].

[heading Synopsis]
    template<class... TDeps>
    class injector {
    public:
        using deps = TDeps...;

        explicit injector(const TArgs&...);

        template<class T> T create() const noexcept;

        template<class TAction>
        void call(const TAction&) const noexcept;
    };

[table Parameters
    [[Parameter][Requirement][Description][Returns][Throw]]
    [[`TDeps...`][__binding_model__ type][__bindings__ to be used as configuration]]
    [[`deps`][`variadic list`][List of dependencies]]
    [[`T`][None][Object to be created]]
    [[`TAction`][None][Action to be called for scopes having `call(const TAction&)` method]]

    [[`injector(const TArgs&...))`][None][Create __injectors_injector__ with given bindings][][Does not throw]]
    [[`create<T>())`][__type_model__][Create object `T`][`T` instance][Does not throw]]
    [[`call(const TAction&)`][None][For all scopes which have `call(const TAction&)` call it with given action][][Does not throw]]
]

[heading Type Model]
[table
    [[Type]                     [Allowance]]
    [[T]                        [\u2714]]
    [[T*]                       [\u2714]]
    [[const T*]                 [\u2714]]
    [[T&]                       [\u2714]]
    [[const T&]                 [\u2714]]
    [[T&&]                      [\u2714]]
    [[std::unique_ptr<T>]       [\u2714]]
    [[std::shared_ptr<T>]       [\u2714]]
    [[std::weak_ptr<T>]         [\u2714]]
    [[boost::shared_ptr<T>]     [\u2714]]
]

[note If expected type is `T*` or `const T*` then responsibility to delete the object is on client side. `Boost.DI` won't delete it.]

[heading Expression Semantics]
    di::injector<TDeps...>{TDeps...}

[heading Header]
    #include <__di_hpp__>

[heading Examples]
    auto injector_empty = di::injector<>; // empty exposed injector

    class module {
    public:
        auto configure() const {
            return __di_make_injector__(
                __di_bind__<interface0, implementation0>
            );
        }
    };

    auto injector = __di_make_injector__(
        module{}
      , __di_bind__<interface1, implementation1>
      , __di_bind__<interface2, implementation2>.in(__di_scopes_unique__)
      , __di_make_injector__(
            __di_bind__<int>.to(42)
        )
      , injector_empty
    );

    assert(42 == injector.__di_injector_create__<int>());
    assert(dynamic_cast<implementation0*>(injector.__di_injector_create__<unique_ptr<interface0>>().get()));
    assert(dynamic_cast<implementation1*>(injector.__di_injector_create__<unique_ptr<interface1>>().get()));
    assert(dynamic_cast<implementation2*>(injector.__di_injector_create__<unique_ptr<interface2>>().get()));

[heading More Examples]
    ``__examples_hello_world__`` | ``__examples_modules__`` | ``__examples_uml_dumper__`` | ``__examples_custom_provider__`` | ``__examples_custom_scope__``

[heading See Also]

* __injectors_make_injector__
* __injectors__
* __modules__
* __policies__
* __utilities_allocator__

[section make_injector]

[heading Description]
Creates [link di.concepts.injectors.injector injector] type.

[heading Synopsis]
    template<class... TBindings>
    injector<TBindings...> inline make_injector(const TBindings&...) noexcept;

[table Parameters
    [[Parameter][Requirement][Description][Returns][Throw]]
    [[`TBindings...`][__binding_model__ type][Bindings to be used as configuration]]
    [[`make_injector(TBindings...)`][None][Created __di_injector__ with bindings configuration][__di_injector__<TBindings...>][Does not throw]]
]

[heading Expression Semantics]
    di::make_injector(TBindings...)

[*Return type]: __di_injector__<TBindings...>

[heading Header]
    #include <__di_hpp__>

[heading Examples]
[table
    [[Injector][Description]]
    [[```di::make_injector()```][Create empty injector]]
    [[```di::make_injector(__di_bind__<interface, implementation>>)```][Injector with `interface` to `implementation` binding configuration]]
    [[```di::make_injector(__di_bind__<int>.to(42))```][Injector with configuration binding `42` value to `int` parameters]]
    [[```di::make_injector(__di_bind__<int>.to([]{return 42;}))```][Injector with configuration binding `int` parameters with lambda expression returning `42`]]
    [[```di::make_injector(__di_bind__<function<int()>>.to([]{return 42;}))```][Injector with configuration binding `function<int()>` parameters with lambda expression returning `42`]]
    [[```di::make_injector(__di_bind__<example>.to(cref(example)))```][Binds `example` to const reference given object]]
]

[heading Examples]
    auto injector_empty = di::make_injector();

    auto injector = di::make_injector(
        injector_empty
      , __di_bind__<interface, implementation>
      , __di_bind__<int>.to<42>
      , __di_bind__<long>.to(42l)
    );

    assert(42 == injector.__di_injector_create__<int>());
    assert(87l == injector.__di_injector_create__<long>());
    assert(dynamic_cast<implementation*>(injector.__di_injector_create__<unique_ptr<interface>>().get()));

[heading More Examples]
    ``__examples_hello_world__`` | ``__examples_modules__`` | ``__examples_uml_dumper__`` | ``__examples_custom_provider__`` | ``__examples_custom_scope__`` | ``__examples_custom_policy__``

[heading See Also]

* __injectors_injector__
* __injectors__
* __modules__
* __policies__
* __providers__

[endsect]

[endsect]

