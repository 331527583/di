[/
 /
 / Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section Rationale]

`Boost.DI` design was driven by few main goals.

* User interface should be compact and eliminate boilerplate code as much as possible (common things should be achieved in easy way and harder should be possible)
    * achieved with [link di.concepts.scopes.deduce automatic scopes deduction]

* Dependencies should be resolved during compilation time (no runtime exceptions when dependencies can't be resolved)
    * achieved with compile time dependency resolving

* Constructor injection should be as less intrusive as possible
    * see [link di.concepts.injections.automatic Constructor Injection]

* Creation overhead should be as small as possible
    * achieved with compile time dependency resolving to minimize runtime overhead

* Binding front end should be easily extensible
    * achieved with [link di.concepts.bindings.synopsis dependency model] - custom user interface for binding has to return list of [link di.concepts.bindings.synopsis dependency] models

[h6 Design]
[@images/di.png [$images/di.png [width 75%] [height 75%] ]]
Generated with [@http://plantuml.sourceforge.net PlantUML].

[table
    [ [Component] [Description] ]
    [ [__bindings__] [DSL to create dependencies representation which will be used by core to resolve types] ]
    [ [__core__] [Responsible for resolving requested types (implementation detail)] ]
    [ [__providers__] [Responsible for providings object instance] ]
    [ [__scopes__] [Responsible for maintain objects life time] ]
    [ [__wrappers__] [Responsible for conversion to required type] ]
    [ [__policies__] [Compile time assertions for types] ]
]

[endsect]

