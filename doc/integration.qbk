[/
 /
 / Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section Integration with Boost libraries]

Integration with existing libraries should be straight forward.
Usually doesn't require anything! Unless constructor can't be deduced due to ambiguity or takes variadic number of arguments.

[section Boost Meta State Machine]

[@http://www.boost.org/doc/libs/1_55_0/libs/msm/doc/HTML/index.html Boost Meta State Machine] is a library allowing you to easily and quickly define state machines of very high performance.
`Boost.MSM is a great library, unfortunately `Service Locator` pattern is used to accomplish actions/guards execution.
Such approach is hard to maintain and test. Would be great to have possibility to
implement action/guards without FSM dependency and with proper dependency injection instead.
Such functionality might be achieved with `Boost.DI` and it's presented below.

In order to support dependency injection, few changes to Boost.MSM were made.

* actions/guards list was generated from transition table
* generated list was passed into state machine constructor

With that changes in mind `Boost.DI` could have been used without more changes required.

```
#include <__di_hpp__>

struct event : euml_event<event> { };

class guard : public euml_action<guard>
{
public:
    guard() { } // for euml

    guard(shared_ptr<int> i)
        : i(i)
    { }

    bool operator()(const event&) const {
        return *i != 0;
    }

private:
    shared_ptr<int> i;
};

class action : public euml_action<action>
{
public:
    action() { } // for euml

    action(shared_ptr<int> i)
        : i(i)
    { }

    void operator()(const event&) {
        (*i)++;
    }

private:
    shared_ptr<int> i;
};

class state_machine_ : state_machine_def<state_machine_>
{
    struct state1 : state<>, euml_state<state1> { };
    struct state2 : state<>, euml_state<state2> { };

public:
    typedef state1 initial_state;

    BOOST_MSM_EUML_DECLARE_TRANSITION_TABLE((
        state1() + event() [guard] / action == state2()
    ), transition_table)
};

int main() {
    auto sm = __di_make_injector__().create<state_machine<state_machine_>>();
    sm.process_event(event());

    return 0;
}
```

Full example and implementation might be found in [@https://github.com/krzysztof-jusiak/msm Boost Meta State Machine with Dependency Injection].

[h6 Match-3 Game]

Simple Match-3 game is an example of `Boost Dependency Injection` and `Boost Meta State Machine` used together.

* [@https://github.com/krzysztof-jusiak/match3/blob/master/include/config.hpp Dependency Injection Configuration]
* [@https://github.com/krzysztof-jusiak/match3/blob/master/include/controller.hpp Meta State Machine Definition]
* [@https://github.com/krzysztof-jusiak/match3/blob/master/include/actions.hpp Actions]
* [@https://github.com/krzysztof-jusiak/match3/blob/master/include/guards.hpp Guards]

[endsect]

[endsect]

