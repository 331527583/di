'
' Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
'
' Distributed under the Boost Software License, Version 1.0.
' (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
'
@startuml

package Boost.DI {

    package user <<Rect>> {
        class named {
            named(T)
            operator T() const
        }

        class provider {
            T get() const
        }

        class make_injector {
        }

    }

    package core <<Rect>> {
        class allocator {
            T* allocate(...) const
        }
        class any_type {
            operator T()
        }
        class binder {
            typedef resolve
        }
        class creator {
            universal<T> create(policies...)
        }
        class module {
            typedef deps
            module(TArgs...)
            T create(policies...)
            T allocate(allocator, policies...)
            void visit()
            void call(TAction)
        }
        class pool {
            pool(...)
            T get() const
        }
    }

    package concepts <<Rect>> {
        class dependency {
            dependency()
            dependency(T)
            dependency<T> to(T)
        }
        class bind
        class scope
    }

    package scopes <<Rect>> {
        class deduce {
        }
        class external {
            T create()
        }
        class session {
            T create(function<T*()>)
        }
        class shared {
            T create(function<T*()>)
        }
        class unique {
            T create(function<T*()>)
        }
    }

    package policies <<Rect>> {
        class parameters_permission {
            void assert_policy() const
        }

        class circular_dependencies {
            void assert_policy() const
        }

        class creation_permission {
            void assert_policy() const
        }

        class scopes_permission {
            void assert_policy() const
        }
    }

    package wrappers <<Rect>> {
        class copy {
            T operator()(type<T>) const
        }
        class reference {
            T operator()(type<T>) const
        }
        class wrappers.shared {
            T operator()(type<T>) const
        }
        class universal {
            T operator()(type<T>) const
        }
        class value {
            T operator()(type<T>) const
        }
    }

    class injector {
        injector(TArgs...)
        T create(policies...)
        T allocate(allocate, policies...)
        void visit()
        void call(TAction)
    }

    user - injector
    user - policies
    dependency <|-- scope
    dependency <|-- bind
    injector - concepts
    injector - policies
    injector <|-- module
    scopes - wrappers
    dependency - module
    concepts - scopes

    module <|-- pool
    module --* creator
    creator --* binder
    any_type - creator
    allocator - creator
}

@enduml

