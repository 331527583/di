[/
 /
 / Copyright (c) 2014 Krzysztof Jusiak (krzysztof at jusiak dot net)
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /
 /]

[section Injectors]
Main component responsible for configuration is `injector`.
`Boost.DI` injectors might be composed by mixing bindings, modules and other injectors.

[heading Examples]
    using injector_t = __di_injector__<>; // empty injector type
    auto injector = __di_make_injector__(); // empty injector

    class module {
    public:
        auto configure() const {
            return __di_make_injector__(
                __di_bind_deduce__<implementation0>()
            );
        }
    };

    auto injector_complex = __di_make_injector__(
        module
      , __di_bind__<interface, implementation1>()
      , __di_bind_unique__<
            implementation2
        >
      , __di_make_injector__(
            __di_bind_int__<42>()
        )
      , __di_injector__<>()
    );

[heading Tests]
    ``[@test/ut/injector_ut.cpp]`` | ``[@test/mt/injector_mt.cpp]`` | ``[@test/mt/core/module_mt.cpp]``

[heading See Also]

* __modules__
* __injectors_injector__
* __injectors_make_injector__

[section injector]

[heading Description]
Injector is a component used for creating dependencies configuration using bindings.

[heading Visitor Model]
    class visitor_model {
    public:
        template<typename T>
        void operator()(const T&) const
    };

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`T`][None][Type being created]]
]


[heading Synopsis]
    template<typename... TArgs>
    class injector {
        typedef TDependecies deps;

        explicit injector(const TArgs&...);

        template<typename T, typename... TPolicies>
        T create(const TPolicies&...);

        template<typename T, typename TAllocator, typename... TPolicies>
        T allocate(const TAllocator&, const TPolicies&...) {

        template<typename T, typename TVisitor>
        T visit(const TVisitor&);

        template<typename TAction>
        void call(const TAction&);
    };

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`TArgs...`][__binding_model__ type][Bindings to be used as configuration]]
    [[`TDependecies`][`mpl::vector`][List of dependencies]]
    [[`T`][None][Object to be created]]
    [[`TPolicies...`][__policy_model__ type][Policies to be verified whilst creating objects]]
    [[`TAllocator`][__allocator_model__ type][Allocator to be used when creating objects]]
    [[`TVisitor`][__visitor_model__ type][Visitor to be called when visiting creating objects]]
    [[`TAction`][None][Action to be called for scopes having `call(const TAction&)` method]]

    [[`x.create<T>(const TPolicies&...))`][__policy_model__][create object `T` with given policies]]
    [[`x.allocate<T>(const TAllocator&, const TPolicies&...))`][__allocator_model__, __policy_model__][create object T with given policies using given allocator]]
    [[`x.visit<T>()`][__visitor_model__][call visitor `operator()(const TObject&)` for all objects created during creation of object `T`]]
    [[`x.call(const TAction&)`][None][for all scopes which have `call(const TAction&)` call it with given action]]
]

[heading Expression Semantics]
    di::injector<TArgs...>(args...)

[heading Header]
    #include <boost/di.hpp>

[heading Examples]

[table
    [[Injector][Description]]
    [[```di::injector<>()```][create empty injector]]
    [[```di::injector<implementation>()```][equivalent to ```__di_injector__<__di_bind_deduce__<implementation>>```]]
    [[```di::injector<__di_bind__<interface, implementation>>()```][injector with `interface` to `implementation` binding configuration]]
    [[```di::injector<decltype(__di_bind__<int>::to(int())>(__di_bind__<int>::to(42))```][injector with configuration binding `42` value to `int` parameters]]
]
    using injector_empty_t = di::injector<>;

    using injector_t = di::injector<
        injector_empty_t
      , implementation
      , __di_bind_int__<42>
      , decltype(__di_bind__<long>::to(long()))
    >;

    injector_t injector(di::bind<long>::to(87l));

    assert(42 == injector.create<int>());
    assert(87l == injector.create<long>());
    assert(dynamic_cast<implementation*>(injector.create<unique_ptr<interface>>().get()));

[note In `C++03` `BOOST_TYPEOF_TPL` has to be used instead of `decltype`.]

[heading More Examples]
    ``__examples_hello_world__`` | ``__examples_modules__`` | ``__examples_uml_visitor__`` | ``__examples_custom_allocator__`` | ``__examples_custom_scope__``

[heading Tests]
    ``[@test/ut/injector_ut.cpp]`` | ``[@test/mt/injector_mt.cpp]`` | ``[@test/mt/core/module_mt.cpp]``

[heading See Also]

* __injectors_make_injector__
* __injectors__
* __modules__

[endsect]

[section make_injector]

[heading Description]
Creates `injector` type. Allows to bind dynamic values in no boilerplate manner.

[heading Synopsis]
    template<typename... TArgs>
    injector<TArgs...> inline make_injector(const TArgs&...);

[table Parameters
    [[Parameter][Requirement][Description]]
    [[`TArgs...`][__binding_model__ type][Bindings to be used as configuration]]
]

[heading Expression Semantics]
    di::make_injector(args...);

[*Return type]: `injector<...>`

[heading Header]
    #include <boost/di.hpp>

[heading Examples]
[table
    [[Injector][Description]]
    [[```di::make_injector()```][create empty injector]]
    [[```di::make_injector(__di_bind_deduce__<implementation>>())```][creates configuration with binds `implementation` to deduced `interface`]]
    [[```di::make_injector(__di_bind__<interface, implementation>>())```][injector with `interface` to `implementation` binding configuration]]
    [[```di::make_injector(__di_bind__<int>::to([]{return 42;}))```][injector with configuration binding `int` parameters with lambda expression returning `42`]]
    [[```di::make_injector(__di_bind__<function<int()>>::to([]{return 42;}))```][injector with configuration binding `function<int()>` parameters with lambda expression returning `42`]]
    [[```di::make_injector(__di_bind__<example>::to(cref(example)))```][binds `example` to const reference given object]]
    [[```di::make_injector(__di_bind__<int>::to(42))```][injector with configuration binding `42` value to `int` parameters]]
]

[heading Examples `C++11`]
    auto injector_empty = di::make_injector();

    auto injector = di::make_injector(
        injector_empty
      , __di_bind_deduce__<implementation>()
      , __di_bind_int__<42>()
      , __di_bind__<long>::to(42l)
    );

    assert(42 == injector.create<int>());
    assert(87l == injector.create<long>());
    assert(dynamic_cast<implementation*>(injector.create<unique_ptr<interface>>().get()));

[heading Examples `C++03`]
    #include <boost/typeof/typeof.hpp>

    BOOST_AUTO(injector_empty, (di::make_injector());

    BOOST_AUTO(injector, (
        di::make_injector(
            injector_empty
          , __di_bind_deduce__<implementation>()
          , __di_bind_int__<42>()
          , __di_bind__<long>::to(42l)
        )
    );

    assert(42 == injector.create<int>());
    assert(87l == injector.create<long>());
    assert(dynamic_cast<implementation*>(injector.create<unique_ptr<interface>>().get()));

[heading More Examples]
    ``__examples_hello_world__`` | ``__examples_modules__`` | ``__examples_uml_visitor__`` | ``__examples_custom_allocator__`` | ``__examples_custom_scope__`` | ``__examples_custom_policy__``


[heading Tests]
    ``[@test/mt/make_injector_mt.cpp]``

[heading See Also]

* __injectors_injector__
* __injectors__
* __modules__

[endsect]

[endsect]

