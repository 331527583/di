
[table
[[Create interface without bound][Error message]]
    [
        [
            ```
            ----------------------------------------
auto injector = di::make_injector();
injector.create<unique_ptr<i1>>();

                                                                                               .
            ```
        ]
        [
            ```
            -----------------------------------------
error: allocating an object of abstract
class type 'i1' return new (nothrow)
T{forward<TArgs>(args)...};
                                                                                                                       .
            ```
        ]
    ]
]


[table
[[Ambiguous binding][Error message]]
    [
        [
            ```
            auto injector = di::make_injector(
  , di::bind<int>.to(87)
);

injector.create<int>();
                                                                                               .
            ```
        ]
        [
            ```
            error: base class 'pair<int, no_name>'
specified more than once as a direct
base class
                                                                                                                       .
            ```
        ]
    ]
]


[table
[[Create not bound object with all bound][Error message]]
    [
        [
            ```
            ----------------------------------------
class all_bound : public di::config {
public:
  auto policies() const noexcept {
    return di::make_policies(
      allow_ctor_types(is_bound<_>{})
    );
  }
};

auto injector =
    di::make_injector<all_bound>();
injector.create<int>();
                                                                                               .
            ```
        ]
        [
            ```
            -----------------------------------------
error: static_assert failed
"Type T is not allowed"
                                                                                                                       .
            ```
        ]
    ]
]


[table
[[Wrong annotation][Error message]]
    [
        [
            ```
            ----------------------------------------
auto name = []{};

struct c {
    BOOST_DI_INJECT(c
        , (NAMED = name) int) { }
};

di::make_injector().create<c>();
                                                                                               .
            ```
        ]
        [
            ```
            -----------------------------------------
error: use of undeclared identifier
'named'
                                                                                                                       .
            ```
        ]
    ]
]
